(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _moment2 = require('moment');

var _moment3 = _interopRequireDefault(_moment2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    data: function data() {
        return {
            tweets: []
        };
    },

    sockets: {
        'newTweet': function newTweet(data) {
            this.checkLength(data);
        }
    },
    methods: {
        checkLength: function checkLength(tweet) {
            this.tweets.unshift(tweet);
            console.log(this.tweets.length);
            if (this.tweets.length >= 25) {
                this.tweets.splice(this.tweets.length - 1, 1);
            }
        },

        moment: function moment(time) {
            _moment3.default.locale('ru');
            return (0, _moment3.default)(time);
        }
    }

};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:"twitter-sect"},[_c('h1',[_vm._v("Последим за программистами? :)")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c('div',{staticClass:"twitter-list"},_vm._l((_vm.tweets),function(tweet){return _c('div',{staticClass:"single-twit"},[_c('div',{staticClass:"content-wrap"},[_c('div',{staticClass:"logo"},[(tweet.user.profile_background_image_url)?_c('img',{attrs:{"src":tweet.user.profile_background_image_url,"alt":""}}):_vm._e(),_vm._v(" "),(!tweet.user.profile_background_image_url)?_c('img',{attrs:{"src":"https://pbs.twimg.com/profile_images/796713233705037824/nVeKWX4u_bigger.jpg","alt":""}}):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"detail"},[_c('div',{staticClass:"user-wrap"},[_c('p',{staticClass:"user-name",style:({'color': '#'+tweet.user.profile_text_color})},[_vm._v(_vm._s(tweet.user.name))]),_vm._v(" "),_c('p',{staticClass:"user-nick"},[_vm._v("\n                            @"+_vm._s(tweet.user.screen_name)+"\n                        ")])]),_vm._v(" "),_c('div',{staticClass:"user-content-wrap"},[_c('p',{staticClass:"description"},[_vm._v("\n                            "+_vm._s(tweet.text)+"\n                        ")]),_vm._v(" "),_c('p',{staticClass:"source"},[_vm._v("\n                            Источник: "),_c('span',{domProps:{"innerHTML":_vm._s(tweet.source)}})])])]),_vm._v(" "),_c('div',{staticClass:"user-tags-wrap"},_vm._l((tweet.entities.hashtags),function(tag){return _c('p',{staticClass:"tag"},[_vm._v(_vm._s(tag.text))])}))])])}))])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tags-wrap"},[_c('h2',[_vm._v("Отслеживаемые темы:")]),_vm._v(" "),_c('div',{staticClass:"all-tags-list"},[_c('div',{staticClass:"single-tag"},[_c('span',{staticClass:"symbol"},[_vm._v("Laravel")])]),_vm._v(" "),_c('div',{staticClass:"single-tag"},[_c('span',{staticClass:"symbol"},[_vm._v("PHP")])]),_vm._v(" "),_c('div',{staticClass:"single-tag"},[_c('span',{staticClass:"symbol"},[_vm._v("Nodejs")])]),_vm._v(" "),_c('div',{staticClass:"single-tag"},[_c('span',{staticClass:"symbol"},[_vm._v("JS")])])])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-2d965e2e", __vue__options__)
  } else {
    hotAPI.reload("data-v-2d965e2e", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4udnVlPzQ3NWJiZWViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFzREE7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7O0FBWkE7Ozs7O0FBdkRBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XHJcbiAgICA8c2VjdGlvbiBjbGFzcz1cInR3aXR0ZXItc2VjdFwiPlxyXG4gICAgICAgIDxoMT7Qn9C+0YHQu9C10LTQuNC8INC30LAg0L/RgNC+0LPRgNCw0LzQvNC40YHRgtCw0LzQuD8gOik8L2gxPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YWdzLXdyYXBcIj5cclxuICAgICAgICAgICAgPGgyPtCe0YLRgdC70LXQttC40LLQsNC10LzRi9C1INGC0LXQvNGLOjwvaDI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGwtdGFncy1saXN0XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2luZ2xlLXRhZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3ltYm9sXCI+TGFyYXZlbDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNpbmdsZS10YWdcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN5bWJvbFwiPlBIUDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNpbmdsZS10YWdcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN5bWJvbFwiPk5vZGVqczwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNpbmdsZS10YWdcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN5bWJvbFwiPkpTPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0d2l0dGVyLWxpc3RcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNpbmdsZS10d2l0XCIgdi1mb3I9XCJ0d2VldCBpbiB0d2VldHNcIj5cclxuICAgICAgICAgICAgICAgIDwhLS17e3R3ZWV0LnRleHR9fS0tPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnQtd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2dvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz1cInR3ZWV0LnVzZXIucHJvZmlsZV9iYWNrZ3JvdW5kX2ltYWdlX3VybFwiIGFsdD1cIlwiIHYtaWY9XCJ0d2VldC51c2VyLnByb2ZpbGVfYmFja2dyb3VuZF9pbWFnZV91cmxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJodHRwczovL3Bicy50d2ltZy5jb20vcHJvZmlsZV9pbWFnZXMvNzk2NzEzMjMzNzA1MDM3ODI0L25WZUtXWDR1X2JpZ2dlci5qcGdcIiBhbHQ9XCJcIiB2LWlmPVwiIXR3ZWV0LnVzZXIucHJvZmlsZV9iYWNrZ3JvdW5kX2ltYWdlX3VybFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXItd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ1c2VyLW5hbWVcIiA6c3R5bGU9XCJ7J2NvbG9yJzogJyMnK3R3ZWV0LnVzZXIucHJvZmlsZV90ZXh0X2NvbG9yfVwiPnt7dHdlZXQudXNlci5uYW1lfX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInVzZXItbmlja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEB7e3R3ZWV0LnVzZXIuc2NyZWVuX25hbWV9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXItY29udGVudC13cmFwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImRlc2NyaXB0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t0d2VldC50ZXh0fX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic291cmNlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg0JjRgdGC0L7Rh9C90LjQujogPHNwYW4gdi1odG1sPVwidHdlZXQuc291cmNlXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXNlci10YWdzLXdyYXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0YWdcIiB2LWZvcj1cInRhZyBpbiB0d2VldC5lbnRpdGllcy5oYXNodGFnc1wiPnt7dGFnLnRleHR9fTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvc2VjdGlvbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgZGF0YSgpe1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHdlZXRzOiBbXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzb2NrZXRzOntcclxuICAgICAgICAgICAgJ25ld1R3ZWV0JzogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tMZW5ndGgoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgIGNoZWNrTGVuZ3RoKHR3ZWV0KXtcclxuICAgICAgICAgICAgICAgIHRoaXMudHdlZXRzLnVuc2hpZnQodHdlZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy50d2VldHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMudHdlZXRzLmxlbmd0aCA+PSAyNSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50d2VldHMuc3BsaWNlKHRoaXMudHdlZXRzLmxlbmd0aC0xLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW9tZW50OiBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgICAgICAgICAgICAgbW9tZW50LmxvY2FsZSgncnUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQodGltZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuPC9zY3JpcHQ+Il19
},{"moment":5,"vue":8,"vueify/node_modules/vue-hot-reload-api":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Events = undefined;

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _vueResource = require('vue-resource');

var _vueResource2 = _interopRequireDefault(_vueResource);

var _main = require('./components/main.vue');

var _main2 = _interopRequireDefault(_main);

var _vueSocket = require('vue-socket.io');

var _vueSocket2 = _interopRequireDefault(_vueSocket);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue2.default.use(_vueSocket2.default, 'http://localhost:8303');
_vue2.default.use(_vueResource2.default);

var Events = exports.Events = new _vue2.default({});
var app = new _vue2.default({
    el: '#app',

    sockets: {
        connect: function connect() {
            console.log('socket connected');
        }
    },
    components: {
        MainVue: _main2.default
    }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfODNmZjM1MmYuanMiXSwibmFtZXMiOlsidXNlIiwiRXZlbnRzIiwiYXBwIiwiZWwiLCJzb2NrZXRzIiwiY29ubmVjdCIsImNvbnNvbGUiLCJsb2ciLCJjb21wb25lbnRzIiwiTWFpblZ1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFHQTs7OztBQUVBOzs7Ozs7QUFFQSxjQUFJQSxHQUFKLHNCQUFxQix1QkFBckI7QUFDQSxjQUFJQSxHQUFKOztBQUVPLElBQU1DLDBCQUFTLGtCQUFRLEVBQVIsQ0FBZjtBQUNQLElBQU1DLE1BQU0sa0JBQVE7QUFDaEJDLFFBQUksTUFEWTs7QUFHaEJDLGFBQVE7QUFDSkMsaUJBQVMsbUJBQVU7QUFDZkMsb0JBQVFDLEdBQVIsQ0FBWSxrQkFBWjtBQUNIO0FBSEcsS0FIUTtBQVFoQkMsZ0JBQVc7QUFDUEM7QUFETzs7QUFSSyxDQUFSLENBQVoiLCJmaWxlIjoiZmFrZV84M2ZmMzUyZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJztcclxuaW1wb3J0IFZ1ZVJlc291cmNlIGZyb20gJ3Z1ZS1yZXNvdXJjZSc7XHJcblxyXG5cclxuaW1wb3J0IE1haW5WdWUgZnJvbSAnLi9jb21wb25lbnRzL21haW4udnVlJztcclxuXHJcbmltcG9ydCBWdWVTb2NrZXRpbyBmcm9tICd2dWUtc29ja2V0LmlvJztcclxuXHJcblZ1ZS51c2UoVnVlU29ja2V0aW8sICdodHRwOi8vbG9jYWxob3N0OjgzMDMnKTtcclxuVnVlLnVzZShWdWVSZXNvdXJjZSk7XHJcblxyXG5leHBvcnQgY29uc3QgRXZlbnRzID0gbmV3IFZ1ZSh7fSk7XHJcbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xyXG4gICAgZWw6ICcjYXBwJyxcclxuXHJcbiAgICBzb2NrZXRzOntcclxuICAgICAgICBjb25uZWN0OiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc29ja2V0IGNvbm5lY3RlZCcpXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBjb21wb25lbnRzOntcclxuICAgICAgICBNYWluVnVlXHJcbiAgICB9XHJcblxyXG59KTtcclxuIl19
},{"./components/main.vue":1,"vue":8,"vue-resource":6,"vue-socket.io":7}],3:[function(require,module,exports){
"use strict";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJlbXB0eS5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0=
},{}],4:[function(require,module,exports){
'use strict';

// shim for using process in browser

var process = module.exports = {};

process.nextTick = function () {
    var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
    var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

    if (canSetImmediate) {
        return function (f) {
            return window.setImmediate(f);
        };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
}();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJFcnJvciIsImN3ZCIsImNoZGlyIiwiZGlyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQUlBLFVBQVVDLE9BQU9DLE9BQVAsR0FBaUIsRUFBL0I7O0FBRUFGLFFBQVFHLFFBQVIsR0FBb0IsWUFBWTtBQUM1QixRQUFJQyxrQkFBa0IsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUNuQkEsT0FBT0MsWUFEVjtBQUVBLFFBQUlDLFVBQVUsT0FBT0YsTUFBUCxLQUFrQixXQUFsQixJQUNYQSxPQUFPRyxXQURJLElBQ1dILE9BQU9JLGdCQURoQzs7QUFJQSxRQUFJTCxlQUFKLEVBQXFCO0FBQ2pCLGVBQU8sVUFBVU0sQ0FBVixFQUFhO0FBQUUsbUJBQU9MLE9BQU9DLFlBQVAsQ0FBb0JJLENBQXBCLENBQVA7QUFBK0IsU0FBckQ7QUFDSDs7QUFFRCxRQUFJSCxPQUFKLEVBQWE7QUFDVCxZQUFJSSxRQUFRLEVBQVo7QUFDQU4sZUFBT0ksZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsVUFBVUcsRUFBVixFQUFjO0FBQzdDLGdCQUFJQyxTQUFTRCxHQUFHQyxNQUFoQjtBQUNBLGdCQUFJLENBQUNBLFdBQVdSLE1BQVgsSUFBcUJRLFdBQVcsSUFBakMsS0FBMENELEdBQUdFLElBQUgsS0FBWSxjQUExRCxFQUEwRTtBQUN0RUYsbUJBQUdHLGVBQUg7QUFDQSxvQkFBSUosTUFBTUssTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ2xCLHdCQUFJQyxLQUFLTixNQUFNTyxLQUFOLEVBQVQ7QUFDQUQ7QUFDSDtBQUNKO0FBQ0osU0FURCxFQVNHLElBVEg7O0FBV0EsZUFBTyxTQUFTZCxRQUFULENBQWtCYyxFQUFsQixFQUFzQjtBQUN6Qk4sa0JBQU1RLElBQU4sQ0FBV0YsRUFBWDtBQUNBWixtQkFBT0csV0FBUCxDQUFtQixjQUFuQixFQUFtQyxHQUFuQztBQUNILFNBSEQ7QUFJSDs7QUFFRCxXQUFPLFNBQVNMLFFBQVQsQ0FBa0JjLEVBQWxCLEVBQXNCO0FBQ3pCRyxtQkFBV0gsRUFBWCxFQUFlLENBQWY7QUFDSCxLQUZEO0FBR0gsQ0FqQ2tCLEVBQW5COztBQW1DQWpCLFFBQVFxQixLQUFSLEdBQWdCLFNBQWhCO0FBQ0FyQixRQUFRc0IsT0FBUixHQUFrQixJQUFsQjtBQUNBdEIsUUFBUXVCLEdBQVIsR0FBYyxFQUFkO0FBQ0F2QixRQUFRd0IsSUFBUixHQUFlLEVBQWY7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQixDQUFFOztBQUVsQnpCLFFBQVEwQixFQUFSLEdBQWFELElBQWI7QUFDQXpCLFFBQVEyQixXQUFSLEdBQXNCRixJQUF0QjtBQUNBekIsUUFBUTRCLElBQVIsR0FBZUgsSUFBZjtBQUNBekIsUUFBUTZCLEdBQVIsR0FBY0osSUFBZDtBQUNBekIsUUFBUThCLGNBQVIsR0FBeUJMLElBQXpCO0FBQ0F6QixRQUFRK0Isa0JBQVIsR0FBNkJOLElBQTdCO0FBQ0F6QixRQUFRZ0MsSUFBUixHQUFlUCxJQUFmOztBQUVBekIsUUFBUWlDLE9BQVIsR0FBa0IsVUFBVUMsSUFBVixFQUFnQjtBQUM5QixVQUFNLElBQUlDLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0gsQ0FGRDs7QUFJQTtBQUNBbkMsUUFBUW9DLEdBQVIsR0FBYyxZQUFZO0FBQUUsV0FBTyxHQUFQO0FBQVksQ0FBeEM7QUFDQXBDLFFBQVFxQyxLQUFSLEdBQWdCLFVBQVVDLEdBQVYsRUFBZTtBQUMzQixVQUFNLElBQUlILEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0gsQ0FGRCIsImZpbGUiOiJicm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG4iXX0=
},{}],5:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//! moment.js
//! version : 2.18.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
})(undefined, function () {
    'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
            // even if its not own property I'd still call it non-empty
            return false;
        }
        return true;
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function some(fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    var some$1 = some;

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (_typeof(arguments[i]) === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function keys(obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var keys$1 = keys;

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({ unit: u, priority: priorities[u] });
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid()) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if ((typeof units === 'undefined' ? 'undefined' : _typeof(units)) === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function func() {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1 = /\d/; //       0 - 9
    var match2 = /\d\d/; //      00 - 99
    var match3 = /\d{3}/; //     000 - 999
    var match4 = /\d{4}/; //    0000 - 9999
    var match6 = /[+-]?\d{6}/; // -999999 - 999999
    var match1to2 = /\d\d?/; //       0 - 99
    var match3to4 = /\d\d\d\d?/; //     999 - 9999
    var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3 = /\d{1,3}/; //       0 - 999
    var match1to4 = /\d{1,4}/; //       0 - 9999
    var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

    var matchUnsigned = /\d+/; //       0 - inf
    var matchSigned = /[+-]?\d+/; //    -inf - inf

    var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function func(input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function indexOf(o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    var indexOf$1 = indexOf;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf$1.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf$1.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date = new Date(y, m, d, h, M, s, ms);

        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,

        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
        if (!m) {
            return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf$1.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf$1.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf$1.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    // months
    // week
    // weekdays
    // meridiem
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    if (!localeFamilies[config.parentLocale]) {
                        localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                        name: name,
                        config: config
                    });
                    return null;
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                parentConfig = baseConfig;
            // MERGE
            if (locales[name] != null) {
                parentConfig = locales[name]._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys$1(locales);
    }

    function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];

    // iso time formats and regexes
    var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var string, match, dayFormat, dateFormat, timeFormat, tzFormat;
        var timezones = {
            ' GMT': ' +0000',
            ' EDT': ' -0400',
            ' EST': ' -0500',
            ' CDT': ' -0500',
            ' CST': ' -0600',
            ' MDT': ' -0600',
            ' MST': ' -0700',
            ' PDT': ' -0700',
            ' PST': ' -0800'
        };
        var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
        var timezone, timezoneIndex;

        string = config._i.replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
        match = basicRfcRegex.exec(string);

        if (match) {
            dayFormat = match[1] ? 'ddd' + (match[1].length === 5 ? ', ' : ' ') : '';
            dateFormat = 'D MMM ' + (match[2].length > 10 ? 'YYYY ' : 'YY ');
            timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            if (match[1]) {
                // day of week given
                var momentDate = new Date(match[2]);
                var momentDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][momentDate.getDay()];

                if (match[1].substr(0, 3) !== momentDay) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return;
                }
            }

            switch (match[5].length) {
                case 2:
                    // military
                    if (timezoneIndex === 0) {
                        timezone = ' +0000';
                    } else {
                        timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                        timezone = (timezoneIndex < 0 ? ' -' : ' +') + ('' + timezoneIndex).replace(/^-?/, '0').match(/..$/)[0] + '00';
                    }
                    break;
                case 4:
                    // Zone
                    timezone = timezones[match[5]];
                    break;
                default:
                    // UT or +/-9999
                    timezone = timezones[' GMT'];
            }
            match[5] = timezone;
            config._i = match.splice(1).join('');
            tzFormat = ' ZZ';
            config._f = dayFormat + dateFormat + timeFormat + tzFormat;
            configFromStringAndFormat(config);
            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || format === undefined && input === '') {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    });

    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    });

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function now() {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,

        // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if ((typeof duration === 'undefined' ? 'undefined' : _typeof(duration)) === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = { milliseconds: 0, months: 0 };

        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;val = period;period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, delta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),

        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString() {
        if (!this.isValid()) {
            return null;
        }
        var m = this.clone().utc();
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        }
        return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });

    function localeData() {
        return this._locale;
    }

    function startOf(units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
            /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
            /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
            /* falls through */
            case 'hour':
                this.minutes(0);
            /* falls through */
            case 'minute':
                this.seconds(0);
            /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIOROITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;

    // Year
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;

    // Week Year
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    proto.quarter = proto.quarters = getSetQuarter;

    // Month
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;

    // Week
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;

    // Hour
    proto.hour = proto.hours = getSetHour;

    // Minute
    proto.minute = proto.minutes = getSetMinute;

    // Second
    proto.second = proto.seconds = getSetSecond;

    // Millisecond
    proto.millisecond = proto.milliseconds = getSetMillisecond;

    // Offset
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;

    // Timezone
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;

    // Deprecations
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;

    // Month
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;

    // Week
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    // Hours
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44, // a few seconds to seconds
        s: 45, // seconds to minute
        m: 45, // minutes to hour
        h: 22, // hours to day
        d: 26, // days to month
        M: 11 // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    // Deprecations
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.18.1';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    return hooks;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vbWVudC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIm1vbWVudCIsImhvb2tDYWxsYmFjayIsImhvb2tzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzZXRIb29rQ2FsbGJhY2siLCJjYWxsYmFjayIsImlzQXJyYXkiLCJpbnB1dCIsIkFycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiaXNPYmplY3QiLCJpc09iamVjdEVtcHR5Iiwib2JqIiwiayIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJEYXRlIiwibWFwIiwiYXJyIiwiZm4iLCJyZXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsImhhc093blByb3AiLCJhIiwiYiIsImhhc093blByb3BlcnR5IiwiZXh0ZW5kIiwidmFsdWVPZiIsImNyZWF0ZVVUQyIsImZvcm1hdCIsImxvY2FsZSIsInN0cmljdCIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJkZWZhdWx0UGFyc2luZ0ZsYWdzIiwiZW1wdHkiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsIm92ZXJmbG93IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJnZXRQYXJzaW5nRmxhZ3MiLCJtIiwiX3BmIiwic29tZSIsImZ1biIsInQiLCJsZW4iLCJzb21lJDEiLCJpc1ZhbGlkIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsImlzTmFOIiwiX2QiLCJnZXRUaW1lIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwiYmlnSG91ciIsInVuZGVmaW5lZCIsImlzRnJvemVuIiwiY3JlYXRlSW52YWxpZCIsIk5hTiIsIm1vbWVudFByb3BlcnRpZXMiLCJjb3B5Q29uZmlnIiwidG8iLCJmcm9tIiwicHJvcCIsInZhbCIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJ1cGRhdGVJblByb2dyZXNzIiwiTW9tZW50IiwiY29uZmlnIiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJhYnNGbG9vciIsIm51bWJlciIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwidmFsdWUiLCJpc0Zpbml0ZSIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsIm1pbiIsImxlbmd0aERpZmYiLCJhYnMiLCJkaWZmcyIsIndhcm4iLCJtc2ciLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJjb25zb2xlIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiYXJncyIsImFyZyIsImtleSIsInNsaWNlIiwiam9pbiIsIkVycm9yIiwic3RhY2siLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJuYW1lIiwiaXNGdW5jdGlvbiIsIkZ1bmN0aW9uIiwic2V0IiwiX2NvbmZpZyIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsIlJlZ0V4cCIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwic291cmNlIiwiX29yZGluYWxQYXJzZSIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwia2V5cyIsImtleXMkMSIsImRlZmF1bHRDYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImNhbGVuZGFyIiwibW9tIiwibm93Iiwib3V0cHV0IiwiX2NhbGVuZGFyIiwiZGVmYXVsdExvbmdEYXRlRm9ybWF0IiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwibG9uZ0RhdGVGb3JtYXQiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsInRvVXBwZXJDYXNlIiwicmVwbGFjZSIsImRlZmF1bHRJbnZhbGlkRGF0ZSIsImludmFsaWREYXRlIiwiX2ludmFsaWREYXRlIiwiZGVmYXVsdE9yZGluYWwiLCJkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm9yZGluYWwiLCJfb3JkaW5hbCIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0IiwicyIsInNzIiwibW0iLCJoIiwiaGgiLCJkIiwiZGQiLCJNIiwiTU0iLCJ5IiwieXkiLCJyZWxhdGl2ZVRpbWUiLCJ3aXRob3V0U3VmZml4Iiwic3RyaW5nIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImRpZmYiLCJhbGlhc2VzIiwiYWRkVW5pdEFsaWFzIiwidW5pdCIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkSW5wdXQiLCJub3JtYWxpemVkUHJvcCIsInByaW9yaXRpZXMiLCJhZGRVbml0UHJpb3JpdHkiLCJwcmlvcml0eSIsImdldFByaW9yaXRpemVkVW5pdHMiLCJ1bml0c09iaiIsInUiLCJzb3J0IiwibWFrZUdldFNldCIsImtlZXBUaW1lIiwic2V0JDEiLCJnZXQiLCJzdHJpbmdHZXQiLCJzdHJpbmdTZXQiLCJwcmlvcml0aXplZCIsInplcm9GaWxsIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiemVyb3NUb0ZpbGwiLCJzaWduIiwicG93IiwibWF4Iiwic3Vic3RyIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsImZ1bmMiLCJsb2NhbGVEYXRhIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1hdGNoIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiYXJyYXkiLCJmb3JtYXRNb21lbnQiLCJleHBhbmRGb3JtYXQiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsYXN0SW5kZXgiLCJ0ZXN0IiwibWF0Y2gxIiwibWF0Y2gyIiwibWF0Y2gzIiwibWF0Y2g0IiwibWF0Y2g2IiwibWF0Y2gxdG8yIiwibWF0Y2gzdG80IiwibWF0Y2g1dG82IiwibWF0Y2gxdG8zIiwibWF0Y2gxdG80IiwibWF0Y2gxdG82IiwibWF0Y2hVbnNpZ25lZCIsIm1hdGNoU2lnbmVkIiwibWF0Y2hPZmZzZXQiLCJtYXRjaFNob3J0T2Zmc2V0IiwibWF0Y2hUaW1lc3RhbXAiLCJtYXRjaFdvcmQiLCJyZWdleGVzIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJZRUFSIiwiTU9OVEgiLCJEQVRFIiwiSE9VUiIsIk1JTlVURSIsIlNFQ09ORCIsIk1JTExJU0VDT05EIiwiV0VFSyIsIldFRUtEQVkiLCJpbmRleE9mIiwibyIsImluZGV4T2YkMSIsImRheXNJbk1vbnRoIiwieWVhciIsIm1vbnRoIiwiVVRDIiwiZ2V0VVRDRGF0ZSIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsInNwbGl0IiwibG9jYWxlTW9udGhzIiwiX21vbnRocyIsImlzRm9ybWF0IiwiZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IiwibG9jYWxlTW9udGhzU2hvcnQiLCJfbW9udGhzU2hvcnQiLCJoYW5kbGVTdHJpY3RQYXJzZSIsIm1vbnRoTmFtZSIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJsb2NhbGVNb250aHNQYXJzZSIsIl9tb250aHNQYXJzZUV4YWN0Iiwic2V0TW9udGgiLCJkYXlPZk1vbnRoIiwiZGF0ZSIsImdldFNldE1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImNvbXB1dGVNb250aHNQYXJzZSIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsInBhcnNlVHdvRGlnaXRZZWFyIiwicGFyc2VJbnQiLCJkYXlzSW5ZZWFyIiwiaXNMZWFwWWVhciIsImdldFNldFllYXIiLCJnZXRJc0xlYXBZZWFyIiwiY3JlYXRlRGF0ZSIsIm1zIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImNyZWF0ZVVUQ0RhdGUiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZndkbHciLCJnZXRVVENEYXkiLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJ3ZWVrIiwid2Vla2RheSIsImxvY2FsV2Vla2RheSIsIndlZWtPZmZzZXQiLCJkYXlPZlllYXIiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrc0luWWVhciIsIndlZWtPZmZzZXROZXh0IiwibG9jYWxlV2VlayIsIl93ZWVrIiwiZGVmYXVsdExvY2FsZVdlZWsiLCJsb2NhbGVGaXJzdERheU9mV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZZZWFyIiwiZ2V0U2V0V2VlayIsImFkZCIsImdldFNldElTT1dlZWsiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5cyIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNQYXJzZSIsInBhcnNlV2Vla2RheSIsInBhcnNlSXNvV2Vla2RheSIsImRlZmF1bHRMb2NhbGVXZWVrZGF5cyIsImxvY2FsZVdlZWtkYXlzIiwiX3dlZWtkYXlzIiwiZGF5IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJsb2NhbGVXZWVrZGF5c1Nob3J0IiwiX3dlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJsb2NhbGVXZWVrZGF5c01pbiIsIl93ZWVrZGF5c01pbiIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwibG9jYWxlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJnZXRTZXREYXlPZldlZWsiLCJnZXREYXkiLCJnZXRTZXRMb2NhbGVEYXlPZldlZWsiLCJnZXRTZXRJU09EYXlPZldlZWsiLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsIm1pblBpZWNlcyIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsImhGb3JtYXQiLCJob3VycyIsImtGb3JtYXQiLCJtaW51dGVzIiwic2Vjb25kcyIsImxvd2VyY2FzZSIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImtJbnB1dCIsIl9pc1BtIiwiaXNQTSIsIl9tZXJpZGllbSIsInBvcyIsInBvczEiLCJwb3MyIiwibG9jYWxlSXNQTSIsImNoYXJBdCIsImRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlIiwibG9jYWxlTWVyaWRpZW0iLCJpc0xvd2VyIiwiZ2V0U2V0SG91ciIsImJhc2VDb25maWciLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwibWVyaWRpZW1QYXJzZSIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsImdsb2JhbExvY2FsZSIsIm5vcm1hbGl6ZUxvY2FsZSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwiaiIsIm5leHQiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiX2FiYnIiLCJyZXF1aXJlIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwiZSIsInZhbHVlcyIsImRhdGEiLCJnZXRMb2NhbGUiLCJkZWZpbmVMb2NhbGUiLCJhYmJyIiwicGFyZW50TG9jYWxlIiwiZm9yRWFjaCIsIngiLCJ1cGRhdGVMb2NhbGUiLCJsaXN0TG9jYWxlcyIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4IiwiY29uZmlnRnJvbUlTTyIsImwiLCJleGVjIiwiYWxsb3dUaW1lIiwiZGF0ZUZvcm1hdCIsInRpbWVGb3JtYXQiLCJ0ekZvcm1hdCIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJiYXNpY1JmY1JlZ2V4IiwiY29uZmlnRnJvbVJGQzI4MjIiLCJkYXlGb3JtYXQiLCJ0aW1lem9uZXMiLCJtaWxpdGFyeSIsInRpbWV6b25lIiwidGltZXpvbmVJbmRleCIsIm1vbWVudERhdGUiLCJtb21lbnREYXkiLCJzcGxpY2UiLCJjb25maWdGcm9tU3RyaW5nIiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJfdXNlVVRDIiwiZGVmYXVsdHMiLCJjIiwiY3VycmVudERhdGVBcnJheSIsIm5vd1ZhbHVlIiwiZ2V0VVRDTW9udGgiLCJnZXRNb250aCIsImdldERhdGUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwidyIsIndlZWtZZWFyIiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsImN1cldlZWsiLCJnZyIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJwYXJzZWRJbnB1dCIsInNraXBwZWQiLCJzdHJpbmdMZW5ndGgiLCJ0b3RhbFBhcnNlZElucHV0TGVuZ3RoIiwibWVyaWRpZW1GaXhXcmFwIiwiaG91ciIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwic2NvcmUiLCJjb25maWdGcm9tT2JqZWN0IiwibWludXRlIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJjcmVhdGVGcm9tQ29uZmlnIiwicHJlcGFyZUNvbmZpZyIsInByZXBhcnNlIiwiY29uZmlnRnJvbUlucHV0IiwiaXNVVEMiLCJwcm90b3R5cGVNaW4iLCJvdGhlciIsInByb3RvdHlwZU1heCIsInBpY2tCeSIsIm1vbWVudHMiLCJvcmRlcmluZyIsImlzRHVyYXRpb25WYWxpZCIsInVuaXRIYXNEZWNpbWFsIiwicGFyc2VGbG9hdCIsImlzVmFsaWQkMSIsImNyZWF0ZUludmFsaWQkMSIsImNyZWF0ZUR1cmF0aW9uIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJxdWFydGVyIiwid2Vla3MiLCJkYXlzIiwibWlsbGlzZWNvbmRzIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX2RhdGEiLCJfYnViYmxlIiwiaXNEdXJhdGlvbiIsImFic1JvdW5kIiwicm91bmQiLCJvZmZzZXQiLCJzZXBhcmF0b3IiLCJ1dGNPZmZzZXQiLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImNodW5rIiwicGFydHMiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImNsb25lIiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0U2V0T2Zmc2V0Iiwia2VlcExvY2FsVGltZSIsImtlZXBNaW51dGVzIiwibG9jYWxBZGp1c3QiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsImFkZFN1YnRyYWN0IiwiZ2V0U2V0Wm9uZSIsInNldE9mZnNldFRvVVRDIiwic2V0T2Zmc2V0VG9Mb2NhbCIsInN1YnRyYWN0Iiwic2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQiLCJ0Wm9uZSIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEYXlsaWdodFNhdmluZ1RpbWUiLCJpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwidG9BcnJheSIsImlzTG9jYWwiLCJpc1V0Y09mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsInJldCIsImRpZmZSZXMiLCJwYXJzZUlzbyIsIm1vbWVudHNEaWZmZXJlbmNlIiwiaW52YWxpZCIsImlucCIsInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCJiYXNlIiwiaXNBZnRlciIsImlzQmVmb3JlIiwiY3JlYXRlQWRkZXIiLCJkaXJlY3Rpb24iLCJwZXJpb2QiLCJkdXIiLCJ0bXAiLCJpc0FkZGluZyIsImdldENhbGVuZGFyRm9ybWF0IiwibXlNb21lbnQiLCJjYWxlbmRhciQxIiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJsb2NhbElucHV0IiwiZW5kT2YiLCJpc0JldHdlZW4iLCJpbmNsdXNpdml0eSIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJhc0Zsb2F0IiwidGhhdCIsInpvbmVEZWx0YSIsImRlbHRhIiwibW9udGhEaWZmIiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJhbmNob3IyIiwiYWRqdXN0IiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJ0b0lTT1N0cmluZyIsInRvRGF0ZSIsImluc3BlY3QiLCJ6b25lIiwicHJlZml4IiwiZGF0ZXRpbWUiLCJzdWZmaXgiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJodW1hbml6ZSIsImZyb21Ob3ciLCJ0b05vdyIsIm5ld0xvY2FsZURhdGEiLCJsYW5nIiwiaXNvV2Vla2RheSIsInVuaXgiLCJ0b09iamVjdCIsInRvSlNPTiIsImlzVmFsaWQkMiIsInBhcnNpbmdGbGFncyIsImludmFsaWRBdCIsImNyZWF0aW9uRGF0YSIsImlzb1dlZWtZZWFyIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldHRlciIsImdldFNldFdlZWtZZWFyIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJnZXRTZXRJU09XZWVrWWVhciIsImlzb1dlZWsiLCJnZXRJU09XZWVrc0luWWVhciIsImdldFdlZWtzSW5ZZWFyIiwid2Vla0luZm8iLCJ3ZWVrc1RhcmdldCIsInNldFdlZWtBbGwiLCJkYXlPZlllYXJEYXRhIiwiZ2V0U2V0UXVhcnRlciIsImdldFNldERheU9mTW9udGgiLCJnZXRTZXREYXlPZlllYXIiLCJnZXRTZXRNaW51dGUiLCJnZXRTZXRTZWNvbmQiLCJwYXJzZU1zIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJnZXRab25lQWJiciIsImdldFpvbmVOYW1lIiwicHJvdG8iLCJpc29XZWVrcyIsImlzb1dlZWtzSW5ZZWFyIiwicGFyc2Vab25lIiwiaXNEU1QiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJjcmVhdGVVbml4IiwiY3JlYXRlSW5ab25lIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwicHJvdG8kMSIsImZpcnN0RGF5T2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJnZXQkMSIsImluZGV4IiwiZmllbGQiLCJzZXR0ZXIiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJzaGlmdCIsImxpc3RNb250aHMiLCJsaXN0TW9udGhzU2hvcnQiLCJsaXN0V2Vla2RheXMiLCJsaXN0V2Vla2RheXNTaG9ydCIsImxpc3RXZWVrZGF5c01pbiIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhZGQkMSIsInN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiYnViYmxlIiwibW9udGhzRnJvbURheXMiLCJtb250aHNUb0RheXMiLCJkYXlzVG9Nb250aHMiLCJhcyIsInZhbHVlT2YkMSIsIm1ha2VBcyIsImFsaWFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNZZWFycyIsImdldCQyIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsInJlbGF0aXZlVGltZSQxIiwicG9zTmVnRHVyYXRpb24iLCJnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsIndpdGhTdWZmaXgiLCJhYnMkMSIsInRvSVNPU3RyaW5nJDEiLCJZIiwiRCIsInRvdGFsIiwicHJvdG8kMiIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFFLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3pCLFlBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBbkIsSUFBK0IsT0FBT0MsTUFBUCxLQUFrQixXQUFqRCxHQUErREEsT0FBT0QsT0FBUCxHQUFpQkQsU0FBaEYsR0FDQSxPQUFPRyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxPQUFPQyxHQUF2QyxHQUE2Q0QsT0FBT0gsT0FBUCxDQUE3QyxHQUNBRCxPQUFPTSxNQUFQLEdBQWdCTCxTQUZoQjtBQUdILENBSkMsYUFJTyxZQUFZO0FBQUU7O0FBRXZCLFFBQUlNLFlBQUo7O0FBRUEsYUFBU0MsS0FBVCxHQUFrQjtBQUNkLGVBQU9ELGFBQWFFLEtBQWIsQ0FBbUIsSUFBbkIsRUFBeUJDLFNBQXpCLENBQVA7QUFDSDs7QUFFRDtBQUNBO0FBQ0EsYUFBU0MsZUFBVCxDQUEwQkMsUUFBMUIsRUFBb0M7QUFDaENMLHVCQUFlSyxRQUFmO0FBQ0g7O0FBRUQsYUFBU0MsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFDcEIsZUFBT0EsaUJBQWlCQyxLQUFqQixJQUEwQkMsT0FBT0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxLQUEvQixNQUEwQyxnQkFBM0U7QUFDSDs7QUFFRCxhQUFTTSxRQUFULENBQWtCTixLQUFsQixFQUF5QjtBQUNyQjtBQUNBO0FBQ0EsZUFBT0EsU0FBUyxJQUFULElBQWlCRSxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLEtBQS9CLE1BQTBDLGlC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U0FBOUI7QUFDQWpDLFVBQU13cUIsSUFBTixHQUE4QnNDLFVBQTlCO0FBQ0E5c0IsVUFBTWlULE1BQU4sR0FBOEI0YSxVQUE5QjtBQUNBN3RCLFVBQU1rQixNQUFOLEdBQThCQSxNQUE5QjtBQUNBbEIsVUFBTW1DLE1BQU4sR0FBOEI2YSxrQkFBOUI7QUFDQWhkLFVBQU1rbkIsT0FBTixHQUE4QnZpQixhQUE5QjtBQUNBM0UsVUFBTTBqQixRQUFOLEdBQThCRixjQUE5QjtBQUNBeGpCLFVBQU0rRixRQUFOLEdBQThCQSxRQUE5QjtBQUNBL0YsVUFBTWlZLFFBQU4sR0FBOEI4VixZQUE5QjtBQUNBL3RCLFVBQU13c0IsU0FBTixHQUE4Qk8sWUFBOUI7QUFDQS9zQixVQUFNaVAsVUFBTixHQUE4Qm1PLFNBQTlCO0FBQ0FwZCxVQUFNcWtCLFVBQU4sR0FBOEJBLFVBQTlCO0FBQ0Fya0IsVUFBTWdULFdBQU4sR0FBOEI4YSxlQUE5QjtBQUNBOXRCLFVBQU0rWCxXQUFOLEdBQThCa1csZUFBOUI7QUFDQWp1QixVQUFNcWQsWUFBTixHQUE4QkEsWUFBOUI7QUFDQXJkLFVBQU0wZCxZQUFOLEdBQThCQSxZQUE5QjtBQUNBMWQsVUFBTW9jLE9BQU4sR0FBOEJ1QixXQUE5QjtBQUNBM2QsVUFBTWdZLGFBQU4sR0FBOEJnVyxpQkFBOUI7QUFDQWh1QixVQUFNNE0sY0FBTixHQUE4QkEsY0FBOUI7QUFDQTVNLFVBQU00d0Isb0JBQU4sR0FBNkJkLDBCQUE3QjtBQUNBOXZCLFVBQU02d0IscUJBQU4sR0FBOEJiLDJCQUE5QjtBQUNBaHdCLFVBQU1xb0IsY0FBTixHQUE4QlAsaUJBQTlCO0FBQ0E5bkIsVUFBTVMsU0FBTixHQUE4QjRyQixLQUE5Qjs7QUFFQSxXQUFPcnNCLEtBQVA7QUFFQyxDQXgySUMsQ0FBRCIsImZpbGUiOiJtb21lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMTguMVxuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgaG9va0NhbGxiYWNrO1xuXG5mdW5jdGlvbiBob29rcyAoKSB7XG4gICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG4vLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG5mdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICB2YXIgaztcbiAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgIC8vIGV2ZW4gaWYgaXRzIG5vdCBvd24gcHJvcGVydHkgSSdkIHN0aWxsIGNhbGwgaXQgbm9uLWVtcHR5XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5mdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICB9XG5cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICBwYXJzZWREYXRlUGFydHMgOiBbXSxcbiAgICAgICAgbWVyaWRpZW0gICAgICAgIDogbnVsbCxcbiAgICAgICAgcmZjMjgyMiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIHdlZWtkYXlNaXNtYXRjaCA6IGZhbHNlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIG0uX3BmO1xufVxuXG52YXIgc29tZTtcbmlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbn0gZWxzZSB7XG4gICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn1cblxudmFyIHNvbWUkMSA9IHNvbWU7XG5cbmZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICB2YXIgcGFyc2VkUGFydHMgPSBzb21lJDEuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGlzTm93VmFsaWQgPSAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcblxuICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICBpc05vd1ZhbGlkID0gaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbnZhciBtb21lbnRQcm9wZXJ0aWVzID0gaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG5mdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICB9XG5cbiAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbn1cblxudmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbmZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgIC8vIG9iamVjdHMuXG4gICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbn1cblxuZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbn1cblxuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICBpZiAoaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICB2YXIgYXJnO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0sIGZuKTtcbn1cblxudmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgIH1cbiAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgfVxufVxuXG5ob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbmhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5mdW5jdGlvbiBzZXQgKGNvbmZpZykge1xuICAgIHZhciBwcm9wLCBpO1xuICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xufVxuXG5mdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksIHByb3A7XG4gICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgIH1cbn1cblxudmFyIGtleXM7XG5cbmlmIChPYmplY3Qua2V5cykge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cztcbn0gZWxzZSB7XG4gICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIGksIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuXG52YXIga2V5cyQxID0ga2V5cztcblxudmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICBzYW1lRWxzZSA6ICdMJ1xufTtcblxuZnVuY3Rpb24gY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xufVxuXG52YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICBMVCAgIDogJ2g6bW0gQScsXG4gICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgTExMICA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG59O1xuXG5mdW5jdGlvbiBsb25nRGF0ZUZvcm1hdCAoa2V5KSB7XG4gICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXIucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xufVxuXG52YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbmZ1bmN0aW9uIGludmFsaWREYXRlICgpIHtcbiAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG59XG5cbnZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCc7XG52YXIgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG5mdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG59XG5cbnZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgcyAgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgbSAgOiAnYSBtaW51dGUnLFxuICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgIGggIDogJ2FuIGhvdXInLFxuICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICBkICA6ICdhIGRheScsXG4gICAgZGQgOiAnJWQgZGF5cycsXG4gICAgTSAgOiAnYSBtb250aCcsXG4gICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICB5ICA6ICdhIHllYXInLFxuICAgIHl5IDogJyVkIHllYXJzJ1xufTtcblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgcmV0dXJuIChpc0Z1bmN0aW9uKG91dHB1dCkpID9cbiAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbn1cblxuZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbn1cblxudmFyIGFsaWFzZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgIHByb3A7XG5cbiAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbn1cblxudmFyIHByaW9yaXRpZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5O1xufVxuXG5mdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgdmFyIHVuaXRzID0gW107XG4gICAgZm9yICh2YXIgdSBpbiB1bml0c09iaikge1xuICAgICAgICB1bml0cy5wdXNoKHt1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XX0pO1xuICAgIH1cbiAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5pdHM7XG59XG5cbmZ1bmN0aW9uIG1ha2VHZXRTZXQgKHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldCAobW9tLCB1bml0KSB7XG4gICAgcmV0dXJuIG1vbS5pc1ZhbGlkKCkgP1xuICAgICAgICBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKSA6IE5hTjtcbn1cblxuZnVuY3Rpb24gc2V0JDEgKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICBpZiAobW9tLmlzVmFsaWQoKSkge1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBzdHJpbmdHZXQgKHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuXG5mdW5jdGlvbiBzdHJpbmdTZXQgKHVuaXRzLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmlvcml0aXplZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgcmV0dXJuIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcbn1cblxudmFyIGZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oW0hoXW1tKHNzKT98TW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UW8/fFlZWVlZWXxZWVlZWXxZWVlZfFlZfGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fGtrP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nO1xuXG52YXIgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZztcblxudmFyIGZvcm1hdEZ1bmN0aW9ucyA9IHt9O1xuXG52YXIgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuLy8gdG9rZW46ICAgICdNJ1xuLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuLy8gb3JkaW5hbDogICdNbydcbi8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4gKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh0b2tlbikge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgIH1cbiAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0b2tlbik7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksIGksIGxlbmd0aDtcblxuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAnJywgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSkgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSA6IGFycmF5W2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn1cblxuLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG5mdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPSBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbn1cblxuZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgdmFyIGkgPSA1O1xuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgIH1cblxuICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShsb2NhbEZvcm1hdHRpbmdUb2tlbnMsIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vucyk7XG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICBpIC09IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdDtcbn1cblxudmFyIG1hdGNoMSAgICAgICAgID0gL1xcZC87ICAgICAgICAgICAgLy8gICAgICAgMCAtIDlcbnZhciBtYXRjaDIgICAgICAgICA9IC9cXGRcXGQvOyAgICAgICAgICAvLyAgICAgIDAwIC0gOTlcbnZhciBtYXRjaDMgICAgICAgICA9IC9cXGR7M30vOyAgICAgICAgIC8vICAgICAwMDAgLSA5OTlcbnZhciBtYXRjaDQgICAgICAgICA9IC9cXGR7NH0vOyAgICAgICAgIC8vICAgIDAwMDAgLSA5OTk5XG52YXIgbWF0Y2g2ICAgICAgICAgPSAvWystXT9cXGR7Nn0vOyAgICAvLyAtOTk5OTk5IC0gOTk5OTk5XG52YXIgbWF0Y2gxdG8yICAgICAgPSAvXFxkXFxkPy87ICAgICAgICAgLy8gICAgICAgMCAtIDk5XG52YXIgbWF0Y2gzdG80ICAgICAgPSAvXFxkXFxkXFxkXFxkPy87ICAgICAvLyAgICAgOTk5IC0gOTk5OVxudmFyIG1hdGNoNXRvNiAgICAgID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vOyAvLyAgIDk5OTk5IC0gOTk5OTk5XG52YXIgbWF0Y2gxdG8zICAgICAgPSAvXFxkezEsM30vOyAgICAgICAvLyAgICAgICAwIC0gOTk5XG52YXIgbWF0Y2gxdG80ICAgICAgPSAvXFxkezEsNH0vOyAgICAgICAvLyAgICAgICAwIC0gOTk5OVxudmFyIG1hdGNoMXRvNiAgICAgID0gL1srLV0/XFxkezEsNn0vOyAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuXG52YXIgbWF0Y2hVbnNpZ25lZCAgPSAvXFxkKy87ICAgICAgICAgICAvLyAgICAgICAwIC0gaW5mXG52YXIgbWF0Y2hTaWduZWQgICAgPSAvWystXT9cXGQrLzsgICAgICAvLyAgICAtaW5mIC0gaW5mXG5cbnZhciBtYXRjaE9mZnNldCAgICA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naTsgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG52YXIgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpOyAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuXG52YXIgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vOyAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuXG4vLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbi8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbnZhciBtYXRjaFdvcmQgPSAvWzAtOV0qWydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdK3xbXFx1MDYwMC1cXHUwNkZGXFwvXSsoXFxzKj9bXFx1MDYwMC1cXHUwNkZGXSspezEsMn0vaTtcblxuXG52YXIgcmVnZXhlcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRSZWdleFRva2VuICh0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KSA/IHJlZ2V4IDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG59XG5cbi8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbmZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICByZXR1cm4gcmVnZXhFc2NhcGUocy5yZXBsYWNlKCdcXFxcJywgJycpLnJlcGxhY2UoL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZywgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbn1cblxudmFyIHRva2VucyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICB2YXIgaSwgZnVuYyA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICB9XG59XG5cbnZhciBZRUFSID0gMDtcbnZhciBNT05USCA9IDE7XG52YXIgREFURSA9IDI7XG52YXIgSE9VUiA9IDM7XG52YXIgTUlOVVRFID0gNDtcbnZhciBTRUNPTkQgPSA1O1xudmFyIE1JTExJU0VDT05EID0gNjtcbnZhciBXRUVLID0gNztcbnZhciBXRUVLREFZID0gODtcblxudmFyIGluZGV4T2Y7XG5cbmlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbn0gZWxzZSB7XG4gICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIC8vIEkga25vd1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG59XG5cbnZhciBpbmRleE9mJDEgPSBpbmRleE9mO1xuXG5mdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCArIDEsIDApKS5nZXRVVENEYXRlKCk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbn0pO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21vbnRoJywgOCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignTScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignTU1NJywgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICB9XG59KTtcblxuLy8gTE9DQUxFU1xuXG52YXIgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LztcbnZhciBkZWZhdWx0TG9jYWxlTW9udGhzID0gJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVNb250aHMgKG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV0gOlxuICAgICAgICB0aGlzLl9tb250aHNbKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0IChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnQgOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXSA6XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0W01PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UgKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU1NJyAmJiB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NJyAmJiB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIHNldE1vbnRoIChtb20sIHZhbHVlKSB7XG4gICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgIHJldHVybiBtb207XG59XG5cbmZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF5c0luTW9udGggKCkge1xuICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbn1cblxudmFyIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiBtb250aHNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlICgpIHtcbiAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICBpLCBtb207XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICB9XG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICByZXR1cm4geSA8PSA5OTk5ID8gJycgKyB5IDogJysnICsgeTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbi8vIFBSSU9SSVRJRVNcblxuYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG5hZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbn0pO1xuYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbn1cblxuLy8gSE9PS1NcblxuaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xufTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbmZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG5cbiAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSAoeSkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG5cbiAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwICYmIGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG59XG5cbi8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG5mdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG5mdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICByZXNZZWFyLCByZXNEYXlPZlllYXI7XG5cbiAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhclxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgcmVzV2VlaywgcmVzWWVhcjtcblxuICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG5hZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrJywgJ1cnKTtcblxuLy8gUFJJT1JJVElFU1xuXG5hZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbmFkZFVuaXRQcmlvcml0eSgnaXNvV2VlaycsIDUpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3cnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsndycsICd3dycsICdXJywgJ1dXJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIExPQ0FMRVNcblxuZnVuY3Rpb24gbG9jYWxlV2VlayAobW9tKSB7XG4gICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG59O1xuXG5mdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xufVxuXG5mdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayAoaW5wdXQpIHtcbiAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbmFkZFVuaXRBbGlhcygnd2Vla2RheScsICdlJyk7XG5hZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4vLyBQUklPUklUWVxuYWRkVW5pdFByaW9yaXR5KCdkYXknLCAxMSk7XG5hZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignZCcsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0UnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignZGRkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgIC8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxuICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgIH1cbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfVxuXG4gICAgaW5wdXQgPSBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCk7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgfVxuICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG59XG5cbi8vIExPQ0FMRVNcblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzIChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXMgOlxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXNbbS5kYXkoKV0gOlxuICAgICAgICB0aGlzLl93ZWVrZGF5c1t0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5kYXkoKV07XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgcmV0dXJuIChtKSA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4gKG0pIHtcbiAgICByZXR1cm4gKG0pID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c01pbjtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlICh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGRkJyAmJiB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZCcgJiYgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGQnICYmIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRheTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG4gICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG5cbiAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UgKCkge1xuICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBtaW5QaWVjZXMgPSBbXSwgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICBpLCBtb20sIG1pbnAsIHNob3J0cCwgbG9uZ3A7XG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICBtaW5wID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgc2hvcnRwID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpO1xuICAgICAgICBsb25ncCA9IHRoaXMud2Vla2RheXMobW9tLCAnJyk7XG4gICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgfVxuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xufVxuXG5mdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG59XG5cbmFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG5hZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbn0pO1xuXG5mdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCBsb3dlcmNhc2UpO1xuICAgIH0pO1xufVxuXG5tZXJpZGllbSgnYScsIHRydWUpO1xubWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnaG91cicsIDEzKTtcblxuLy8gUEFSU0lOR1xuXG5mdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbn1cblxuYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbmFkZFJlZ2V4VG9rZW4oJ0EnLCAgbWF0Y2hNZXJpZGllbSk7XG5hZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdrJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbmFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG5hZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG5hZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG5hZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbmFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbn0pO1xuYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG59KTtcbmFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xufSk7XG5hZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xufSk7XG5hZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xufSk7XG5hZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xufSk7XG5cbi8vIExPQ0FMRVNcblxuZnVuY3Rpb24gbG9jYWxlSXNQTSAoaW5wdXQpIHtcbiAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pO1xuZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgIH1cbn1cblxuXG4vLyBNT01FTlRTXG5cbi8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgaGUgd2FudHMuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4vLyB0aGlzIHJ1bGUuXG52YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbi8vIG1vbnRoc1xuLy8gd2Vla1xuLy8gd2Vla2RheXNcbi8vIG1lcmlkaWVtXG52YXIgYmFzZUNvbmZpZyA9IHtcbiAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2Vcbn07XG5cbi8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbnZhciBsb2NhbGVzID0ge307XG52YXIgbG9jYWxlRmFtaWxpZXMgPSB7fTtcbnZhciBnbG9iYWxMb2NhbGU7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG59XG5cbi8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbi8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbmZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDtcblxuICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqLS07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgdmFyIG9sZExvY2FsZSA9IG51bGw7XG4gICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICBpZiAoIWxvY2FsZXNbbmFtZV0gJiYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICByZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAvLyBiZWNhdXNlIGRlZmluZUxvY2FsZSBjdXJyZW50bHkgYWxzbyBzZXRzIHRoZSBnbG9iYWwgbG9jYWxlLCB3ZVxuICAgICAgICAgICAgLy8gd2FudCB0byB1bmRvIHRoYXQgZm9yIGxhenkgbG9hZGVkIGxvY2FsZXNcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7IH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbi8vIGxvY2FsZSBrZXkuXG5mdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUgKGtleSwgdmFsdWVzKSB7XG4gICAgdmFyIGRhdGE7XG4gICAgaWYgKGtleSkge1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbn1cblxuZnVuY3Rpb24gZGVmaW5lTG9jYWxlIChuYW1lLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZSgnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICdjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuXG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHZhciBsb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgIC8vIE1FUkdFXG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgfVxuICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyByZXR1cm5zIGxvY2FsZSBkYXRhXG5mdW5jdGlvbiBnZXRMb2NhbGUgKGtleSkge1xuICAgIHZhciBsb2NhbGU7XG5cbiAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xufVxuXG5mdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICByZXR1cm4ga2V5cyQxKGxvY2FsZXMpO1xufVxuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93IChtKSB7XG4gICAgdmFyIG92ZXJmbG93O1xuICAgIHZhciBhID0gbS5fYTtcblxuICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgYVtNT05USF0gICAgICAgPCAwIHx8IGFbTU9OVEhdICAgICAgID4gMTEgID8gTU9OVEggOlxuICAgICAgICAgICAgYVtEQVRFXSAgICAgICAgPCAxIHx8IGFbREFURV0gICAgICAgID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pID8gREFURSA6XG4gICAgICAgICAgICBhW0hPVVJdICAgICAgICA8IDAgfHwgYVtIT1VSXSAgICAgICAgPiAyNCB8fCAoYVtIT1VSXSA9PT0gMjQgJiYgKGFbTUlOVVRFXSAhPT0gMCB8fCBhW1NFQ09ORF0gIT09IDAgfHwgYVtNSUxMSVNFQ09ORF0gIT09IDApKSA/IEhPVVIgOlxuICAgICAgICAgICAgYVtNSU5VVEVdICAgICAgPCAwIHx8IGFbTUlOVVRFXSAgICAgID4gNTkgID8gTUlOVVRFIDpcbiAgICAgICAgICAgIGFbU0VDT05EXSAgICAgIDwgMCB8fCBhW1NFQ09ORF0gICAgICA+IDU5ICA/IFNFQ09ORCA6XG4gICAgICAgICAgICBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6XG4gICAgICAgICAgICAtMTtcblxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgIH1cblxuICAgIHJldHVybiBtO1xufVxuXG4vLyBpc28gODYwMSByZWdleFxuLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG52YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbnZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxudmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbnZhciBpc29EYXRlcyA9IFtcbiAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuXTtcblxuLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xudmFyIGlzb1RpbWVzID0gW1xuICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgIFsnSEgnLCAvXFxkXFxkL11cbl07XG5cbnZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4vLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICB2YXIgaSwgbCxcbiAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG52YXIgYmFzaWNSZmNSZWdleCA9IC9eKCg/Ok1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZD9cXGRcXHMoPzpKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoPzpcXGRcXGQpP1xcZFxcZFxccykoXFxkXFxkOlxcZFxcZCkoXFw6XFxkXFxkKT8oXFxzKD86VVR8R01UfFtFQ01QXVtTRF1UfFtBLUlLLVphLWlrLXpdfFsrLV1cXGR7NH0pKSQvO1xuXG4vLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG5mdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICB2YXIgc3RyaW5nLCBtYXRjaCwgZGF5Rm9ybWF0LFxuICAgICAgICBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0LCB0ekZvcm1hdDtcbiAgICB2YXIgdGltZXpvbmVzID0ge1xuICAgICAgICAnIEdNVCc6ICcgKzAwMDAnLFxuICAgICAgICAnIEVEVCc6ICcgLTA0MDAnLFxuICAgICAgICAnIEVTVCc6ICcgLTA1MDAnLFxuICAgICAgICAnIENEVCc6ICcgLTA1MDAnLFxuICAgICAgICAnIENTVCc6ICcgLTA2MDAnLFxuICAgICAgICAnIE1EVCc6ICcgLTA2MDAnLFxuICAgICAgICAnIE1TVCc6ICcgLTA3MDAnLFxuICAgICAgICAnIFBEVCc6ICcgLTA3MDAnLFxuICAgICAgICAnIFBTVCc6ICcgLTA4MDAnXG4gICAgfTtcbiAgICB2YXIgbWlsaXRhcnkgPSAnWVhXVlVUU1JRUE9OWkFCQ0RFRkdISUtMTSc7XG4gICAgdmFyIHRpbWV6b25lLCB0aW1lem9uZUluZGV4O1xuXG4gICAgc3RyaW5nID0gY29uZmlnLl9pXG4gICAgICAgIC5yZXBsYWNlKC9cXChbXlxcKV0qXFwpfFtcXG5cXHRdL2csICcgJykgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2VcbiAgICAgICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpIC8vIFJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgLnJlcGxhY2UoL15cXHN8XFxzJC9nLCAnJyk7IC8vIFJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBzcGFjZXNcbiAgICBtYXRjaCA9IGJhc2ljUmZjUmVnZXguZXhlYyhzdHJpbmcpO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGRheUZvcm1hdCA9IG1hdGNoWzFdID8gJ2RkZCcgKyAoKG1hdGNoWzFdLmxlbmd0aCA9PT0gNSkgPyAnLCAnIDogJyAnKSA6ICcnO1xuICAgICAgICBkYXRlRm9ybWF0ID0gJ0QgTU1NICcgKyAoKG1hdGNoWzJdLmxlbmd0aCA+IDEwKSA/ICdZWVlZICcgOiAnWVkgJyk7XG4gICAgICAgIHRpbWVGb3JtYXQgPSAnSEg6bW0nICsgKG1hdGNoWzRdID8gJzpzcycgOiAnJyk7XG5cbiAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW50ZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICBpZiAobWF0Y2hbMV0pIHsgLy8gZGF5IG9mIHdlZWsgZ2l2ZW5cbiAgICAgICAgICAgIHZhciBtb21lbnREYXRlID0gbmV3IERhdGUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgdmFyIG1vbWVudERheSA9IFsnU3VuJywnTW9uJywnVHVlJywnV2VkJywnVGh1JywnRnJpJywnU2F0J11bbW9tZW50RGF0ZS5nZXREYXkoKV07XG5cbiAgICAgICAgICAgIGlmIChtYXRjaFsxXS5zdWJzdHIoMCwzKSAhPT0gbW9tZW50RGF5KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG1hdGNoWzVdLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAyOiAvLyBtaWxpdGFyeVxuICAgICAgICAgICAgICAgIGlmICh0aW1lem9uZUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWV6b25lID0gJyArMDAwMCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZXpvbmVJbmRleCA9IG1pbGl0YXJ5LmluZGV4T2YobWF0Y2hbNV1bMV0udG9VcHBlckNhc2UoKSkgLSAxMjtcbiAgICAgICAgICAgICAgICAgICAgdGltZXpvbmUgPSAoKHRpbWV6b25lSW5kZXggPCAwKSA/ICcgLScgOiAnICsnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoKCcnICsgdGltZXpvbmVJbmRleCkucmVwbGFjZSgvXi0/LywgJzAnKSkubWF0Y2goLy4uJC8pWzBdICsgJzAwJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6IC8vIFpvbmVcbiAgICAgICAgICAgICAgICB0aW1lem9uZSA9IHRpbWV6b25lc1ttYXRjaFs1XV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiAvLyBVVCBvciArLy05OTk5XG4gICAgICAgICAgICAgICAgdGltZXpvbmUgPSB0aW1lem9uZXNbJyBHTVQnXTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaFs1XSA9IHRpbWV6b25lO1xuICAgICAgICBjb25maWcuX2kgPSBtYXRjaC5zcGxpY2UoMSkuam9pbignJyk7XG4gICAgICAgIHR6Rm9ybWF0ID0gJyBaWic7XG4gICAgICAgIGNvbmZpZy5fZiA9IGRheUZvcm1hdCArIGRhdGVGb3JtYXQgKyB0aW1lRm9ybWF0ICsgdHpGb3JtYXQ7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBkYXRlIGZyb20gaXNvIGZvcm1hdCBvciBmYWxsYmFja1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG5cbiAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xufVxuXG5ob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICdkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nIG1ham9yIHJlbGVhc2UuIFBsZWFzZSByZWZlciB0byAnICtcbiAgICAnaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgIH1cbik7XG5cbi8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRVVENNb250aCgpLCBub3dWYWx1ZS5nZXRVVENEYXRlKCldO1xuICAgIH1cbiAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG59XG5cbi8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbi8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG5mdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgeWVhclRvVXNlO1xuXG4gICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHtcbiAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLy9pZiB0aGUgZGF5IG9mIHRoZSB5ZWFyIGlzIHNldCwgZmlndXJlIG91dCB3aGF0IGl0IGlzXG4gICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8IGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgIH1cblxuICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gKGNvbmZpZy5fYVtpXSA9PSBudWxsKSA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICBpZiAoY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwKSB7XG4gICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgfVxuXG4gICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KTtcbiAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgdyA9IGNvbmZpZy5fdztcbiAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgIGRvdyA9IDE7XG4gICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgfVxufVxuXG4vLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG5ob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCxcbiAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7XG5cbiAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fCBbXSlbMF07XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbicsIHRva2VuLCAncGFyc2VkSW5wdXQnLCBwYXJzZWRJbnB1dCxcbiAgICAgICAgLy8gICAgICAgICAncmVnZXgnLCBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpO1xuICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgfVxuXG4gICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICBpZiAoY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xufVxuXG5cbmZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcCAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgIHZhciBpc1BtO1xuXG4gICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9XG4gICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9XG59XG5cbi8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG5mdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgIGksXG4gICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgIGlmIChjb25maWcuX2YubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xufVxuXG5mdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKTtcbiAgICBjb25maWcuX2EgPSBtYXAoW2kueWVhciwgaS5tb250aCwgaS5kYXkgfHwgaS5kYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICB9KTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnIChjb25maWcpIHtcbiAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVDb25maWcgKGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7bnVsbElucHV0OiB0cnVlfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgfVxuXG4gICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICB9ICBlbHNlIHtcbiAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnO1xufVxuXG5mdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgIHZhciBjID0ge307XG5cbiAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKSkge1xuICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgYy5fbCA9IGxvY2FsZTtcbiAgICBjLl9pID0gaW5wdXQ7XG4gICAgYy5fZiA9IGZvcm1hdDtcbiAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYWwgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbn1cblxudmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG52YXIgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbi8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4vLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4vL1xuLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbmZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgIHZhciByZXMsIGk7XG4gICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgfVxuICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgfVxuICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG5mdW5jdGlvbiBtaW4gKCkge1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbn1cblxuZnVuY3Rpb24gbWF4ICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbn1cblxudmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogKyhuZXcgRGF0ZSgpKTtcbn07XG5cbnZhciBvcmRlcmluZyA9IFsneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsICdtaWxsaXNlY29uZCddO1xuXG5mdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgIGZvciAodmFyIGtleSBpbiBtKSB7XG4gICAgICAgIGlmICghKG9yZGVyaW5nLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bml0SGFzRGVjaW1hbCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JkZXJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbn1cblxuZnVuY3Rpb24gRHVyYXRpb24gKGR1cmF0aW9uKSB7XG4gICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IDAsXG4gICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgK1xuICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICB3ZWVrcyAqIDc7XG4gICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArXG4gICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgIHllYXJzICogMTI7XG5cbiAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgIHRoaXMuX2J1YmJsZSgpO1xufVxuXG5mdW5jdGlvbiBpc0R1cmF0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG59XG5cbmZ1bmN0aW9uIGFic1JvdW5kIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgIH1cbn1cblxuLy8gRk9STUFUVElOR1xuXG5mdW5jdGlvbiBvZmZzZXQgKHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgdmFyIHNpZ24gPSAnKyc7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2lnbiArIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgKyBzZXBhcmF0b3IgKyB6ZXJvRmlsbCh+fihvZmZzZXQpICUgNjAsIDIpO1xuICAgIH0pO1xufVxuXG5vZmZzZXQoJ1onLCAnOicpO1xub2Zmc2V0KCdaWicsICcnKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdaJywgIG1hdGNoU2hvcnRPZmZzZXQpO1xuYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gdGltZXpvbmUgY2h1bmtlclxuLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4vLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbnZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpO1xuXG4gICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNodW5rICAgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgdmFyIHBhcnRzICAgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgIHZhciBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgIHJldHVybiBtaW51dGVzID09PSAwID9cbiAgICAgIDAgOlxuICAgICAgcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbn1cblxuLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbmZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICB2YXIgcmVzLCBkaWZmO1xuICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgZGlmZiA9IChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KSA/IGlucHV0LnZhbHVlT2YoKSA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXREYXRlT2Zmc2V0IChtKSB7XG4gICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpIC8gMTUpICogMTU7XG59XG5cbi8vIEhPT0tTXG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbi8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbi8vIE1PTUVOVFNcblxuLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4vLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuLy9cbi8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4vLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4vLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2Vcbi8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG5mdW5jdGlvbiBnZXRTZXRPZmZzZXQgKGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLCAxLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZXRab25lIChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyAoa2VlcExvY2FsVGltZSkge1xuICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbCAoa2VlcExvY2FsVGltZSkge1xuICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCAoKSB7XG4gICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkICgpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgIGlmIChjLl9hKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG59XG5cbmZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVdGMgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xufVxuXG4vLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbnZhciBhc3BOZXRSZWdleCA9IC9eKFxcLSk/KD86KFxcZCopWy4gXSk/KFxcZCspXFw6KFxcZCspKD86XFw6KFxcZCspKFxcLlxcZCopPyk/JC87XG5cbi8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4vLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4vLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG52YXIgaXNvUmVnZXggPSAvXigtKT9QKD86KC0/WzAtOSwuXSopWSk/KD86KC0/WzAtOSwuXSopTSk/KD86KC0/WzAtOSwuXSopVyk/KD86KC0/WzAtOSwuXSopRCk/KD86VCg/OigtP1swLTksLl0qKUgpPyg/OigtP1swLTksLl0qKU0pPyg/OigtP1swLTksLl0qKVMpPyk/JC87XG5cbmZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgc2lnbixcbiAgICAgICAgcmV0LFxuICAgICAgICBkaWZmUmVzO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICB3IDogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgIGggOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICBtIDogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkgey8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKSk7XG5cbiAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbn1cblxuY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5jcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG5mdW5jdGlvbiBwYXJzZUlzbyAoaW5wLCBzaWduKSB7XG4gICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbn1cblxuZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgIHZhciByZXMgPSB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuXG4gICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgfVxuXG4gICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICsoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpKTtcblxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuICAgIH1cblxuICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbmZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCAnbW9tZW50KCkuJyArIG5hbWUgICsgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICsgbmFtZSArICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICB0bXAgPSB2YWw7IHZhbCA9IHBlcmlvZDsgcGVyaW9kID0gdG1wO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKGRheXMpIHtcbiAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAobW9udGhzKSB7XG4gICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgIH1cbn1cblxudmFyIGFkZCAgICAgID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpO1xudmFyIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG5mdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICByZXR1cm4gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDpcbiAgICAgICAgICAgIGRpZmYgPCAwID8gJ2xhc3REYXknIDpcbiAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDpcbiAgICAgICAgICAgIGRpZmYgPCA3ID8gJ25leHRXZWVrJyA6ICdzYW1lRWxzZSc7XG59XG5cbmZ1bmN0aW9uIGNhbGVuZGFyJDEgKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZSc7XG5cbiAgICB2YXIgb3V0cHV0ID0gZm9ybWF0cyAmJiAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KSA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICByZXR1cm4gdGhpcy5mb3JtYXQob3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSkpO1xufVxuXG5mdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIGlzQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyghaXNVbmRlZmluZWQodW5pdHMpID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnKTtcbiAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgIHJldHVybiAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJyA/IHRoaXMuaXNBZnRlcihmcm9tLCB1bml0cykgOiAhdGhpcy5pc0JlZm9yZShmcm9tLCB1bml0cykpICYmXG4gICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknID8gdGhpcy5pc0JlZm9yZSh0bywgdW5pdHMpIDogIXRoaXMuaXNBZnRlcih0bywgdW5pdHMpKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICBpbnB1dE1zO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMgfHwgJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVPckFmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsdW5pdHMpO1xufVxuXG5mdW5jdGlvbiBpc1NhbWVPckJlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCx1bml0cyk7XG59XG5cbmZ1bmN0aW9uIGRpZmYgKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICB6b25lRGVsdGEsXG4gICAgICAgIGRlbHRhLCBvdXRwdXQ7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAneWVhcicgfHwgdW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLyAzO1xuICAgICAgICB9IGVsc2UgaWYgKHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCAvIDEyO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVsdGEgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgb3V0cHV0ID0gdW5pdHMgPT09ICdzZWNvbmQnID8gZGVsdGEgLyAxZTMgOiAvLyAxMDAwXG4gICAgICAgICAgICB1bml0cyA9PT0gJ21pbnV0ZScgPyBkZWx0YSAvIDZlNCA6IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgdW5pdHMgPT09ICdob3VyJyA/IGRlbHRhIC8gMzZlNSA6IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICB1bml0cyA9PT0gJ2RheScgPyAoZGVsdGEgLSB6b25lRGVsdGEpIC8gODY0ZTUgOiAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICB1bml0cyA9PT0gJ3dlZWsnID8gKGRlbHRhIC0gem9uZURlbHRhKSAvIDYwNDhlNSA6IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWx0YTtcbiAgICB9XG4gICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xufVxuXG5mdW5jdGlvbiBtb250aERpZmYgKGEsIGIpIHtcbiAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9ICgoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMikgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICBhbmNob3IyLCBhZGp1c3Q7XG5cbiAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgIH1cblxuICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbn1cblxuaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG5ob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG5mdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xufVxuXG5mdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbSA9IHRoaXMuY2xvbmUoKS51dGMoKTtcbiAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICpcbiAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gKi9cbmZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICB9XG4gICAgdmFyIGZ1bmMgPSAnbW9tZW50JztcbiAgICB2YXIgem9uZSA9ICcnO1xuICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgIHpvbmUgPSAnWic7XG4gICAgfVxuICAgIHZhciBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgIHZhciB5ZWFyID0gKDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICB2YXIgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJztcbiAgICB2YXIgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0IChpbnB1dFN0cmluZykge1xuICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKCkgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbn1cblxuZnVuY3Rpb24gZnJvbSAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7dG86IHRoaXMsIGZyb206IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZnJvbU5vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG59XG5cbmZ1bmN0aW9uIHRvICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHtmcm9tOiB0aGlzLCB0bzogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b05vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgIHJldHVybiB0aGlzLnRvKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xufVxuXG4vLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4vLyBpbnN0YW5jZS4gIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG5mdW5jdGlvbiBsb2NhbGUgKGtleSkge1xuICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxudmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5mdW5jdGlvbiBsb2NhbGVEYXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xufVxuXG5mdW5jdGlvbiBzdGFydE9mICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIC8vIHRoZSBmb2xsb3dpbmcgc3dpdGNoIGludGVudGlvbmFsbHkgb21pdHMgYnJlYWsga2V5d29yZHNcbiAgICAvLyB0byB1dGlsaXplIGZhbGxpbmcgdGhyb3VnaCB0aGUgY2FzZXMuXG4gICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgIHRoaXMubW9udGgoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICB0aGlzLmRhdGUoMSk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICB0aGlzLmhvdXJzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIHRoaXMubWludXRlcygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kcygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIHRoaXMubWlsbGlzZWNvbmRzKDApO1xuICAgIH1cblxuICAgIC8vIHdlZWtzIGFyZSBhIHNwZWNpYWwgY2FzZVxuICAgIGlmICh1bml0cyA9PT0gJ3dlZWsnKSB7XG4gICAgICAgIHRoaXMud2Vla2RheSgwKTtcbiAgICB9XG4gICAgaWYgKHVuaXRzID09PSAnaXNvV2VlaycpIHtcbiAgICAgICAgdGhpcy5pc29XZWVrZGF5KDEpO1xuICAgIH1cblxuICAgIC8vIHF1YXJ0ZXJzIGFyZSBhbHNvIHNwZWNpYWxcbiAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICB0aGlzLm1vbnRoKE1hdGguZmxvb3IodGhpcy5tb250aCgpIC8gMykgKiAzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZW5kT2YgKHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gJ2RhdGUnIGlzIGFuIGFsaWFzIGZvciAnZGF5Jywgc28gaXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgc3VjaC5cbiAgICBpZiAodW5pdHMgPT09ICdkYXRlJykge1xuICAgICAgICB1bml0cyA9ICdkYXknO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0YXJ0T2YodW5pdHMpLmFkZCgxLCAodW5pdHMgPT09ICdpc29XZWVrJyA/ICd3ZWVrJyA6IHVuaXRzKSkuc3VidHJhY3QoMSwgJ21zJyk7XG59XG5cbmZ1bmN0aW9uIHZhbHVlT2YgKCkge1xuICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICgodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDApO1xufVxuXG5mdW5jdGlvbiB1bml4ICgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xufVxuXG5mdW5jdGlvbiB0b0RhdGUgKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKCkge1xuICAgIHZhciBtID0gdGhpcztcbiAgICByZXR1cm4gW20ueWVhcigpLCBtLm1vbnRoKCksIG0uZGF0ZSgpLCBtLmhvdXIoKSwgbS5taW51dGUoKSwgbS5zZWNvbmQoKSwgbS5taWxsaXNlY29uZCgpXTtcbn1cblxuZnVuY3Rpb24gdG9PYmplY3QgKCkge1xuICAgIHZhciBtID0gdGhpcztcbiAgICByZXR1cm4ge1xuICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkJDIgKCkge1xuICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xufVxuXG5mdW5jdGlvbiBwYXJzaW5nRmxhZ3MgKCkge1xuICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGludmFsaWRBdCAoKSB7XG4gICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbn1cblxuZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0XG4gICAgfTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG59KTtcblxuZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbiAodG9rZW4sIGdldHRlcikge1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbn1cblxuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICAgICAnd2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgICAgJ3dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgICdpc29XZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG5hZGRVbml0QWxpYXMoJ2lzb1dlZWtZZWFyJywgJ0dHJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKTtcbmFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla1llYXInLCAxKTtcblxuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ0cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ2cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ0dHJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ2dnJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbmFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbmFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbmFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG59KTtcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRXZWVrWWVhciAoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgIHRoaXMud2Vla2RheSgpLFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIgKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgIGlucHV0LCB0aGlzLmlzb1dlZWsoKSwgdGhpcy5pc29XZWVrZGF5KCksIDEsIDQpO1xufVxuXG5mdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhciAoKSB7XG4gICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbn1cblxuZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIgKCkge1xuICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ3F1YXJ0ZXInLCA3KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbmFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbn0pO1xuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIgKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMykgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArIHRoaXMubW9udGgoKSAlIDMpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnZGF0ZScsICdEJyk7XG5cbi8vIFBSSU9ST0lUWVxuYWRkVW5pdFByaW9yaXR5KCdkYXRlJywgOSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignRCcsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgIHJldHVybiBpc1N0cmljdCA/XG4gICAgICAobG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlKSA6XG4gICAgICBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdLCAxMCk7XG59KTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4vLyBQUklPUklUWVxuYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdEREQnLCAgbWF0Y2gxdG8zKTtcbmFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIGRheU9mWWVhciksICdkJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ20nLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdzZWNvbmQnLCAxNSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigncycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4vLyBNT01FTlRTXG5cbnZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xufSk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xufSk7XG5cblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNik7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbmFkZFJlZ2V4VG9rZW4oJ1NTJywgICBtYXRjaDF0bzMsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdTU1MnLCAgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG52YXIgdG9rZW47XG5mb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbn1cblxuZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xufVxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3onLCAgMCwgMCwgJ3pvbmVBYmJyJyk7XG5hZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRab25lQWJiciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0Wm9uZU5hbWUgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbn1cblxudmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxucHJvdG8uYWRkICAgICAgICAgICAgICAgPSBhZGQ7XG5wcm90by5jYWxlbmRhciAgICAgICAgICA9IGNhbGVuZGFyJDE7XG5wcm90by5jbG9uZSAgICAgICAgICAgICA9IGNsb25lO1xucHJvdG8uZGlmZiAgICAgICAgICAgICAgPSBkaWZmO1xucHJvdG8uZW5kT2YgICAgICAgICAgICAgPSBlbmRPZjtcbnByb3RvLmZvcm1hdCAgICAgICAgICAgID0gZm9ybWF0O1xucHJvdG8uZnJvbSAgICAgICAgICAgICAgPSBmcm9tO1xucHJvdG8uZnJvbU5vdyAgICAgICAgICAgPSBmcm9tTm93O1xucHJvdG8udG8gICAgICAgICAgICAgICAgPSB0bztcbnByb3RvLnRvTm93ICAgICAgICAgICAgID0gdG9Ob3c7XG5wcm90by5nZXQgICAgICAgICAgICAgICA9IHN0cmluZ0dldDtcbnByb3RvLmludmFsaWRBdCAgICAgICAgID0gaW52YWxpZEF0O1xucHJvdG8uaXNBZnRlciAgICAgICAgICAgPSBpc0FmdGVyO1xucHJvdG8uaXNCZWZvcmUgICAgICAgICAgPSBpc0JlZm9yZTtcbnByb3RvLmlzQmV0d2VlbiAgICAgICAgID0gaXNCZXR3ZWVuO1xucHJvdG8uaXNTYW1lICAgICAgICAgICAgPSBpc1NhbWU7XG5wcm90by5pc1NhbWVPckFmdGVyICAgICA9IGlzU2FtZU9yQWZ0ZXI7XG5wcm90by5pc1NhbWVPckJlZm9yZSAgICA9IGlzU2FtZU9yQmVmb3JlO1xucHJvdG8uaXNWYWxpZCAgICAgICAgICAgPSBpc1ZhbGlkJDI7XG5wcm90by5sYW5nICAgICAgICAgICAgICA9IGxhbmc7XG5wcm90by5sb2NhbGUgICAgICAgICAgICA9IGxvY2FsZTtcbnByb3RvLmxvY2FsZURhdGEgICAgICAgID0gbG9jYWxlRGF0YTtcbnByb3RvLm1heCAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xucHJvdG8ubWluICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNaW47XG5wcm90by5wYXJzaW5nRmxhZ3MgICAgICA9IHBhcnNpbmdGbGFncztcbnByb3RvLnNldCAgICAgICAgICAgICAgID0gc3RyaW5nU2V0O1xucHJvdG8uc3RhcnRPZiAgICAgICAgICAgPSBzdGFydE9mO1xucHJvdG8uc3VidHJhY3QgICAgICAgICAgPSBzdWJ0cmFjdDtcbnByb3RvLnRvQXJyYXkgICAgICAgICAgID0gdG9BcnJheTtcbnByb3RvLnRvT2JqZWN0ICAgICAgICAgID0gdG9PYmplY3Q7XG5wcm90by50b0RhdGUgICAgICAgICAgICA9IHRvRGF0ZTtcbnByb3RvLnRvSVNPU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmc7XG5wcm90by5pbnNwZWN0ICAgICAgICAgICA9IGluc3BlY3Q7XG5wcm90by50b0pTT04gICAgICAgICAgICA9IHRvSlNPTjtcbnByb3RvLnRvU3RyaW5nICAgICAgICAgID0gdG9TdHJpbmc7XG5wcm90by51bml4ICAgICAgICAgICAgICA9IHVuaXg7XG5wcm90by52YWx1ZU9mICAgICAgICAgICA9IHZhbHVlT2Y7XG5wcm90by5jcmVhdGlvbkRhdGEgICAgICA9IGNyZWF0aW9uRGF0YTtcblxuLy8gWWVhclxucHJvdG8ueWVhciAgICAgICA9IGdldFNldFllYXI7XG5wcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcblxuLy8gV2VlayBZZWFyXG5wcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xucHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcblxuLy8gUXVhcnRlclxucHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcblxuLy8gTW9udGhcbnByb3RvLm1vbnRoICAgICAgID0gZ2V0U2V0TW9udGg7XG5wcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuXG4vLyBXZWVrXG5wcm90by53ZWVrICAgICAgICAgICA9IHByb3RvLndlZWtzICAgICAgICA9IGdldFNldFdlZWs7XG5wcm90by5pc29XZWVrICAgICAgICA9IHByb3RvLmlzb1dlZWtzICAgICA9IGdldFNldElTT1dlZWs7XG5wcm90by53ZWVrc0luWWVhciAgICA9IGdldFdlZWtzSW5ZZWFyO1xucHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcblxuLy8gRGF5XG5wcm90by5kYXRlICAgICAgID0gZ2V0U2V0RGF5T2ZNb250aDtcbnByb3RvLmRheSAgICAgICAgPSBwcm90by5kYXlzICAgICAgICAgICAgID0gZ2V0U2V0RGF5T2ZXZWVrO1xucHJvdG8ud2Vla2RheSAgICA9IGdldFNldExvY2FsZURheU9mV2VlaztcbnByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG5wcm90by5kYXlPZlllYXIgID0gZ2V0U2V0RGF5T2ZZZWFyO1xuXG4vLyBIb3VyXG5wcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuXG4vLyBNaW51dGVcbnByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG5cbi8vIFNlY29uZFxucHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcblxuLy8gTWlsbGlzZWNvbmRcbnByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG5cbi8vIE9mZnNldFxucHJvdG8udXRjT2Zmc2V0ICAgICAgICAgICAgPSBnZXRTZXRPZmZzZXQ7XG5wcm90by51dGMgICAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvVVRDO1xucHJvdG8ubG9jYWwgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb0xvY2FsO1xucHJvdG8ucGFyc2Vab25lICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbnByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG5wcm90by5pc0RTVCAgICAgICAgICAgICAgICA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xucHJvdG8uaXNMb2NhbCAgICAgICAgICAgICAgPSBpc0xvY2FsO1xucHJvdG8uaXNVdGNPZmZzZXQgICAgICAgICAgPSBpc1V0Y09mZnNldDtcbnByb3RvLmlzVXRjICAgICAgICAgICAgICAgID0gaXNVdGM7XG5wcm90by5pc1VUQyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuXG4vLyBUaW1lem9uZVxucHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbnByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG5cbi8vIERlcHJlY2F0aW9uc1xucHJvdG8uZGF0ZXMgID0gZGVwcmVjYXRlKCdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsIGdldFNldERheU9mTW9udGgpO1xucHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKCdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLCBnZXRTZXRNb250aCk7XG5wcm90by55ZWFycyAgPSBkZXByZWNhdGUoJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLCBnZXRTZXRZZWFyKTtcbnByb3RvLnpvbmUgICA9IGRlcHJlY2F0ZSgnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLCBnZXRTZXRab25lKTtcbnByb3RvLmlzRFNUU2hpZnRlZCA9IGRlcHJlY2F0ZSgnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuaXggKGlucHV0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluWm9uZSAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG59XG5cbmZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdCAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG5wcm90byQxLmNhbGVuZGFyICAgICAgICA9IGNhbGVuZGFyO1xucHJvdG8kMS5sb25nRGF0ZUZvcm1hdCAgPSBsb25nRGF0ZUZvcm1hdDtcbnByb3RvJDEuaW52YWxpZERhdGUgICAgID0gaW52YWxpZERhdGU7XG5wcm90byQxLm9yZGluYWwgICAgICAgICA9IG9yZGluYWw7XG5wcm90byQxLnByZXBhcnNlICAgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvJDEucG9zdGZvcm1hdCAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xucHJvdG8kMS5yZWxhdGl2ZVRpbWUgICAgPSByZWxhdGl2ZVRpbWU7XG5wcm90byQxLnBhc3RGdXR1cmUgICAgICA9IHBhc3RGdXR1cmU7XG5wcm90byQxLnNldCAgICAgICAgICAgICA9IHNldDtcblxuLy8gTW9udGhcbnByb3RvJDEubW9udGhzICAgICAgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzO1xucHJvdG8kMS5tb250aHNTaG9ydCAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbnByb3RvJDEubW9udGhzUGFyc2UgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzUGFyc2U7XG5wcm90byQxLm1vbnRoc1JlZ2V4ICAgICAgID0gbW9udGhzUmVnZXg7XG5wcm90byQxLm1vbnRoc1Nob3J0UmVnZXggID0gbW9udGhzU2hvcnRSZWdleDtcblxuLy8gV2Vla1xucHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbnByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbnByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuLy8gRGF5IG9mIFdlZWtcbnByb3RvJDEud2Vla2RheXMgICAgICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXM7XG5wcm90byQxLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xucHJvdG8kMS53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xucHJvdG8kMS53ZWVrZGF5c1BhcnNlICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG5wcm90byQxLndlZWtkYXlzUmVnZXggICAgICAgPSAgICAgICAgd2Vla2RheXNSZWdleDtcbnByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ICA9ICAgICAgICB3ZWVrZGF5c1Nob3J0UmVnZXg7XG5wcm90byQxLndlZWtkYXlzTWluUmVnZXggICAgPSAgICAgICAgd2Vla2RheXNNaW5SZWdleDtcblxuLy8gSG91cnNcbnByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG5wcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbmZ1bmN0aW9uIGdldCQxIChmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpO1xuICAgIHZhciB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzSW1wbCAoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vLyAoKVxuLy8gKDUpXG4vLyAoZm10LCA1KVxuLy8gKGZtdClcbi8vICh0cnVlKVxuLy8gKHRydWUsIDUpXG4vLyAodHJ1ZSwgZm10LCA1KVxuLy8gKHRydWUsIGZtdClcbmZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwO1xuXG4gICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRocyAoZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydCAoZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xufVxuXG5mdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xufVxuXG5mdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4gKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG59XG5cbmdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh0b0ludChudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfVxufSk7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcbmhvb2tzLmxhbmcgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJywgZ2V0U2V0R2xvYmFsTG9jYWxlKTtcbmhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJywgZ2V0TG9jYWxlKTtcblxudmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuZnVuY3Rpb24gYWJzICgpIHtcbiAgICB2YXIgZGF0YSAgICAgICAgICAgPSB0aGlzLl9kYXRhO1xuXG4gICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgIHRoaXMuX2RheXMgICAgICAgICA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgdGhpcy5fbW9udGhzICAgICAgID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgZGF0YS5taWxsaXNlY29uZHMgID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgZGF0YS5zZWNvbmRzICAgICAgID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgIGRhdGEubWludXRlcyAgICAgICA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICBkYXRhLmhvdXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgIGRhdGEubW9udGhzICAgICAgICA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgIGRhdGEueWVhcnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYWRkU3VidHJhY3QkMSAoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICBkdXJhdGlvbi5fZGF5cyAgICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgIGR1cmF0aW9uLl9tb250aHMgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG59XG5cbi8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbmZ1bmN0aW9uIGFkZCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuZnVuY3Rpb24gc3VidHJhY3QkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG59XG5cbmZ1bmN0aW9uIGFic0NlaWwgKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYnViYmxlICgpIHtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuICAgIHZhciBkYXlzICAgICAgICAgPSB0aGlzLl9kYXlzO1xuICAgIHZhciBtb250aHMgICAgICAgPSB0aGlzLl9tb250aHM7XG4gICAgdmFyIGRhdGEgICAgICAgICA9IHRoaXMuX2RhdGE7XG4gICAgdmFyIHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycywgbW9udGhzRnJvbURheXM7XG5cbiAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgaWYgKCEoKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApKSkge1xuICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgIGRheXMgPSAwO1xuICAgICAgICBtb250aHMgPSAwO1xuICAgIH1cblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgc2Vjb25kcyAgICAgICAgICAgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICBkYXRhLnNlY29uZHMgICAgICA9IHNlY29uZHMgJSA2MDtcblxuICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBkYXRhLm1pbnV0ZXMgICAgICA9IG1pbnV0ZXMgJSA2MDtcblxuICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICBkYXRhLmhvdXJzICAgICAgICA9IGhvdXJzICUgMjQ7XG5cbiAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgIG1vbnRocyAlPSAxMjtcblxuICAgIGRhdGEuZGF5cyAgID0gZGF5cztcbiAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICBkYXRhLnllYXJzICA9IHllYXJzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRheXNUb01vbnRocyAoZGF5cykge1xuICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICByZXR1cm4gZGF5cyAqIDQ4MDAgLyAxNDYwOTc7XG59XG5cbmZ1bmN0aW9uIG1vbnRoc1RvRGF5cyAobW9udGhzKSB7XG4gICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgcmV0dXJuIG1vbnRocyAqIDE0NjA5NyAvIDQ4MDA7XG59XG5cbmZ1bmN0aW9uIGFzICh1bml0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgdmFyIGRheXM7XG4gICAgdmFyIG1vbnRocztcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICBkYXlzICAgPSB0aGlzLl9kYXlzICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICByZXR1cm4gdW5pdHMgPT09ICdtb250aCcgPyBtb250aHMgOiBtb250aHMgLyAxMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnICAgOiByZXR1cm4gZGF5cyAvIDcgICAgICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgY2FzZSAnZGF5JyAgICA6IHJldHVybiBkYXlzICAgICAgICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInICAgOiByZXR1cm4gZGF5cyAqIDI0ICAgICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZScgOiByZXR1cm4gZGF5cyAqIDE0NDAgICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJyA6IHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6IHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBUT0RPOiBVc2UgdGhpcy5hcygnbXMnKT9cbmZ1bmN0aW9uIHZhbHVlT2YkMSAoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAodGhpcy5fbW9udGhzICUgMTIpICogMjU5MmU2ICtcbiAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBcyAoYWxpYXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgfTtcbn1cblxudmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpO1xudmFyIGFzU2Vjb25kcyAgICAgID0gbWFrZUFzKCdzJyk7XG52YXIgYXNNaW51dGVzICAgICAgPSBtYWtlQXMoJ20nKTtcbnZhciBhc0hvdXJzICAgICAgICA9IG1ha2VBcygnaCcpO1xudmFyIGFzRGF5cyAgICAgICAgID0gbWFrZUFzKCdkJyk7XG52YXIgYXNXZWVrcyAgICAgICAgPSBtYWtlQXMoJ3cnKTtcbnZhciBhc01vbnRocyAgICAgICA9IG1ha2VBcygnTScpO1xudmFyIGFzWWVhcnMgICAgICAgID0gbWFrZUFzKCd5Jyk7XG5cbmZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgfTtcbn1cblxudmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xudmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbnZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG52YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbnZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG52YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG52YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xufVxuXG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIHRocmVzaG9sZHMgPSB7XG4gICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbn07XG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG5mdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xufVxuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgYVs0XSA9IGxvY2FsZTtcbiAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgfVxuICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbn1cblxudmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwO1xuICAgIHZhciBkYXlzICAgICAgICAgPSBhYnMkMSh0aGlzLl9kYXlzKTtcbiAgICB2YXIgbW9udGhzICAgICAgID0gYWJzJDEodGhpcy5fbW9udGhzKTtcbiAgICB2YXIgbWludXRlcywgaG91cnMsIHllYXJzO1xuXG4gICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICBzZWNvbmRzICU9IDYwO1xuICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgeWVhcnMgID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgIG1vbnRocyAlPSAxMjtcblxuXG4gICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICB2YXIgWSA9IHllYXJzO1xuICAgIHZhciBNID0gbW9udGhzO1xuICAgIHZhciBEID0gZGF5cztcbiAgICB2YXIgaCA9IGhvdXJzO1xuICAgIHZhciBtID0gbWludXRlcztcbiAgICB2YXIgcyA9IHNlY29uZHM7XG4gICAgdmFyIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKTtcblxuICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgIHJldHVybiAnUDBEJztcbiAgICB9XG5cbiAgICByZXR1cm4gKHRvdGFsIDwgMCA/ICctJyA6ICcnKSArXG4gICAgICAgICdQJyArXG4gICAgICAgIChZID8gWSArICdZJyA6ICcnKSArXG4gICAgICAgIChNID8gTSArICdNJyA6ICcnKSArXG4gICAgICAgIChEID8gRCArICdEJyA6ICcnKSArXG4gICAgICAgICgoaCB8fCBtIHx8IHMpID8gJ1QnIDogJycpICtcbiAgICAgICAgKGggPyBoICsgJ0gnIDogJycpICtcbiAgICAgICAgKG0gPyBtICsgJ00nIDogJycpICtcbiAgICAgICAgKHMgPyBzICsgJ1MnIDogJycpO1xufVxuXG52YXIgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxucHJvdG8kMi5pc1ZhbGlkICAgICAgICA9IGlzVmFsaWQkMTtcbnByb3RvJDIuYWJzICAgICAgICAgICAgPSBhYnM7XG5wcm90byQyLmFkZCAgICAgICAgICAgID0gYWRkJDE7XG5wcm90byQyLnN1YnRyYWN0ICAgICAgID0gc3VidHJhY3QkMTtcbnByb3RvJDIuYXMgICAgICAgICAgICAgPSBhcztcbnByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbnByb3RvJDIuYXNTZWNvbmRzICAgICAgPSBhc1NlY29uZHM7XG5wcm90byQyLmFzTWludXRlcyAgICAgID0gYXNNaW51dGVzO1xucHJvdG8kMi5hc0hvdXJzICAgICAgICA9IGFzSG91cnM7XG5wcm90byQyLmFzRGF5cyAgICAgICAgID0gYXNEYXlzO1xucHJvdG8kMi5hc1dlZWtzICAgICAgICA9IGFzV2Vla3M7XG5wcm90byQyLmFzTW9udGhzICAgICAgID0gYXNNb250aHM7XG5wcm90byQyLmFzWWVhcnMgICAgICAgID0gYXNZZWFycztcbnByb3RvJDIudmFsdWVPZiAgICAgICAgPSB2YWx1ZU9mJDE7XG5wcm90byQyLl9idWJibGUgICAgICAgID0gYnViYmxlO1xucHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xucHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbnByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xucHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG5wcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG5wcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbnByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbnByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG5wcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG5wcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG5wcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xucHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbi8vIERlcHJlY2F0aW9uc1xucHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbnByb3RvJDIubGFuZyA9IGxhbmc7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG5hZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG5hZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xufSk7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG5ob29rcy52ZXJzaW9uID0gJzIuMTguMSc7XG5cbnNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbmhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuaG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuaG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlVVRDO1xuaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbmhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG5ob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG5ob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG5ob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuaG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlRHVyYXRpb247XG5ob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbmhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbmhvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IGNyZWF0ZUluWm9uZTtcbmhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbmhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG5ob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0TW9udGhzU2hvcnQ7XG5ob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG5ob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG5ob29rcy51cGRhdGVMb2NhbGUgICAgICAgICAgPSB1cGRhdGVMb2NhbGU7XG5ob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbmhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuaG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG5ob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuaG9va3MuY2FsZW5kYXJGb3JtYXQgICAgICAgID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG5ob29rcy5wcm90b3R5cGUgICAgICAgICAgICAgPSBwcm90bztcblxucmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIl19
},{}],6:[function(require,module,exports){
/*!
 * vue-resource v1.3.4
 * https://github.com/pagekit/vue-resource
 * Released under the MIT License.
 */

'use strict';

/**
 * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var RESOLVED = 0;
var REJECTED = 1;
var PENDING = 2;

function Promise$1(executor) {

    this.state = PENDING;
    this.value = undefined;
    this.deferred = [];

    var promise = this;

    try {
        executor(function (x) {
            promise.resolve(x);
        }, function (r) {
            promise.reject(r);
        });
    } catch (e) {
        promise.reject(e);
    }
}

Promise$1.reject = function (r) {
    return new Promise$1(function (resolve, reject) {
        reject(r);
    });
};

Promise$1.resolve = function (x) {
    return new Promise$1(function (resolve, reject) {
        resolve(x);
    });
};

Promise$1.all = function all(iterable) {
    return new Promise$1(function (resolve, reject) {
        var count = 0,
            result = [];

        if (iterable.length === 0) {
            resolve(result);
        }

        function resolver(i) {
            return function (x) {
                result[i] = x;
                count += 1;

                if (count === iterable.length) {
                    resolve(result);
                }
            };
        }

        for (var i = 0; i < iterable.length; i += 1) {
            Promise$1.resolve(iterable[i]).then(resolver(i), reject);
        }
    });
};

Promise$1.race = function race(iterable) {
    return new Promise$1(function (resolve, reject) {
        for (var i = 0; i < iterable.length; i += 1) {
            Promise$1.resolve(iterable[i]).then(resolve, reject);
        }
    });
};

var p$1 = Promise$1.prototype;

p$1.resolve = function resolve(x) {
    var promise = this;

    if (promise.state === PENDING) {
        if (x === promise) {
            throw new TypeError('Promise settled with itself.');
        }

        var called = false;

        try {
            var then = x && x['then'];

            if (x !== null && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && typeof then === 'function') {
                then.call(x, function (x) {
                    if (!called) {
                        promise.resolve(x);
                    }
                    called = true;
                }, function (r) {
                    if (!called) {
                        promise.reject(r);
                    }
                    called = true;
                });
                return;
            }
        } catch (e) {
            if (!called) {
                promise.reject(e);
            }
            return;
        }

        promise.state = RESOLVED;
        promise.value = x;
        promise.notify();
    }
};

p$1.reject = function reject(reason) {
    var promise = this;

    if (promise.state === PENDING) {
        if (reason === promise) {
            throw new TypeError('Promise settled with itself.');
        }

        promise.state = REJECTED;
        promise.value = reason;
        promise.notify();
    }
};

p$1.notify = function notify() {
    var promise = this;

    nextTick(function () {
        if (promise.state !== PENDING) {
            while (promise.deferred.length) {
                var deferred = promise.deferred.shift(),
                    onResolved = deferred[0],
                    onRejected = deferred[1],
                    resolve = deferred[2],
                    reject = deferred[3];

                try {
                    if (promise.state === RESOLVED) {
                        if (typeof onResolved === 'function') {
                            resolve(onResolved.call(undefined, promise.value));
                        } else {
                            resolve(promise.value);
                        }
                    } else if (promise.state === REJECTED) {
                        if (typeof onRejected === 'function') {
                            resolve(onRejected.call(undefined, promise.value));
                        } else {
                            reject(promise.value);
                        }
                    }
                } catch (e) {
                    reject(e);
                }
            }
        }
    });
};

p$1.then = function then(onResolved, onRejected) {
    var promise = this;

    return new Promise$1(function (resolve, reject) {
        promise.deferred.push([onResolved, onRejected, resolve, reject]);
        promise.notify();
    });
};

p$1.catch = function (onRejected) {
    return this.then(undefined, onRejected);
};

/**
 * Promise adapter.
 */

if (typeof Promise === 'undefined') {
    window.Promise = Promise$1;
}

function PromiseObj(executor, context) {

    if (executor instanceof Promise) {
        this.promise = executor;
    } else {
        this.promise = new Promise(executor.bind(context));
    }

    this.context = context;
}

PromiseObj.all = function (iterable, context) {
    return new PromiseObj(Promise.all(iterable), context);
};

PromiseObj.resolve = function (value, context) {
    return new PromiseObj(Promise.resolve(value), context);
};

PromiseObj.reject = function (reason, context) {
    return new PromiseObj(Promise.reject(reason), context);
};

PromiseObj.race = function (iterable, context) {
    return new PromiseObj(Promise.race(iterable), context);
};

var p = PromiseObj.prototype;

p.bind = function (context) {
    this.context = context;
    return this;
};

p.then = function (fulfilled, rejected) {

    if (fulfilled && fulfilled.bind && this.context) {
        fulfilled = fulfilled.bind(this.context);
    }

    if (rejected && rejected.bind && this.context) {
        rejected = rejected.bind(this.context);
    }

    return new PromiseObj(this.promise.then(fulfilled, rejected), this.context);
};

p.catch = function (rejected) {

    if (rejected && rejected.bind && this.context) {
        rejected = rejected.bind(this.context);
    }

    return new PromiseObj(this.promise.catch(rejected), this.context);
};

p.finally = function (callback) {

    return this.then(function (value) {
        callback.call(this);
        return value;
    }, function (reason) {
        callback.call(this);
        return Promise.reject(reason);
    });
};

/**
 * Utility functions.
 */

var ref = {};
var hasOwnProperty = ref.hasOwnProperty;

var ref$1 = [];
var slice = ref$1.slice;
var debug = false;
var ntick;

var inBrowser = typeof window !== 'undefined';

var Util = function Util(ref) {
    var config = ref.config;
    var nextTick = ref.nextTick;

    ntick = nextTick;
    debug = config.debug || !config.silent;
};

function warn(msg) {
    if (typeof console !== 'undefined' && debug) {
        console.warn('[VueResource warn]: ' + msg);
    }
}

function error(msg) {
    if (typeof console !== 'undefined') {
        console.error(msg);
    }
}

function nextTick(cb, ctx) {
    return ntick(cb, ctx);
}

function trim(str) {
    return str ? str.replace(/^\s*|\s*$/g, '') : '';
}

function trimEnd(str, chars) {

    if (str && chars === undefined) {
        return str.replace(/\s+$/, '');
    }

    if (!str || !chars) {
        return str;
    }

    return str.replace(new RegExp("[" + chars + "]+$"), '');
}

function toLower(str) {
    return str ? str.toLowerCase() : '';
}

function toUpper(str) {
    return str ? str.toUpperCase() : '';
}

var isArray = Array.isArray;

function isString(val) {
    return typeof val === 'string';
}

function isFunction(val) {
    return typeof val === 'function';
}

function isObject(obj) {
    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
}

function isPlainObject(obj) {
    return isObject(obj) && Object.getPrototypeOf(obj) == Object.prototype;
}

function isBlob(obj) {
    return typeof Blob !== 'undefined' && obj instanceof Blob;
}

function isFormData(obj) {
    return typeof FormData !== 'undefined' && obj instanceof FormData;
}

function when(value, fulfilled, rejected) {

    var promise = PromiseObj.resolve(value);

    if (arguments.length < 2) {
        return promise;
    }

    return promise.then(fulfilled, rejected);
}

function options(fn, obj, opts) {

    opts = opts || {};

    if (isFunction(opts)) {
        opts = opts.call(obj);
    }

    return merge(fn.bind({ $vm: obj, $options: opts }), fn, { $options: opts });
}

function each(obj, iterator) {

    var i, key;

    if (isArray(obj)) {
        for (i = 0; i < obj.length; i++) {
            iterator.call(obj[i], obj[i], i);
        }
    } else if (isObject(obj)) {
        for (key in obj) {
            if (hasOwnProperty.call(obj, key)) {
                iterator.call(obj[key], obj[key], key);
            }
        }
    }

    return obj;
}

var assign = Object.assign || _assign;

function merge(target) {

    var args = slice.call(arguments, 1);

    args.forEach(function (source) {
        _merge(target, source, true);
    });

    return target;
}

function defaults(target) {

    var args = slice.call(arguments, 1);

    args.forEach(function (source) {

        for (var key in source) {
            if (target[key] === undefined) {
                target[key] = source[key];
            }
        }
    });

    return target;
}

function _assign(target) {

    var args = slice.call(arguments, 1);

    args.forEach(function (source) {
        _merge(target, source);
    });

    return target;
}

function _merge(target, source, deep) {
    for (var key in source) {
        if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
            if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
                target[key] = {};
            }
            if (isArray(source[key]) && !isArray(target[key])) {
                target[key] = [];
            }
            _merge(target[key], source[key], deep);
        } else if (source[key] !== undefined) {
            target[key] = source[key];
        }
    }
}

/**
 * Root Prefix Transform.
 */

var root = function root(options$$1, next) {

    var url = next(options$$1);

    if (isString(options$$1.root) && !/^(https?:)?\//.test(url)) {
        url = trimEnd(options$$1.root, '/') + '/' + url;
    }

    return url;
};

/**
 * Query Parameter Transform.
 */

var query = function query(options$$1, next) {

    var urlParams = Object.keys(Url.options.params),
        query = {},
        url = next(options$$1);

    each(options$$1.params, function (value, key) {
        if (urlParams.indexOf(key) === -1) {
            query[key] = value;
        }
    });

    query = Url.params(query);

    if (query) {
        url += (url.indexOf('?') == -1 ? '?' : '&') + query;
    }

    return url;
};

/**
 * URL Template v2.0.6 (https://github.com/bramstein/url-template)
 */

function expand(url, params, variables) {

    var tmpl = parse(url),
        expanded = tmpl.expand(params);

    if (variables) {
        variables.push.apply(variables, tmpl.vars);
    }

    return expanded;
}

function parse(template) {

    var operators = ['+', '#', '.', '/', ';', '?', '&'],
        variables = [];

    return {
        vars: variables,
        expand: function expand(context) {
            return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
                if (expression) {

                    var operator = null,
                        values = [];

                    if (operators.indexOf(expression.charAt(0)) !== -1) {
                        operator = expression.charAt(0);
                        expression = expression.substr(1);
                    }

                    expression.split(/,/g).forEach(function (variable) {
                        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
                        values.push.apply(values, getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
                        variables.push(tmp[1]);
                    });

                    if (operator && operator !== '+') {

                        var separator = ',';

                        if (operator === '?') {
                            separator = '&';
                        } else if (operator !== '#') {
                            separator = operator;
                        }

                        return (values.length !== 0 ? operator : '') + values.join(separator);
                    } else {
                        return values.join(',');
                    }
                } else {
                    return encodeReserved(literal);
                }
            });
        }
    };
}

function getValues(context, operator, key, modifier) {

    var value = context[key],
        result = [];

    if (isDefined(value) && value !== '') {
        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
            value = value.toString();

            if (modifier && modifier !== '*') {
                value = value.substring(0, parseInt(modifier, 10));
            }

            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
        } else {
            if (modifier === '*') {
                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
                    });
                } else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            result.push(encodeValue(operator, value[k], k));
                        }
                    });
                }
            } else {
                var tmp = [];

                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        tmp.push(encodeValue(operator, value));
                    });
                } else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            tmp.push(encodeURIComponent(k));
                            tmp.push(encodeValue(operator, value[k].toString()));
                        }
                    });
                }

                if (isKeyOperator(operator)) {
                    result.push(encodeURIComponent(key) + '=' + tmp.join(','));
                } else if (tmp.length !== 0) {
                    result.push(tmp.join(','));
                }
            }
        }
    } else {
        if (operator === ';') {
            result.push(encodeURIComponent(key));
        } else if (value === '' && (operator === '&' || operator === '?')) {
            result.push(encodeURIComponent(key) + '=');
        } else if (value === '') {
            result.push('');
        }
    }

    return result;
}

function isDefined(value) {
    return value !== undefined && value !== null;
}

function isKeyOperator(operator) {
    return operator === ';' || operator === '&' || operator === '?';
}

function encodeValue(operator, value, key) {

    value = operator === '+' || operator === '#' ? encodeReserved(value) : encodeURIComponent(value);

    if (key) {
        return encodeURIComponent(key) + '=' + value;
    } else {
        return value;
    }
}

function encodeReserved(str) {
    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
            part = encodeURI(part);
        }
        return part;
    }).join('');
}

/**
 * URL Template (RFC 6570) Transform.
 */

var template = function template(options) {

    var variables = [],
        url = expand(options.url, options.params, variables);

    variables.forEach(function (key) {
        delete options.params[key];
    });

    return url;
};

/**
 * Service for URL templating.
 */

function Url(url, params) {

    var self = this || {},
        options$$1 = url,
        transform;

    if (isString(url)) {
        options$$1 = { url: url, params: params };
    }

    options$$1 = merge({}, Url.options, self.$options, options$$1);

    Url.transforms.forEach(function (handler) {

        if (isString(handler)) {
            handler = Url.transform[handler];
        }

        if (isFunction(handler)) {
            transform = factory(handler, transform, self.$vm);
        }
    });

    return transform(options$$1);
}

/**
 * Url options.
 */

Url.options = {
    url: '',
    root: null,
    params: {}
};

/**
 * Url transforms.
 */

Url.transform = { template: template, query: query, root: root };
Url.transforms = ['template', 'query', 'root'];

/**
 * Encodes a Url parameter string.
 *
 * @param {Object} obj
 */

Url.params = function (obj) {

    var params = [],
        escape = encodeURIComponent;

    params.add = function (key, value) {

        if (isFunction(value)) {
            value = value();
        }

        if (value === null) {
            value = '';
        }

        this.push(escape(key) + '=' + escape(value));
    };

    serialize(params, obj);

    return params.join('&').replace(/%20/g, '+');
};

/**
 * Parse a URL and return its components.
 *
 * @param {String} url
 */

Url.parse = function (url) {

    var el = document.createElement('a');

    if (document.documentMode) {
        el.href = url;
        url = el.href;
    }

    el.href = url;

    return {
        href: el.href,
        protocol: el.protocol ? el.protocol.replace(/:$/, '') : '',
        port: el.port,
        host: el.host,
        hostname: el.hostname,
        pathname: el.pathname.charAt(0) === '/' ? el.pathname : '/' + el.pathname,
        search: el.search ? el.search.replace(/^\?/, '') : '',
        hash: el.hash ? el.hash.replace(/^#/, '') : ''
    };
};

function factory(handler, next, vm) {
    return function (options$$1) {
        return handler.call(vm, options$$1, next);
    };
}

function serialize(params, obj, scope) {

    var array = isArray(obj),
        plain = isPlainObject(obj),
        hash;

    each(obj, function (value, key) {

        hash = isObject(value) || isArray(value);

        if (scope) {
            key = scope + '[' + (plain || hash ? key : '') + ']';
        }

        if (!scope && array) {
            params.add(value.name, value.value);
        } else if (hash) {
            serialize(params, value, key);
        } else {
            params.add(key, value);
        }
    });
}

/**
 * XDomain client (Internet Explorer).
 */

var xdrClient = function xdrClient(request) {
    return new PromiseObj(function (resolve) {

        var xdr = new XDomainRequest(),
            handler = function handler(ref) {
            var type = ref.type;

            var status = 0;

            if (type === 'load') {
                status = 200;
            } else if (type === 'error') {
                status = 500;
            }

            resolve(request.respondWith(xdr.responseText, { status: status }));
        };

        request.abort = function () {
            return xdr.abort();
        };

        xdr.open(request.method, request.getUrl());

        if (request.timeout) {
            xdr.timeout = request.timeout;
        }

        xdr.onload = handler;
        xdr.onabort = handler;
        xdr.onerror = handler;
        xdr.ontimeout = handler;
        xdr.onprogress = function () {};
        xdr.send(request.getBody());
    });
};

/**
 * CORS Interceptor.
 */

var SUPPORTS_CORS = inBrowser && 'withCredentials' in new XMLHttpRequest();

var cors = function cors(request, next) {

    if (inBrowser) {

        var orgUrl = Url.parse(location.href);
        var reqUrl = Url.parse(request.getUrl());

        if (reqUrl.protocol !== orgUrl.protocol || reqUrl.host !== orgUrl.host) {

            request.crossOrigin = true;
            request.emulateHTTP = false;

            if (!SUPPORTS_CORS) {
                request.client = xdrClient;
            }
        }
    }

    next();
};

/**
 * Form data Interceptor.
 */

var form = function form(request, next) {

    if (isFormData(request.body)) {

        request.headers.delete('Content-Type');
    } else if (isObject(request.body) && request.emulateJSON) {

        request.body = Url.params(request.body);
        request.headers.set('Content-Type', 'application/x-www-form-urlencoded');
    }

    next();
};

/**
 * JSON Interceptor.
 */

var json = function json(request, next) {

    var type = request.headers.get('Content-Type') || '';

    if (isObject(request.body) && type.indexOf('application/json') === 0) {
        request.body = JSON.stringify(request.body);
    }

    next(function (response) {

        return response.bodyText ? when(response.text(), function (text) {

            type = response.headers.get('Content-Type') || '';

            if (type.indexOf('application/json') === 0 || isJson(text)) {

                try {
                    response.body = JSON.parse(text);
                } catch (e) {
                    response.body = null;
                }
            } else {
                response.body = text;
            }

            return response;
        }) : response;
    });
};

function isJson(str) {

    var start = str.match(/^\[|^\{(?!\{)/),
        end = { '[': /]$/, '{': /}$/ };

    return start && end[start[0]].test(str);
}

/**
 * JSONP client (Browser).
 */

var jsonpClient = function jsonpClient(request) {
    return new PromiseObj(function (resolve) {

        var name = request.jsonp || 'callback',
            callback = request.jsonpCallback || '_jsonp' + Math.random().toString(36).substr(2),
            body = null,
            handler,
            script;

        handler = function handler(ref) {
            var type = ref.type;

            var status = 0;

            if (type === 'load' && body !== null) {
                status = 200;
            } else if (type === 'error') {
                status = 500;
            }

            if (status && window[callback]) {
                delete window[callback];
                document.body.removeChild(script);
            }

            resolve(request.respondWith(body, { status: status }));
        };

        window[callback] = function (result) {
            body = JSON.stringify(result);
        };

        request.abort = function () {
            handler({ type: 'abort' });
        };

        request.params[name] = callback;

        if (request.timeout) {
            setTimeout(request.abort, request.timeout);
        }

        script = document.createElement('script');
        script.src = request.getUrl();
        script.type = 'text/javascript';
        script.async = true;
        script.onload = handler;
        script.onerror = handler;

        document.body.appendChild(script);
    });
};

/**
 * JSONP Interceptor.
 */

var jsonp = function jsonp(request, next) {

    if (request.method == 'JSONP') {
        request.client = jsonpClient;
    }

    next();
};

/**
 * Before Interceptor.
 */

var before = function before(request, next) {

    if (isFunction(request.before)) {
        request.before.call(this, request);
    }

    next();
};

/**
 * HTTP method override Interceptor.
 */

var method = function method(request, next) {

    if (request.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(request.method)) {
        request.headers.set('X-HTTP-Method-Override', request.method);
        request.method = 'POST';
    }

    next();
};

/**
 * Header Interceptor.
 */

var header = function header(request, next) {

    var headers = assign({}, Http.headers.common, !request.crossOrigin ? Http.headers.custom : {}, Http.headers[toLower(request.method)]);

    each(headers, function (value, name) {
        if (!request.headers.has(name)) {
            request.headers.set(name, value);
        }
    });

    next();
};

/**
 * XMLHttp client (Browser).
 */

var xhrClient = function xhrClient(request) {
    return new PromiseObj(function (resolve) {

        var xhr = new XMLHttpRequest(),
            handler = function handler(event) {

            var response = request.respondWith('response' in xhr ? xhr.response : xhr.responseText, {
                status: xhr.status === 1223 ? 204 : xhr.status, // IE9 status bug
                statusText: xhr.status === 1223 ? 'No Content' : trim(xhr.statusText)
            });

            each(trim(xhr.getAllResponseHeaders()).split('\n'), function (row) {
                response.headers.append(row.slice(0, row.indexOf(':')), row.slice(row.indexOf(':') + 1));
            });

            resolve(response);
        };

        request.abort = function () {
            return xhr.abort();
        };

        if (request.progress) {
            if (request.method === 'GET') {
                xhr.addEventListener('progress', request.progress);
            } else if (/^(POST|PUT)$/i.test(request.method)) {
                xhr.upload.addEventListener('progress', request.progress);
            }
        }

        xhr.open(request.method, request.getUrl(), true);

        if (request.timeout) {
            xhr.timeout = request.timeout;
        }

        if (request.responseType && 'responseType' in xhr) {
            xhr.responseType = request.responseType;
        }

        if (request.withCredentials || request.credentials) {
            xhr.withCredentials = true;
        }

        if (!request.crossOrigin) {
            request.headers.set('X-Requested-With', 'XMLHttpRequest');
        }

        request.headers.forEach(function (value, name) {
            xhr.setRequestHeader(name, value);
        });

        xhr.onload = handler;
        xhr.onabort = handler;
        xhr.onerror = handler;
        xhr.ontimeout = handler;
        xhr.send(request.getBody());
    });
};

/**
 * Http client (Node).
 */

var nodeClient = function nodeClient(request) {

    var client = require('got');

    return new PromiseObj(function (resolve) {

        var url = request.getUrl();
        var body = request.getBody();
        var method = request.method;
        var headers = {},
            handler;

        request.headers.forEach(function (value, name) {
            headers[name] = value;
        });

        client(url, { body: body, method: method, headers: headers }).then(handler = function handler(resp) {

            var response = request.respondWith(resp.body, {
                status: resp.statusCode,
                statusText: trim(resp.statusMessage)
            });

            each(resp.headers, function (value, name) {
                response.headers.set(name, value);
            });

            resolve(response);
        }, function (error$$1) {
            return handler(error$$1.response);
        });
    });
};

/**
 * Base client.
 */

var Client = function Client(context) {

    var reqHandlers = [sendRequest],
        resHandlers = [],
        handler;

    if (!isObject(context)) {
        context = null;
    }

    function Client(request) {
        return new PromiseObj(function (resolve, reject) {

            function exec() {

                handler = reqHandlers.pop();

                if (isFunction(handler)) {
                    handler.call(context, request, next);
                } else {
                    warn("Invalid interceptor of type " + (typeof handler === 'undefined' ? 'undefined' : _typeof(handler)) + ", must be a function");
                    next();
                }
            }

            function next(response) {

                if (isFunction(response)) {

                    resHandlers.unshift(response);
                } else if (isObject(response)) {

                    resHandlers.forEach(function (handler) {
                        response = when(response, function (response) {
                            return handler.call(context, response) || response;
                        }, reject);
                    });

                    when(response, resolve, reject);

                    return;
                }

                exec();
            }

            exec();
        }, context);
    }

    Client.use = function (handler) {
        reqHandlers.push(handler);
    };

    return Client;
};

function sendRequest(request, resolve) {

    var client = request.client || (inBrowser ? xhrClient : nodeClient);

    resolve(client(request));
}

/**
 * HTTP Headers.
 */

var Headers = function Headers(headers) {
    var this$1 = this;

    this.map = {};

    each(headers, function (value, name) {
        return this$1.append(name, value);
    });
};

Headers.prototype.has = function has(name) {
    return getName(this.map, name) !== null;
};

Headers.prototype.get = function get(name) {

    var list = this.map[getName(this.map, name)];

    return list ? list.join() : null;
};

Headers.prototype.getAll = function getAll(name) {
    return this.map[getName(this.map, name)] || [];
};

Headers.prototype.set = function set(name, value) {
    this.map[normalizeName(getName(this.map, name) || name)] = [trim(value)];
};

Headers.prototype.append = function append(name, value) {

    var list = this.map[getName(this.map, name)];

    if (list) {
        list.push(trim(value));
    } else {
        this.set(name, value);
    }
};

Headers.prototype.delete = function delete$1(name) {
    delete this.map[getName(this.map, name)];
};

Headers.prototype.deleteAll = function deleteAll() {
    this.map = {};
};

Headers.prototype.forEach = function forEach(callback, thisArg) {
    var this$1 = this;

    each(this.map, function (list, name) {
        each(list, function (value) {
            return callback.call(thisArg, value, name, this$1);
        });
    });
};

function getName(map, name) {
    return Object.keys(map).reduce(function (prev, curr) {
        return toLower(name) === toLower(curr) ? curr : prev;
    }, null);
}

function normalizeName(name) {

    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
    }

    return trim(name);
}

/**
 * HTTP Response.
 */

var Response = function Response(body, ref) {
    var url = ref.url;
    var headers = ref.headers;
    var status = ref.status;
    var statusText = ref.statusText;

    this.url = url;
    this.ok = status >= 200 && status < 300;
    this.status = status || 0;
    this.statusText = statusText || '';
    this.headers = new Headers(headers);
    this.body = body;

    if (isString(body)) {

        this.bodyText = body;
    } else if (isBlob(body)) {

        this.bodyBlob = body;

        if (isBlobText(body)) {
            this.bodyText = blobText(body);
        }
    }
};

Response.prototype.blob = function blob() {
    return when(this.bodyBlob);
};

Response.prototype.text = function text() {
    return when(this.bodyText);
};

Response.prototype.json = function json() {
    return when(this.text(), function (text) {
        return JSON.parse(text);
    });
};

Object.defineProperty(Response.prototype, 'data', {

    get: function get() {
        return this.body;
    },

    set: function set(body) {
        this.body = body;
    }

});

function blobText(body) {
    return new PromiseObj(function (resolve) {

        var reader = new FileReader();

        reader.readAsText(body);
        reader.onload = function () {
            resolve(reader.result);
        };
    });
}

function isBlobText(body) {
    return body.type.indexOf('text') === 0 || body.type.indexOf('json') !== -1;
}

/**
 * HTTP Request.
 */

var Request = function Request(options$$1) {

    this.body = null;
    this.params = {};

    assign(this, options$$1, {
        method: toUpper(options$$1.method || 'GET')
    });

    if (!(this.headers instanceof Headers)) {
        this.headers = new Headers(this.headers);
    }
};

Request.prototype.getUrl = function getUrl() {
    return Url(this);
};

Request.prototype.getBody = function getBody() {
    return this.body;
};

Request.prototype.respondWith = function respondWith(body, options$$1) {
    return new Response(body, assign(options$$1 || {}, { url: this.getUrl() }));
};

/**
 * Service for sending network requests.
 */

var COMMON_HEADERS = { 'Accept': 'application/json, text/plain, */*' };
var JSON_CONTENT_TYPE = { 'Content-Type': 'application/json;charset=utf-8' };

function Http(options$$1) {

    var self = this || {},
        client = Client(self.$vm);

    defaults(options$$1 || {}, self.$options, Http.options);

    Http.interceptors.forEach(function (handler) {

        if (isString(handler)) {
            handler = Http.interceptor[handler];
        }

        if (isFunction(handler)) {
            client.use(handler);
        }
    });

    return client(new Request(options$$1)).then(function (response) {

        return response.ok ? response : PromiseObj.reject(response);
    }, function (response) {

        if (response instanceof Error) {
            error(response);
        }

        return PromiseObj.reject(response);
    });
}

Http.options = {};

Http.headers = {
    put: JSON_CONTENT_TYPE,
    post: JSON_CONTENT_TYPE,
    patch: JSON_CONTENT_TYPE,
    delete: JSON_CONTENT_TYPE,
    common: COMMON_HEADERS,
    custom: {}
};

Http.interceptor = { before: before, method: method, jsonp: jsonp, json: json, form: form, header: header, cors: cors };
Http.interceptors = ['before', 'method', 'jsonp', 'json', 'form', 'header', 'cors'];

['get', 'delete', 'head', 'jsonp'].forEach(function (method$$1) {

    Http[method$$1] = function (url, options$$1) {
        return this(assign(options$$1 || {}, { url: url, method: method$$1 }));
    };
});

['post', 'put', 'patch'].forEach(function (method$$1) {

    Http[method$$1] = function (url, body, options$$1) {
        return this(assign(options$$1 || {}, { url: url, method: method$$1, body: body }));
    };
});

/**
 * Service for interacting with RESTful services.
 */

function Resource(url, params, actions, options$$1) {

    var self = this || {},
        resource = {};

    actions = assign({}, Resource.actions, actions);

    each(actions, function (action, name) {

        action = merge({ url: url, params: assign({}, params) }, options$$1, action);

        resource[name] = function () {
            return (self.$http || Http)(opts(action, arguments));
        };
    });

    return resource;
}

function opts(action, args) {

    var options$$1 = assign({}, action),
        params = {},
        body;

    switch (args.length) {

        case 2:

            params = args[0];
            body = args[1];

            break;

        case 1:

            if (/^(POST|PUT|PATCH)$/i.test(options$$1.method)) {
                body = args[0];
            } else {
                params = args[0];
            }

            break;

        case 0:

            break;

        default:

            throw 'Expected up to 2 arguments [params, body], got ' + args.length + ' arguments';
    }

    options$$1.body = body;
    options$$1.params = assign({}, options$$1.params, params);

    return options$$1;
}

Resource.actions = {

    get: { method: 'GET' },
    save: { method: 'POST' },
    query: { method: 'GET' },
    update: { method: 'PUT' },
    remove: { method: 'DELETE' },
    delete: { method: 'DELETE' }

};

/**
 * Install plugin.
 */

function plugin(Vue) {

    if (plugin.installed) {
        return;
    }

    Util(Vue);

    Vue.url = Url;
    Vue.http = Http;
    Vue.resource = Resource;
    Vue.Promise = PromiseObj;

    Object.defineProperties(Vue.prototype, {

        $url: {
            get: function get() {
                return options(Vue.url, this, this.$options.url);
            }
        },

        $http: {
            get: function get() {
                return options(Vue.http, this, this.$options.http);
            }
        },

        $resource: {
            get: function get() {
                return Vue.resource.bind(this);
            }
        },

        $promise: {
            get: function get() {
                var this$1 = this;

                return function (executor) {
                    return new Vue.Promise(executor, this$1);
                };
            }
        }

    });
}

if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use(plugin);
}

module.exports = plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"got":3}],7:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.VueSocketio = e() : t.VueSocketio = e();
}(undefined, function () {
  return function (t) {
    function e(n) {
      if (r[n]) return r[n].exports;var o = r[n] = { i: n, l: !1, exports: {} };return t[n].call(o.exports, o, o.exports, e), o.l = !0, o.exports;
    }var r = {};return e.m = t, e.c = r, e.i = function (t) {
      return t;
    }, e.d = function (t, r, n) {
      e.o(t, r) || Object.defineProperty(t, r, { configurable: !1, enumerable: !0, get: n });
    }, e.n = function (t) {
      var r = t && t.__esModule ? function () {
        return t.default;
      } : function () {
        return t;
      };return e.d(r, "a", r), r;
    }, e.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, e.p = "", e(e.s = 54);
  }([function (t, e) {
    var r;r = function () {
      return this;
    }();try {
      r = r || Function("return this")() || (0, eval)("this");
    } catch (t) {
      "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (r = window);
    }t.exports = r;
  }, function (t, e, r) {
    (function (n) {
      function o() {
        return "undefined" != typeof document && "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
      }function i() {
        var t = arguments,
            r = this.useColors;if (t[0] = (r ? "%c" : "") + this.namespace + (r ? " %c" : " ") + t[0] + (r ? "%c " : " ") + "+" + e.humanize(this.diff), !r) return t;var n = "color: " + this.color;t = [t[0], n, "color: inherit"].concat(Array.prototype.slice.call(t, 1));var o = 0,
            i = 0;return t[0].replace(/%[a-z%]/g, function (t) {
          "%%" !== t && (o++, "%c" === t && (i = o));
        }), t.splice(i, 0, n), t;
      }function s() {
        return "object" == (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
      }function a(t) {
        try {
          null == t ? e.storage.removeItem("debug") : e.storage.debug = t;
        } catch (t) {}
      }function c() {
        try {
          return e.storage.debug;
        } catch (t) {}if (void 0 !== n && "env" in n) return n.env.DEBUG;
      }e = t.exports = r(30), e.log = s, e.formatArgs = i, e.save = a, e.load = c, e.useColors = o, e.storage = "undefined" != typeof chrome && void 0 !== chrome.storage ? chrome.storage.local : function () {
        try {
          return window.localStorage;
        } catch (t) {}
      }(), e.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"], e.formatters.j = function (t) {
        try {
          return JSON.stringify(t);
        } catch (t) {
          return "[UnexpectedJSONParseError]: " + t.message;
        }
      }, e.enable(c());
    }).call(e, r(42));
  }, function (t, e, r) {
    (function (t) {
      function n(t, r) {
        return r("b" + e.packets[t.type] + t.data.data);
      }function o(t, r, n) {
        if (!r) return e.encodeBase64Packet(t, n);var o = t.data,
            i = new Uint8Array(o),
            s = new Uint8Array(1 + o.byteLength);s[0] = v[t.type];for (var a = 0; a < i.length; a++) {
          s[a + 1] = i[a];
        }return n(s.buffer);
      }function i(t, r, n) {
        if (!r) return e.encodeBase64Packet(t, n);var o = new FileReader();return o.onload = function () {
          t.data = o.result, e.encodePacket(t, r, !0, n);
        }, o.readAsArrayBuffer(t.data);
      }function s(t, r, n) {
        if (!r) return e.encodeBase64Packet(t, n);if (m) return i(t, r, n);var o = new Uint8Array(1);return o[0] = v[t.type], n(new w([o.buffer, t.data]));
      }function a(t) {
        try {
          t = d.decode(t);
        } catch (t) {
          return !1;
        }return t;
      }function c(t, e, r) {
        for (var n = new Array(t.length), o = l(t.length, r), i = 0; i < t.length; i++) {
          !function (t, r, o) {
            e(r, function (e, r) {
              n[t] = r, o(e, n);
            });
          }(i, t[i], o);
        }
      }var u,
          h = r(37),
          p = r(13),
          f = r(25),
          l = r(24),
          d = r(52);t && t.ArrayBuffer && (u = r(28));var y = "undefined" != typeof navigator && /Android/i.test(navigator.userAgent),
          g = "undefined" != typeof navigator && /PhantomJS/i.test(navigator.userAgent),
          m = y || g;e.protocol = 3;var v = e.packets = { open: 0, close: 1, ping: 2, pong: 3, message: 4, upgrade: 5, noop: 6 },
          b = h(v),
          k = { type: "error", data: "parser error" },
          w = r(29);e.encodePacket = function (e, r, i, a) {
        "function" == typeof r && (a = r, r = !1), "function" == typeof i && (a = i, i = null);var c = void 0 === e.data ? void 0 : e.data.buffer || e.data;if (t.ArrayBuffer && c instanceof ArrayBuffer) return o(e, r, a);if (w && c instanceof t.Blob) return s(e, r, a);if (c && c.base64) return n(e, a);var u = v[e.type];return void 0 !== e.data && (u += i ? d.encode(String(e.data)) : String(e.data)), a("" + u);
      }, e.encodeBase64Packet = function (r, n) {
        var o = "b" + e.packets[r.type];if (w && r.data instanceof t.Blob) {
          var i = new FileReader();return i.onload = function () {
            var t = i.result.split(",")[1];n(o + t);
          }, i.readAsDataURL(r.data);
        }var s;try {
          s = String.fromCharCode.apply(null, new Uint8Array(r.data));
        } catch (t) {
          for (var a = new Uint8Array(r.data), c = new Array(a.length), u = 0; u < a.length; u++) {
            c[u] = a[u];
          }s = String.fromCharCode.apply(null, c);
        }return o += t.btoa(s), n(o);
      }, e.decodePacket = function (t, r, n) {
        if (void 0 === t) return k;if ("string" == typeof t) {
          if ("b" == t.charAt(0)) return e.decodeBase64Packet(t.substr(1), r);if (n && (t = a(t)) === !1) return k;var o = t.charAt(0);return Number(o) == o && b[o] ? t.length > 1 ? { type: b[o], data: t.substring(1) } : { type: b[o] } : k;
        }var i = new Uint8Array(t),
            o = i[0],
            s = f(t, 1);return w && "blob" === r && (s = new w([s])), { type: b[o], data: s };
      }, e.decodeBase64Packet = function (t, e) {
        var r = b[t.charAt(0)];if (!u) return { type: r, data: { base64: !0, data: t.substr(1) } };var n = u.decode(t.substr(1));return "blob" === e && w && (n = new w([n])), { type: r, data: n };
      }, e.encodePayload = function (t, r, n) {
        function o(t) {
          return t.length + ":" + t;
        }function i(t, n) {
          e.encodePacket(t, !!s && r, !0, function (t) {
            n(null, o(t));
          });
        }"function" == typeof r && (n = r, r = null);var s = p(t);return r && s ? w && !m ? e.encodePayloadAsBlob(t, n) : e.encodePayloadAsArrayBuffer(t, n) : t.length ? void c(t, i, function (t, e) {
          return n(e.join(""));
        }) : n("0:");
      }, e.decodePayload = function (t, r, n) {
        if ("string" != typeof t) return e.decodePayloadAsBinary(t, r, n);"function" == typeof r && (n = r, r = null);var o;if ("" == t) return n(k, 0, 1);for (var i, s, a = "", c = 0, u = t.length; c < u; c++) {
          var h = t.charAt(c);if (":" != h) a += h;else {
            if ("" == a || a != (i = Number(a))) return n(k, 0, 1);if (s = t.substr(c + 1, i), a != s.length) return n(k, 0, 1);if (s.length) {
              if (o = e.decodePacket(s, r, !0), k.type == o.type && k.data == o.data) return n(k, 0, 1);if (!1 === n(o, c + i, u)) return;
            }c += i, a = "";
          }
        }return "" != a ? n(k, 0, 1) : void 0;
      }, e.encodePayloadAsArrayBuffer = function (t, r) {
        function n(t, r) {
          e.encodePacket(t, !0, !0, function (t) {
            return r(null, t);
          });
        }if (!t.length) return r(new ArrayBuffer(0));c(t, n, function (t, e) {
          var n = e.reduce(function (t, e) {
            var r;return r = "string" == typeof e ? e.length : e.byteLength, t + r.toString().length + r + 2;
          }, 0),
              o = new Uint8Array(n),
              i = 0;return e.forEach(function (t) {
            var e = "string" == typeof t,
                r = t;if (e) {
              for (var n = new Uint8Array(t.length), s = 0; s < t.length; s++) {
                n[s] = t.charCodeAt(s);
              }r = n.buffer;
            }o[i++] = e ? 0 : 1;for (var a = r.byteLength.toString(), s = 0; s < a.length; s++) {
              o[i++] = parseInt(a[s]);
            }o[i++] = 255;for (var n = new Uint8Array(r), s = 0; s < n.length; s++) {
              o[i++] = n[s];
            }
          }), r(o.buffer);
        });
      }, e.encodePayloadAsBlob = function (t, r) {
        function n(t, r) {
          e.encodePacket(t, !0, !0, function (t) {
            var e = new Uint8Array(1);if (e[0] = 1, "string" == typeof t) {
              for (var n = new Uint8Array(t.length), o = 0; o < t.length; o++) {
                n[o] = t.charCodeAt(o);
              }t = n.buffer, e[0] = 0;
            }for (var i = t instanceof ArrayBuffer ? t.byteLength : t.size, s = i.toString(), a = new Uint8Array(s.length + 1), o = 0; o < s.length; o++) {
              a[o] = parseInt(s[o]);
            }if (a[s.length] = 255, w) {
              var c = new w([e.buffer, a.buffer, t]);r(null, c);
            }
          });
        }c(t, n, function (t, e) {
          return r(new w(e));
        });
      }, e.decodePayloadAsBinary = function (t, r, n) {
        "function" == typeof r && (n = r, r = null);for (var o = t, i = [], s = !1; o.byteLength > 0;) {
          for (var a = new Uint8Array(o), c = 0 === a[0], u = "", h = 1; 255 != a[h]; h++) {
            if (u.length > 310) {
              s = !0;break;
            }u += a[h];
          }if (s) return n(k, 0, 1);o = f(o, 2 + u.length), u = parseInt(u);var p = f(o, 0, u);if (c) try {
            p = String.fromCharCode.apply(null, new Uint8Array(p));
          } catch (t) {
            var l = new Uint8Array(p);p = "";for (var h = 0; h < l.length; h++) {
              p += String.fromCharCode(l[h]);
            }
          }i.push(p), o = f(o, u);
        }var d = i.length;i.forEach(function (t, o) {
          n(e.decodePacket(t, r, !0), o, d);
        });
      };
    }).call(e, r(0));
  }, function (t, e, r) {
    function n(t) {
      if (t) return o(t);
    }function o(t) {
      for (var e in n.prototype) {
        t[e] = n.prototype[e];
      }return t;
    }t.exports = n, n.prototype.on = n.prototype.addEventListener = function (t, e) {
      return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
    }, n.prototype.once = function (t, e) {
      function r() {
        this.off(t, r), e.apply(this, arguments);
      }return r.fn = e, this.on(t, r), this;
    }, n.prototype.off = n.prototype.removeListener = n.prototype.removeAllListeners = n.prototype.removeEventListener = function (t, e) {
      if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;var r = this._callbacks["$" + t];if (!r) return this;if (1 == arguments.length) return delete this._callbacks["$" + t], this;for (var n, o = 0; o < r.length; o++) {
        if ((n = r[o]) === e || n.fn === e) {
          r.splice(o, 1);break;
        }
      }return this;
    }, n.prototype.emit = function (t) {
      this._callbacks = this._callbacks || {};var e = [].slice.call(arguments, 1),
          r = this._callbacks["$" + t];if (r) {
        r = r.slice(0);for (var n = 0, o = r.length; n < o; ++n) {
          r[n].apply(this, e);
        }
      }return this;
    }, n.prototype.listeners = function (t) {
      return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];
    }, n.prototype.hasListeners = function (t) {
      return !!this.listeners(t).length;
    };
  }, function (t, e) {
    t.exports = function (t, e) {
      var r = function r() {};r.prototype = e.prototype, t.prototype = new r(), t.prototype.constructor = t;
    };
  }, function (t, e, r) {
    function n(t) {
      this.path = t.path, this.hostname = t.hostname, this.port = t.port, this.secure = t.secure, this.query = t.query, this.timestampParam = t.timestampParam, this.timestampRequests = t.timestampRequests, this.readyState = "", this.agent = t.agent || !1, this.socket = t.socket, this.enablesXDR = t.enablesXDR, this.pfx = t.pfx, this.key = t.key, this.passphrase = t.passphrase, this.cert = t.cert, this.ca = t.ca, this.ciphers = t.ciphers, this.rejectUnauthorized = t.rejectUnauthorized, this.forceNode = t.forceNode, this.extraHeaders = t.extraHeaders, this.localAddress = t.localAddress;
    }var o = r(2),
        i = r(3);t.exports = n, i(n.prototype), n.prototype.onError = function (t, e) {
      var r = new Error(t);return r.type = "TransportError", r.description = e, this.emit("error", r), this;
    }, n.prototype.open = function () {
      return "closed" !== this.readyState && "" !== this.readyState || (this.readyState = "opening", this.doOpen()), this;
    }, n.prototype.close = function () {
      return "opening" !== this.readyState && "open" !== this.readyState || (this.doClose(), this.onClose()), this;
    }, n.prototype.send = function (t) {
      if ("open" !== this.readyState) throw new Error("Transport not open");this.write(t);
    }, n.prototype.onOpen = function () {
      this.readyState = "open", this.writable = !0, this.emit("open");
    }, n.prototype.onData = function (t) {
      var e = o.decodePacket(t, this.socket.binaryType);this.onPacket(e);
    }, n.prototype.onPacket = function (t) {
      this.emit("packet", t);
    }, n.prototype.onClose = function () {
      this.readyState = "closed", this.emit("close");
    };
  }, function (t, e, r) {
    (function (e) {
      var n = r(38);t.exports = function (t) {
        var r = t.xdomain,
            o = t.xscheme,
            i = t.enablesXDR;try {
          if ("undefined" != typeof XMLHttpRequest && (!r || n)) return new XMLHttpRequest();
        } catch (t) {}try {
          if ("undefined" != typeof XDomainRequest && !o && i) return new XDomainRequest();
        } catch (t) {}if (!r) try {
          return new e[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
        } catch (t) {}
      };
    }).call(e, r(0));
  }, function (t, e) {
    e.encode = function (t) {
      var e = "";for (var r in t) {
        t.hasOwnProperty(r) && (e.length && (e += "&"), e += encodeURIComponent(r) + "=" + encodeURIComponent(t[r]));
      }return e;
    }, e.decode = function (t) {
      for (var e = {}, r = t.split("&"), n = 0, o = r.length; n < o; n++) {
        var i = r[n].split("=");e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);
      }return e;
    };
  }, function (t, e, r) {
    function n() {}function o(t) {
      var r = "",
          n = !1;return r += t.type, e.BINARY_EVENT != t.type && e.BINARY_ACK != t.type || (r += t.attachments, r += "-"), t.nsp && "/" != t.nsp && (n = !0, r += t.nsp), null != t.id && (n && (r += ",", n = !1), r += t.id), null != t.data && (n && (r += ","), r += f.stringify(t.data)), p("encoded %j as %s", t, r), r;
    }function i(t, e) {
      function r(t) {
        var r = d.deconstructPacket(t),
            n = o(r.packet),
            i = r.buffers;i.unshift(n), e(i);
      }d.removeBlobs(t, r);
    }function s() {
      this.reconstructor = null;
    }function a(t) {
      var r = {},
          n = 0;if (r.type = Number(t.charAt(0)), null == e.types[r.type]) return h();if (e.BINARY_EVENT == r.type || e.BINARY_ACK == r.type) {
        for (var o = ""; "-" != t.charAt(++n) && (o += t.charAt(n), n != t.length);) {}if (o != Number(o) || "-" != t.charAt(n)) throw new Error("Illegal attachments");r.attachments = Number(o);
      }if ("/" == t.charAt(n + 1)) for (r.nsp = ""; ++n;) {
        var i = t.charAt(n);if ("," == i) break;if (r.nsp += i, n == t.length) break;
      } else r.nsp = "/";var s = t.charAt(n + 1);if ("" !== s && Number(s) == s) {
        for (r.id = ""; ++n;) {
          var i = t.charAt(n);if (null == i || Number(i) != i) {
            --n;break;
          }if (r.id += t.charAt(n), n == t.length) break;
        }r.id = Number(r.id);
      }return t.charAt(++n) && (r = c(r, t.substr(n))), p("decoded %s as %j", t, r), r;
    }function c(t, e) {
      try {
        t.data = f.parse(e);
      } catch (t) {
        return h();
      }return t;
    }function u(t) {
      this.reconPack = t, this.buffers = [];
    }function h(t) {
      return { type: e.ERROR, data: "parser error" };
    }var p = r(47)("socket.io-parser"),
        f = r(39),
        l = r(46),
        d = r(45),
        y = r(20);e.protocol = 4, e.types = ["CONNECT", "DISCONNECT", "EVENT", "ACK", "ERROR", "BINARY_EVENT", "BINARY_ACK"], e.CONNECT = 0, e.DISCONNECT = 1, e.EVENT = 2, e.ACK = 3, e.ERROR = 4, e.BINARY_EVENT = 5, e.BINARY_ACK = 6, e.Encoder = n, e.Decoder = s, n.prototype.encode = function (t, r) {
      if (p("encoding packet %j", t), e.BINARY_EVENT == t.type || e.BINARY_ACK == t.type) i(t, r);else {
        r([o(t)]);
      }
    }, l(s.prototype), s.prototype.add = function (t) {
      var r;if ("string" == typeof t) r = a(t), e.BINARY_EVENT == r.type || e.BINARY_ACK == r.type ? (this.reconstructor = new u(r), 0 === this.reconstructor.reconPack.attachments && this.emit("decoded", r)) : this.emit("decoded", r);else {
        if (!y(t) && !t.base64) throw new Error("Unknown type: " + t);if (!this.reconstructor) throw new Error("got binary data when not reconstructing a packet");(r = this.reconstructor.takeBinaryData(t)) && (this.reconstructor = null, this.emit("decoded", r));
      }
    }, s.prototype.destroy = function () {
      this.reconstructor && this.reconstructor.finishedReconstruction();
    }, u.prototype.takeBinaryData = function (t) {
      if (this.buffers.push(t), this.buffers.length == this.reconPack.attachments) {
        var e = d.reconstructPacket(this.reconPack, this.buffers);return this.finishedReconstruction(), e;
      }return null;
    }, u.prototype.finishedReconstruction = function () {
      this.reconPack = null, this.buffers = [];
    };
  }, function (t, e, r) {
    "use strict";
    function n(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }();e.default = new (function () {
      function t() {
        n(this, t), this.listeners = new Map();
      }return o(t, [{ key: "addListener", value: function value(t, e, r) {
          return "function" == typeof e && (this.listeners.has(t) || this.listeners.set(t, []), this.listeners.get(t).push({ callback: e, vm: r }), !0);
        } }, { key: "removeListener", value: function value(t, e, r) {
          var n = this.listeners.get(t),
              o = void 0;return !!(n && n.length && (o = n.reduce(function (t, n, o) {
            return "function" == typeof n.callback && n.callback === e && n.vm == r ? t = o : t;
          }, -1)) > -1) && (n.splice(o, 1), this.listeners.set(t, n), !0);
        } }, { key: "emit", value: function value(t) {
          for (var e = arguments.length, r = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++) {
            r[n - 1] = arguments[n];
          }var o = this.listeners.get(t);return !(!o || !o.length) && (o.forEach(function (t) {
            var e;(e = t.callback).call.apply(e, [t.vm].concat(r));
          }), !0);
        } }]), t;
    }())();
  }, function (t, e) {
    var r = [].slice;t.exports = function (t, e) {
      if ("string" == typeof e && (e = t[e]), "function" != typeof e) throw new Error("bind() requires a function");var n = r.call(arguments, 2);return function () {
        return e.apply(t, n.concat(r.call(arguments)));
      };
    };
  }, function (t, e, r) {
    (function (t) {
      function n(e) {
        var r = !1,
            n = !1,
            a = !1 !== e.jsonp;if (t.location) {
          var c = "https:" === location.protocol,
              u = location.port;u || (u = c ? 443 : 80), r = e.hostname !== location.hostname || u !== e.port, n = e.secure !== c;
        }if (e.xdomain = r, e.xscheme = n, "open" in new o(e) && !e.forceJSONP) return new i(e);if (!a) throw new Error("JSONP disabled");return new s(e);
      }var o = r(6),
          i = r(35),
          s = r(34),
          a = r(36);e.polling = n, e.websocket = a;
    }).call(e, r(0));
  }, function (t, e, r) {
    function n(t) {
      var e = t && t.forceBase64;h && !e || (this.supportsBinary = !1), o.call(this, t);
    }var o = r(5),
        i = r(7),
        s = r(2),
        a = r(4),
        c = r(22),
        u = r(1)("engine.io-client:polling");t.exports = n;var h = function () {
      return null != new (r(6))({ xdomain: !1 }).responseType;
    }();a(n, o), n.prototype.name = "polling", n.prototype.doOpen = function () {
      this.poll();
    }, n.prototype.pause = function (t) {
      function e() {
        u("paused"), r.readyState = "paused", t();
      }var r = this;if (this.readyState = "pausing", this.polling || !this.writable) {
        var n = 0;this.polling && (u("we are currently polling - waiting to pause"), n++, this.once("pollComplete", function () {
          u("pre-pause polling complete"), --n || e();
        })), this.writable || (u("we are currently writing - waiting to pause"), n++, this.once("drain", function () {
          u("pre-pause writing complete"), --n || e();
        }));
      } else e();
    }, n.prototype.poll = function () {
      u("polling"), this.polling = !0, this.doPoll(), this.emit("poll");
    }, n.prototype.onData = function (t) {
      var e = this;u("polling got data %s", t);var r = function r(t, _r, n) {
        if ("opening" === e.readyState && e.onOpen(), "close" === t.type) return e.onClose(), !1;e.onPacket(t);
      };s.decodePayload(t, this.socket.binaryType, r), "closed" !== this.readyState && (this.polling = !1, this.emit("pollComplete"), "open" === this.readyState ? this.poll() : u('ignoring poll - transport state "%s"', this.readyState));
    }, n.prototype.doClose = function () {
      function t() {
        u("writing close packet"), e.write([{ type: "close" }]);
      }var e = this;"open" === this.readyState ? (u("transport open - closing"), t()) : (u("transport not open - deferring close"), this.once("open", t));
    }, n.prototype.write = function (t) {
      var e = this;this.writable = !1;var r = function r() {
        e.writable = !0, e.emit("drain");
      };s.encodePayload(t, this.supportsBinary, function (t) {
        e.doWrite(t, r);
      });
    }, n.prototype.uri = function () {
      var t = this.query || {},
          e = this.secure ? "https" : "http",
          r = "";return !1 !== this.timestampRequests && (t[this.timestampParam] = c()), this.supportsBinary || t.sid || (t.b64 = 1), t = i.encode(t), this.port && ("https" === e && 443 !== Number(this.port) || "http" === e && 80 !== Number(this.port)) && (r = ":" + this.port), t.length && (t = "?" + t), e + "://" + (this.hostname.indexOf(":") !== -1 ? "[" + this.hostname + "]" : this.hostname) + r + this.path + t;
    };
  }, function (t, e, r) {
    (function (e) {
      function n(t) {
        function r(t) {
          if (!t) return !1;if (e.Buffer && e.Buffer.isBuffer && e.Buffer.isBuffer(t) || e.ArrayBuffer && t instanceof ArrayBuffer || e.Blob && t instanceof Blob || e.File && t instanceof File) return !0;if (o(t)) {
            for (var n = 0; n < t.length; n++) {
              if (r(t[n])) return !0;
            }
          } else if (t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t))) {
            t.toJSON && "function" == typeof t.toJSON && (t = t.toJSON());for (var i in t) {
              if (Object.prototype.hasOwnProperty.call(t, i) && r(t[i])) return !0;
            }
          }return !1;
        }return r(t);
      }var o = r(15);t.exports = n;
    }).call(e, r(0));
  }, function (t, e) {
    var r = [].indexOf;t.exports = function (t, e) {
      if (r) return t.indexOf(e);for (var n = 0; n < t.length; ++n) {
        if (t[n] === e) return n;
      }return -1;
    };
  }, function (t, e) {
    t.exports = Array.isArray || function (t) {
      return "[object Array]" == Object.prototype.toString.call(t);
    };
  }, function (t, e) {
    var r = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
        n = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];t.exports = function (t) {
      var e = t,
          o = t.indexOf("["),
          i = t.indexOf("]");o != -1 && i != -1 && (t = t.substring(0, o) + t.substring(o, i).replace(/:/g, ";") + t.substring(i, t.length));for (var s = r.exec(t || ""), a = {}, c = 14; c--;) {
        a[n[c]] = s[c] || "";
      }return o != -1 && i != -1 && (a.source = e, a.host = a.host.substring(1, a.host.length - 1).replace(/;/g, ":"), a.authority = a.authority.replace("[", "").replace("]", "").replace(/;/g, ":"), a.ipv6uri = !0), a;
    };
  }, function (t, e, r) {
    function n(t, e) {
      if (!(this instanceof n)) return new n(t, e);t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (e = t, t = void 0), e = e || {}, e.path = e.path || "/socket.io", this.nsps = {}, this.subs = [], this.opts = e, this.reconnection(e.reconnection !== !1), this.reconnectionAttempts(e.reconnectionAttempts || 1 / 0), this.reconnectionDelay(e.reconnectionDelay || 1e3), this.reconnectionDelayMax(e.reconnectionDelayMax || 5e3), this.randomizationFactor(e.randomizationFactor || .5), this.backoff = new f({ min: this.reconnectionDelay(), max: this.reconnectionDelayMax(), jitter: this.randomizationFactor() }), this.timeout(null == e.timeout ? 2e4 : e.timeout), this.readyState = "closed", this.uri = t, this.connecting = [], this.lastPing = null, this.encoding = !1, this.packetBuffer = [], this.encoder = new a.Encoder(), this.decoder = new a.Decoder(), this.autoConnect = e.autoConnect !== !1, this.autoConnect && this.open();
    }var o = r(31),
        i = r(19),
        s = r(3),
        a = r(8),
        c = r(18),
        u = r(10),
        h = r(1)("socket.io-client:manager"),
        p = r(14),
        f = r(27),
        l = Object.prototype.hasOwnProperty;t.exports = n, n.prototype.emitAll = function () {
      this.emit.apply(this, arguments);for (var t in this.nsps) {
        l.call(this.nsps, t) && this.nsps[t].emit.apply(this.nsps[t], arguments);
      }
    }, n.prototype.updateSocketIds = function () {
      for (var t in this.nsps) {
        l.call(this.nsps, t) && (this.nsps[t].id = this.engine.id);
      }
    }, s(n.prototype), n.prototype.reconnection = function (t) {
      return arguments.length ? (this._reconnection = !!t, this) : this._reconnection;
    }, n.prototype.reconnectionAttempts = function (t) {
      return arguments.length ? (this._reconnectionAttempts = t, this) : this._reconnectionAttempts;
    }, n.prototype.reconnectionDelay = function (t) {
      return arguments.length ? (this._reconnectionDelay = t, this.backoff && this.backoff.setMin(t), this) : this._reconnectionDelay;
    }, n.prototype.randomizationFactor = function (t) {
      return arguments.length ? (this._randomizationFactor = t, this.backoff && this.backoff.setJitter(t), this) : this._randomizationFactor;
    }, n.prototype.reconnectionDelayMax = function (t) {
      return arguments.length ? (this._reconnectionDelayMax = t, this.backoff && this.backoff.setMax(t), this) : this._reconnectionDelayMax;
    }, n.prototype.timeout = function (t) {
      return arguments.length ? (this._timeout = t, this) : this._timeout;
    }, n.prototype.maybeReconnectOnOpen = function () {
      !this.reconnecting && this._reconnection && 0 === this.backoff.attempts && this.reconnect();
    }, n.prototype.open = n.prototype.connect = function (t, e) {
      if (h("readyState %s", this.readyState), ~this.readyState.indexOf("open")) return this;h("opening %s", this.uri), this.engine = o(this.uri, this.opts);var r = this.engine,
          n = this;this.readyState = "opening", this.skipReconnect = !1;var i = c(r, "open", function () {
        n.onopen(), t && t();
      }),
          s = c(r, "error", function (e) {
        if (h("connect_error"), n.cleanup(), n.readyState = "closed", n.emitAll("connect_error", e), t) {
          var r = new Error("Connection error");r.data = e, t(r);
        } else n.maybeReconnectOnOpen();
      });if (!1 !== this._timeout) {
        var a = this._timeout;h("connect attempt will timeout after %d", a);var u = setTimeout(function () {
          h("connect attempt timed out after %d", a), i.destroy(), r.close(), r.emit("error", "timeout"), n.emitAll("connect_timeout", a);
        }, a);this.subs.push({ destroy: function destroy() {
            clearTimeout(u);
          } });
      }return this.subs.push(i), this.subs.push(s), this;
    }, n.prototype.onopen = function () {
      h("open"), this.cleanup(), this.readyState = "open", this.emit("open");var t = this.engine;this.subs.push(c(t, "data", u(this, "ondata"))), this.subs.push(c(t, "ping", u(this, "onping"))), this.subs.push(c(t, "pong", u(this, "onpong"))), this.subs.push(c(t, "error", u(this, "onerror"))), this.subs.push(c(t, "close", u(this, "onclose"))), this.subs.push(c(this.decoder, "decoded", u(this, "ondecoded")));
    }, n.prototype.onping = function () {
      this.lastPing = new Date(), this.emitAll("ping");
    }, n.prototype.onpong = function () {
      this.emitAll("pong", new Date() - this.lastPing);
    }, n.prototype.ondata = function (t) {
      this.decoder.add(t);
    }, n.prototype.ondecoded = function (t) {
      this.emit("packet", t);
    }, n.prototype.onerror = function (t) {
      h("error", t), this.emitAll("error", t);
    }, n.prototype.socket = function (t, e) {
      function r() {
        ~p(o.connecting, n) || o.connecting.push(n);
      }var n = this.nsps[t];if (!n) {
        n = new i(this, t, e), this.nsps[t] = n;var o = this;n.on("connecting", r), n.on("connect", function () {
          n.id = o.engine.id;
        }), this.autoConnect && r();
      }return n;
    }, n.prototype.destroy = function (t) {
      var e = p(this.connecting, t);~e && this.connecting.splice(e, 1), this.connecting.length || this.close();
    }, n.prototype.packet = function (t) {
      h("writing packet %j", t);var e = this;t.query && 0 === t.type && (t.nsp += "?" + t.query), e.encoding ? e.packetBuffer.push(t) : (e.encoding = !0, this.encoder.encode(t, function (r) {
        for (var n = 0; n < r.length; n++) {
          e.engine.write(r[n], t.options);
        }e.encoding = !1, e.processPacketQueue();
      }));
    }, n.prototype.processPacketQueue = function () {
      if (this.packetBuffer.length > 0 && !this.encoding) {
        var t = this.packetBuffer.shift();this.packet(t);
      }
    }, n.prototype.cleanup = function () {
      h("cleanup");for (var t = this.subs.length, e = 0; e < t; e++) {
        this.subs.shift().destroy();
      }this.packetBuffer = [], this.encoding = !1, this.lastPing = null, this.decoder.destroy();
    }, n.prototype.close = n.prototype.disconnect = function () {
      h("disconnect"), this.skipReconnect = !0, this.reconnecting = !1, "opening" === this.readyState && this.cleanup(), this.backoff.reset(), this.readyState = "closed", this.engine && this.engine.close();
    }, n.prototype.onclose = function (t) {
      h("onclose"), this.cleanup(), this.backoff.reset(), this.readyState = "closed", this.emit("close", t), this._reconnection && !this.skipReconnect && this.reconnect();
    }, n.prototype.reconnect = function () {
      if (this.reconnecting || this.skipReconnect) return this;var t = this;if (this.backoff.attempts >= this._reconnectionAttempts) h("reconnect failed"), this.backoff.reset(), this.emitAll("reconnect_failed"), this.reconnecting = !1;else {
        var e = this.backoff.duration();h("will wait %dms before reconnect attempt", e), this.reconnecting = !0;var r = setTimeout(function () {
          t.skipReconnect || (h("attempting reconnect"), t.emitAll("reconnect_attempt", t.backoff.attempts), t.emitAll("reconnecting", t.backoff.attempts), t.skipReconnect || t.open(function (e) {
            e ? (h("reconnect attempt error"), t.reconnecting = !1, t.reconnect(), t.emitAll("reconnect_error", e.data)) : (h("reconnect success"), t.onreconnect());
          }));
        }, e);this.subs.push({ destroy: function destroy() {
            clearTimeout(r);
          } });
      }
    }, n.prototype.onreconnect = function () {
      var t = this.backoff.attempts;this.reconnecting = !1, this.backoff.reset(), this.updateSocketIds(), this.emitAll("reconnect", t);
    };
  }, function (t, e) {
    function r(t, e, r) {
      return t.on(e, r), { destroy: function destroy() {
          t.removeListener(e, r);
        } };
    }t.exports = r;
  }, function (t, e, r) {
    function n(t, e, r) {
      this.io = t, this.nsp = e, this.json = this, this.ids = 0, this.acks = {}, this.receiveBuffer = [], this.sendBuffer = [], this.connected = !1, this.disconnected = !0, r && r.query && (this.query = r.query), this.io.autoConnect && this.open();
    }var o = r(8),
        i = r(3),
        s = r(50),
        a = r(18),
        c = r(10),
        u = r(1)("socket.io-client:socket"),
        h = r(13);t.exports = n;var p = { connect: 1, connect_error: 1, connect_timeout: 1, connecting: 1, disconnect: 1, error: 1, reconnect: 1, reconnect_attempt: 1, reconnect_failed: 1, reconnect_error: 1, reconnecting: 1, ping: 1, pong: 1 },
        f = i.prototype.emit;i(n.prototype), n.prototype.subEvents = function () {
      if (!this.subs) {
        var t = this.io;this.subs = [a(t, "open", c(this, "onopen")), a(t, "packet", c(this, "onpacket")), a(t, "close", c(this, "onclose"))];
      }
    }, n.prototype.open = n.prototype.connect = function () {
      return this.connected ? this : (this.subEvents(), this.io.open(), "open" === this.io.readyState && this.onopen(), this.emit("connecting"), this);
    }, n.prototype.send = function () {
      var t = s(arguments);return t.unshift("message"), this.emit.apply(this, t), this;
    }, n.prototype.emit = function (t) {
      if (p.hasOwnProperty(t)) return f.apply(this, arguments), this;var e = s(arguments),
          r = o.EVENT;h(e) && (r = o.BINARY_EVENT);var n = { type: r, data: e };return n.options = {}, n.options.compress = !this.flags || !1 !== this.flags.compress, "function" == typeof e[e.length - 1] && (u("emitting packet with ack id %d", this.ids), this.acks[this.ids] = e.pop(), n.id = this.ids++), this.connected ? this.packet(n) : this.sendBuffer.push(n), delete this.flags, this;
    }, n.prototype.packet = function (t) {
      t.nsp = this.nsp, this.io.packet(t);
    }, n.prototype.onopen = function () {
      u("transport is open - connecting"), "/" !== this.nsp && (this.query ? this.packet({ type: o.CONNECT, query: this.query }) : this.packet({ type: o.CONNECT }));
    }, n.prototype.onclose = function (t) {
      u("close (%s)", t), this.connected = !1, this.disconnected = !0, delete this.id, this.emit("disconnect", t);
    }, n.prototype.onpacket = function (t) {
      if (t.nsp === this.nsp) switch (t.type) {case o.CONNECT:
          this.onconnect();break;case o.EVENT:case o.BINARY_EVENT:
          this.onevent(t);break;case o.ACK:case o.BINARY_ACK:
          this.onack(t);break;case o.DISCONNECT:
          this.ondisconnect();break;case o.ERROR:
          this.emit("error", t.data);}
    }, n.prototype.onevent = function (t) {
      var e = t.data || [];u("emitting event %j", e), null != t.id && (u("attaching ack callback to event"), e.push(this.ack(t.id))), this.connected ? f.apply(this, e) : this.receiveBuffer.push(e);
    }, n.prototype.ack = function (t) {
      var e = this,
          r = !1;return function () {
        if (!r) {
          r = !0;var n = s(arguments);u("sending ack %j", n);var i = h(n) ? o.BINARY_ACK : o.ACK;e.packet({ type: i, id: t, data: n });
        }
      };
    }, n.prototype.onack = function (t) {
      var e = this.acks[t.id];"function" == typeof e ? (u("calling ack %s with %j", t.id, t.data), e.apply(this, t.data), delete this.acks[t.id]) : u("bad ack %s", t.id);
    }, n.prototype.onconnect = function () {
      this.connected = !0, this.disconnected = !1, this.emit("connect"), this.emitBuffered();
    }, n.prototype.emitBuffered = function () {
      var t;for (t = 0; t < this.receiveBuffer.length; t++) {
        f.apply(this, this.receiveBuffer[t]);
      }for (this.receiveBuffer = [], t = 0; t < this.sendBuffer.length; t++) {
        this.packet(this.sendBuffer[t]);
      }this.sendBuffer = [];
    }, n.prototype.ondisconnect = function () {
      u("server disconnect (%s)", this.nsp), this.destroy(), this.onclose("io server disconnect");
    }, n.prototype.destroy = function () {
      if (this.subs) {
        for (var t = 0; t < this.subs.length; t++) {
          this.subs[t].destroy();
        }this.subs = null;
      }this.io.destroy(this);
    }, n.prototype.close = n.prototype.disconnect = function () {
      return this.connected && (u("performing disconnect (%s)", this.nsp), this.packet({ type: o.DISCONNECT })), this.destroy(), this.connected && this.onclose("io client disconnect"), this;
    }, n.prototype.compress = function (t) {
      return this.flags = this.flags || {}, this.flags.compress = t, this;
    };
  }, function (t, e, r) {
    (function (e) {
      function r(t) {
        return e.Buffer && e.Buffer.isBuffer(t) || e.ArrayBuffer && t instanceof ArrayBuffer;
      }t.exports = r;
    }).call(e, r(0));
  }, function (t, e) {
    t.exports = function (t) {
      return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", { enumerable: !0, get: function get() {
          return t.l;
        } }), Object.defineProperty(t, "id", { enumerable: !0, get: function get() {
          return t.i;
        } }), t.webpackPolyfill = 1), t;
    };
  }, function (t, e, r) {
    "use strict";
    function n(t) {
      var e = "";do {
        e = a[t % c] + e, t = Math.floor(t / c);
      } while (t > 0);return e;
    }function o(t) {
      var e = 0;for (p = 0; p < t.length; p++) {
        e = e * c + u[t.charAt(p)];
      }return e;
    }function i() {
      var t = n(+new Date());return t !== s ? (h = 0, s = t) : t + "." + n(h++);
    }for (var s, a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""), c = 64, u = {}, h = 0, p = 0; p < c; p++) {
      u[a[p]] = p;
    }i.encode = n, i.decode = o, t.exports = i;
  }, function (t, e, r) {
    "use strict";
    function n(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = r(26),
        i = n(o),
        s = r(9),
        a = n(s);e.default = { install: function install(t, e, r) {
        if (!e) throw new Error("[Vue-Socket.io] cannot locate connection");var n = new i.default(e, r);t.prototype.$socket = n.Socket, t.mixin({ created: function created() {
            var t = this,
                e = this.$options.sockets;this.$options.sockets = new Proxy({}, { set: function set(e, r, n) {
                return a.default.addListener(r, n, t), e[r] = n, !0;
              }, deleteProperty: function deleteProperty(e, r) {
                return a.default.removeListener(r, t.$options.sockets[r], t), delete e.key, !0;
              } }), e && Object.keys(e).forEach(function (r) {
              t.$options.sockets[r] = e[r];
            });
          }, beforeDestroy: function beforeDestroy() {
            var t = this,
                e = this.$options.sockets;e && Object.keys(e).forEach(function (e) {
              delete t.$options.sockets[e];
            });
          } });
      } };
  }, function (t, e) {
    function r(t, e, r) {
      function o(t, n) {
        if (o.count <= 0) throw new Error("after called too many times");--o.count, t ? (i = !0, e(t), e = r) : 0 !== o.count || i || e(null, n);
      }var i = !1;return r = r || n, o.count = t, 0 === t ? e() : o;
    }function n() {}t.exports = r;
  }, function (t, e) {
    t.exports = function (t, e, r) {
      var n = t.byteLength;if (e = e || 0, r = r || n, t.slice) return t.slice(e, r);if (e < 0 && (e += n), r < 0 && (r += n), r > n && (r = n), e >= n || e >= r || 0 === n) return new ArrayBuffer(0);for (var o = new Uint8Array(t), i = new Uint8Array(r - e), s = e, a = 0; s < r; s++, a++) {
        i[a] = o[s];
      }return i.buffer;
    };
  }, function (t, e, r) {
    "use strict";
    function n(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t, e) {
      if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }Object.defineProperty(e, "__esModule", { value: !0 });var i = function () {
      function t(t, e) {
        for (var r = 0; r < e.length; r++) {
          var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
        }
      }return function (e, r, n) {
        return r && t(e.prototype, r), n && t(e, n), e;
      };
    }(),
        s = r(9),
        a = n(s),
        c = r(43),
        u = n(c),
        h = function () {
      function t(e, r) {
        o(this, t), this.Socket = "string" == typeof e ? (0, u.default)(e) : e, r && (this.store = r), this.onEvent();
      }return i(t, [{ key: "onEvent", value: function value() {
          var t = this;this.Socket.onevent = function (e) {
            a.default.emit(e.data[0], e.data[1]), t.store && t.passToStore("SOCKET_" + e.data[0], e.data[1]);
          };var e = this;["connect", "error", "disconnect", "reconnect", "reconnect_attempt", "reconnecting", "reconnect_error", "reconnect_failed", "connect_error", "connect_timeout", "connecting", "ping", "pong"].forEach(function (t) {
            e.Socket.on(t, function (r) {
              a.default.emit(t, r), e.store && e.passToStore("SOCKET_" + t, r);
            });
          });
        } }, { key: "passToStore", value: function value(t, e) {
          if (t.startsWith("SOCKET_")) {
            for (var r in this.store._mutations) {
              r.split("/").pop() === t.toUpperCase() && this.store.commit(r, e);
            }for (var n in this.store._actions) {
              var o = n.split("/").pop();if (o.startsWith("socket_")) {
                o === "socket_" + t.replace("SOCKET_", "").replace(/^([A-Z])|[\W\s_]+(\w)/g, function (t, e, r) {
                  return r ? r.toUpperCase() : e.toLowerCase();
                }) && this.store.dispatch(n, e);
              }
            }
          }
        } }]), t;
    }();e.default = h;
  }, function (t, e) {
    function r(t) {
      t = t || {}, this.ms = t.min || 100, this.max = t.max || 1e4, this.factor = t.factor || 2, this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0, this.attempts = 0;
    }t.exports = r, r.prototype.duration = function () {
      var t = this.ms * Math.pow(this.factor, this.attempts++);if (this.jitter) {
        var e = Math.random(),
            r = Math.floor(e * this.jitter * t);t = 0 == (1 & Math.floor(10 * e)) ? t - r : t + r;
      }return 0 | Math.min(t, this.max);
    }, r.prototype.reset = function () {
      this.attempts = 0;
    }, r.prototype.setMin = function (t) {
      this.ms = t;
    }, r.prototype.setMax = function (t) {
      this.max = t;
    }, r.prototype.setJitter = function (t) {
      this.jitter = t;
    };
  }, function (t, e) {
    !function () {
      "use strict";
      for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r = new Uint8Array(256), n = 0; n < t.length; n++) {
        r[t.charCodeAt(n)] = n;
      }e.encode = function (e) {
        var r,
            n = new Uint8Array(e),
            o = n.length,
            i = "";for (r = 0; r < o; r += 3) {
          i += t[n[r] >> 2], i += t[(3 & n[r]) << 4 | n[r + 1] >> 4], i += t[(15 & n[r + 1]) << 2 | n[r + 2] >> 6], i += t[63 & n[r + 2]];
        }return o % 3 == 2 ? i = i.substring(0, i.length - 1) + "=" : o % 3 == 1 && (i = i.substring(0, i.length - 2) + "=="), i;
      }, e.decode = function (t) {
        var e,
            n,
            o,
            i,
            s,
            a = .75 * t.length,
            c = t.length,
            u = 0;"=" === t[t.length - 1] && (a--, "=" === t[t.length - 2] && a--);var h = new ArrayBuffer(a),
            p = new Uint8Array(h);for (e = 0; e < c; e += 4) {
          n = r[t.charCodeAt(e)], o = r[t.charCodeAt(e + 1)], i = r[t.charCodeAt(e + 2)], s = r[t.charCodeAt(e + 3)], p[u++] = n << 2 | o >> 4, p[u++] = (15 & o) << 4 | i >> 2, p[u++] = (3 & i) << 6 | 63 & s;
        }return h;
      };
    }();
  }, function (t, e, r) {
    (function (e) {
      function r(t) {
        for (var e = 0; e < t.length; e++) {
          var r = t[e];if (r.buffer instanceof ArrayBuffer) {
            var n = r.buffer;if (r.byteLength !== n.byteLength) {
              var o = new Uint8Array(r.byteLength);o.set(new Uint8Array(n, r.byteOffset, r.byteLength)), n = o.buffer;
            }t[e] = n;
          }
        }
      }function n(t, e) {
        e = e || {};var n = new i();r(t);for (var o = 0; o < t.length; o++) {
          n.append(t[o]);
        }return e.type ? n.getBlob(e.type) : n.getBlob();
      }function o(t, e) {
        return r(t), new Blob(t, e || {});
      }var i = e.BlobBuilder || e.WebKitBlobBuilder || e.MSBlobBuilder || e.MozBlobBuilder,
          s = function () {
        try {
          return 2 === new Blob(["hi"]).size;
        } catch (t) {
          return !1;
        }
      }(),
          a = s && function () {
        try {
          return 2 === new Blob([new Uint8Array([1, 2])]).size;
        } catch (t) {
          return !1;
        }
      }(),
          c = i && i.prototype.append && i.prototype.getBlob;t.exports = function () {
        return s ? a ? e.Blob : o : c ? n : void 0;
      }();
    }).call(e, r(0));
  }, function (t, e, r) {
    function n() {
      return e.colors[h++ % e.colors.length];
    }function o(t) {
      function r() {}function o() {
        var t = o,
            r = +new Date(),
            i = r - (u || r);t.diff = i, t.prev = u, t.curr = r, u = r, null == t.useColors && (t.useColors = e.useColors()), null == t.color && t.useColors && (t.color = n());for (var s = new Array(arguments.length), a = 0; a < s.length; a++) {
          s[a] = arguments[a];
        }s[0] = e.coerce(s[0]), "string" != typeof s[0] && (s = ["%o"].concat(s));var c = 0;s[0] = s[0].replace(/%([a-z%])/g, function (r, n) {
          if ("%%" === r) return r;c++;var o = e.formatters[n];if ("function" == typeof o) {
            var i = s[c];r = o.call(t, i), s.splice(c, 1), c--;
          }return r;
        }), s = e.formatArgs.apply(t, s), (o.log || e.log || console.log.bind(console)).apply(t, s);
      }r.enabled = !1, o.enabled = !0;var i = e.enabled(t) ? o : r;return i.namespace = t, i;
    }function i(t) {
      e.save(t);for (var r = (t || "").split(/[\s,]+/), n = r.length, o = 0; o < n; o++) {
        r[o] && (t = r[o].replace(/[\\^$+?.()|[\]{}]/g, "\\$&").replace(/\*/g, ".*?"), "-" === t[0] ? e.skips.push(new RegExp("^" + t.substr(1) + "$")) : e.names.push(new RegExp("^" + t + "$")));
      }
    }function s() {
      e.enable("");
    }function a(t) {
      var r, n;for (r = 0, n = e.skips.length; r < n; r++) {
        if (e.skips[r].test(t)) return !1;
      }for (r = 0, n = e.names.length; r < n; r++) {
        if (e.names[r].test(t)) return !0;
      }return !1;
    }function c(t) {
      return t instanceof Error ? t.stack || t.message : t;
    }e = t.exports = o.debug = o, e.coerce = c, e.disable = s, e.enable = i, e.enabled = a, e.humanize = r(40), e.names = [], e.skips = [], e.formatters = {};var u,
        h = 0;
  }, function (t, e, r) {
    t.exports = r(32);
  }, function (t, e, r) {
    t.exports = r(33), t.exports.parser = r(2);
  }, function (t, e, r) {
    (function (e) {
      function n(t, r) {
        if (!(this instanceof n)) return new n(t, r);r = r || {}, t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (r = t, t = null), t ? (t = h(t), r.hostname = t.host, r.secure = "https" === t.protocol || "wss" === t.protocol, r.port = t.port, t.query && (r.query = t.query)) : r.host && (r.hostname = h(r.host).host), this.secure = null != r.secure ? r.secure : e.location && "https:" === location.protocol, r.hostname && !r.port && (r.port = this.secure ? "443" : "80"), this.agent = r.agent || !1, this.hostname = r.hostname || (e.location ? location.hostname : "localhost"), this.port = r.port || (e.location && location.port ? location.port : this.secure ? 443 : 80), this.query = r.query || {}, "string" == typeof this.query && (this.query = f.decode(this.query)), this.upgrade = !1 !== r.upgrade, this.path = (r.path || "/engine.io").replace(/\/$/, "") + "/", this.forceJSONP = !!r.forceJSONP, this.jsonp = !1 !== r.jsonp, this.forceBase64 = !!r.forceBase64, this.enablesXDR = !!r.enablesXDR, this.timestampParam = r.timestampParam || "t", this.timestampRequests = r.timestampRequests, this.transports = r.transports || ["polling", "websocket"], this.readyState = "", this.writeBuffer = [], this.prevBufferLen = 0, this.policyPort = r.policyPort || 843, this.rememberUpgrade = r.rememberUpgrade || !1, this.binaryType = null, this.onlyBinaryUpgrades = r.onlyBinaryUpgrades, this.perMessageDeflate = !1 !== r.perMessageDeflate && (r.perMessageDeflate || {}), !0 === this.perMessageDeflate && (this.perMessageDeflate = {}), this.perMessageDeflate && null == this.perMessageDeflate.threshold && (this.perMessageDeflate.threshold = 1024), this.pfx = r.pfx || null, this.key = r.key || null, this.passphrase = r.passphrase || null, this.cert = r.cert || null, this.ca = r.ca || null, this.ciphers = r.ciphers || null, this.rejectUnauthorized = void 0 === r.rejectUnauthorized ? null : r.rejectUnauthorized, this.forceNode = !!r.forceNode;var o = "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && e;o.global === o && (r.extraHeaders && Object.keys(r.extraHeaders).length > 0 && (this.extraHeaders = r.extraHeaders), r.localAddress && (this.localAddress = r.localAddress)), this.id = null, this.upgrades = null, this.pingInterval = null, this.pingTimeout = null, this.pingIntervalTimer = null, this.pingTimeoutTimer = null, this.open();
      }function o(t) {
        var e = {};for (var r in t) {
          t.hasOwnProperty(r) && (e[r] = t[r]);
        }return e;
      }var i = r(11),
          s = r(3),
          a = r(1)("engine.io-client:socket"),
          c = r(14),
          u = r(2),
          h = r(16),
          p = r(41),
          f = r(7);t.exports = n, n.priorWebsocketSuccess = !1, s(n.prototype), n.protocol = u.protocol, n.Socket = n, n.Transport = r(5), n.transports = r(11), n.parser = r(2), n.prototype.createTransport = function (t) {
        a('creating transport "%s"', t);var e = o(this.query);return e.EIO = u.protocol, e.transport = t, this.id && (e.sid = this.id), new i[t]({ agent: this.agent, hostname: this.hostname, port: this.port, secure: this.secure, path: this.path, query: e, forceJSONP: this.forceJSONP, jsonp: this.jsonp, forceBase64: this.forceBase64, enablesXDR: this.enablesXDR, timestampRequests: this.timestampRequests, timestampParam: this.timestampParam, policyPort: this.policyPort, socket: this, pfx: this.pfx, key: this.key, passphrase: this.passphrase, cert: this.cert, ca: this.ca, ciphers: this.ciphers, rejectUnauthorized: this.rejectUnauthorized, perMessageDeflate: this.perMessageDeflate, extraHeaders: this.extraHeaders, forceNode: this.forceNode, localAddress: this.localAddress });
      }, n.prototype.open = function () {
        var t;if (this.rememberUpgrade && n.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) t = "websocket";else {
          if (0 === this.transports.length) {
            var e = this;return void setTimeout(function () {
              e.emit("error", "No transports available");
            }, 0);
          }t = this.transports[0];
        }this.readyState = "opening";try {
          t = this.createTransport(t);
        } catch (t) {
          return this.transports.shift(), void this.open();
        }t.open(), this.setTransport(t);
      }, n.prototype.setTransport = function (t) {
        a("setting transport %s", t.name);var e = this;this.transport && (a("clearing existing transport %s", this.transport.name), this.transport.removeAllListeners()), this.transport = t, t.on("drain", function () {
          e.onDrain();
        }).on("packet", function (t) {
          e.onPacket(t);
        }).on("error", function (t) {
          e.onError(t);
        }).on("close", function () {
          e.onClose("transport close");
        });
      }, n.prototype.probe = function (t) {
        function e() {
          if (f.onlyBinaryUpgrades) {
            var e = !this.supportsBinary && f.transport.supportsBinary;p = p || e;
          }p || (a('probe transport "%s" opened', t), h.send([{ type: "ping", data: "probe" }]), h.once("packet", function (e) {
            if (!p) if ("pong" === e.type && "probe" === e.data) {
              if (a('probe transport "%s" pong', t), f.upgrading = !0, f.emit("upgrading", h), !h) return;n.priorWebsocketSuccess = "websocket" === h.name, a('pausing current transport "%s"', f.transport.name), f.transport.pause(function () {
                p || "closed" !== f.readyState && (a("changing transport and sending upgrade packet"), u(), f.setTransport(h), h.send([{ type: "upgrade" }]), f.emit("upgrade", h), h = null, f.upgrading = !1, f.flush());
              });
            } else {
              a('probe transport "%s" failed', t);var r = new Error("probe error");r.transport = h.name, f.emit("upgradeError", r);
            }
          }));
        }function r() {
          p || (p = !0, u(), h.close(), h = null);
        }function o(e) {
          var n = new Error("probe error: " + e);n.transport = h.name, r(), a('probe transport "%s" failed because of error: %s', t, e), f.emit("upgradeError", n);
        }function i() {
          o("transport closed");
        }function s() {
          o("socket closed");
        }function c(t) {
          h && t.name !== h.name && (a('"%s" works - aborting "%s"', t.name, h.name), r());
        }function u() {
          h.removeListener("open", e), h.removeListener("error", o), h.removeListener("close", i), f.removeListener("close", s), f.removeListener("upgrading", c);
        }a('probing transport "%s"', t);var h = this.createTransport(t, { probe: 1 }),
            p = !1,
            f = this;n.priorWebsocketSuccess = !1, h.once("open", e), h.once("error", o), h.once("close", i), this.once("close", s), this.once("upgrading", c), h.open();
      }, n.prototype.onOpen = function () {
        if (a("socket open"), this.readyState = "open", n.priorWebsocketSuccess = "websocket" === this.transport.name, this.emit("open"), this.flush(), "open" === this.readyState && this.upgrade && this.transport.pause) {
          a("starting upgrade probes");for (var t = 0, e = this.upgrades.length; t < e; t++) {
            this.probe(this.upgrades[t]);
          }
        }
      }, n.prototype.onPacket = function (t) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) switch (a('socket receive: type "%s", data "%s"', t.type, t.data), this.emit("packet", t), this.emit("heartbeat"), t.type) {case "open":
            this.onHandshake(p(t.data));break;case "pong":
            this.setPing(), this.emit("pong");break;case "error":
            var e = new Error("server error");e.code = t.data, this.onError(e);break;case "message":
            this.emit("data", t.data), this.emit("message", t.data);} else a('packet received with socket readyState "%s"', this.readyState);
      }, n.prototype.onHandshake = function (t) {
        this.emit("handshake", t), this.id = t.sid, this.transport.query.sid = t.sid, this.upgrades = this.filterUpgrades(t.upgrades), this.pingInterval = t.pingInterval, this.pingTimeout = t.pingTimeout, this.onOpen(), "closed" !== this.readyState && (this.setPing(), this.removeListener("heartbeat", this.onHeartbeat), this.on("heartbeat", this.onHeartbeat));
      }, n.prototype.onHeartbeat = function (t) {
        clearTimeout(this.pingTimeoutTimer);var e = this;e.pingTimeoutTimer = setTimeout(function () {
          "closed" !== e.readyState && e.onClose("ping timeout");
        }, t || e.pingInterval + e.pingTimeout);
      }, n.prototype.setPing = function () {
        var t = this;clearTimeout(t.pingIntervalTimer), t.pingIntervalTimer = setTimeout(function () {
          a("writing ping packet - expecting pong within %sms", t.pingTimeout), t.ping(), t.onHeartbeat(t.pingTimeout);
        }, t.pingInterval);
      }, n.prototype.ping = function () {
        var t = this;this.sendPacket("ping", function () {
          t.emit("ping");
        });
      }, n.prototype.onDrain = function () {
        this.writeBuffer.splice(0, this.prevBufferLen), this.prevBufferLen = 0, 0 === this.writeBuffer.length ? this.emit("drain") : this.flush();
      }, n.prototype.flush = function () {
        "closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length && (a("flushing %d packets in socket", this.writeBuffer.length), this.transport.send(this.writeBuffer), this.prevBufferLen = this.writeBuffer.length, this.emit("flush"));
      }, n.prototype.write = n.prototype.send = function (t, e, r) {
        return this.sendPacket("message", t, e, r), this;
      }, n.prototype.sendPacket = function (t, e, r, n) {
        if ("function" == typeof e && (n = e, e = void 0), "function" == typeof r && (n = r, r = null), "closing" !== this.readyState && "closed" !== this.readyState) {
          r = r || {}, r.compress = !1 !== r.compress;var o = { type: t, data: e, options: r };this.emit("packetCreate", o), this.writeBuffer.push(o), n && this.once("flush", n), this.flush();
        }
      }, n.prototype.close = function () {
        function t() {
          n.onClose("forced close"), a("socket closing - telling transport to close"), n.transport.close();
        }function e() {
          n.removeListener("upgrade", e), n.removeListener("upgradeError", e), t();
        }function r() {
          n.once("upgrade", e), n.once("upgradeError", e);
        }if ("opening" === this.readyState || "open" === this.readyState) {
          this.readyState = "closing";var n = this;this.writeBuffer.length ? this.once("drain", function () {
            this.upgrading ? r() : t();
          }) : this.upgrading ? r() : t();
        }return this;
      }, n.prototype.onError = function (t) {
        a("socket error %j", t), n.priorWebsocketSuccess = !1, this.emit("error", t), this.onClose("transport error", t);
      }, n.prototype.onClose = function (t, e) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          a('socket close with reason: "%s"', t);var r = this;clearTimeout(this.pingIntervalTimer), clearTimeout(this.pingTimeoutTimer), this.transport.removeAllListeners("close"), this.transport.close(), this.transport.removeAllListeners(), this.readyState = "closed", this.id = null, this.emit("close", t, e), r.writeBuffer = [], r.prevBufferLen = 0;
        }
      }, n.prototype.filterUpgrades = function (t) {
        for (var e = [], r = 0, n = t.length; r < n; r++) {
          ~c(this.transports, t[r]) && e.push(t[r]);
        }return e;
      };
    }).call(e, r(0));
  }, function (t, e, r) {
    (function (e) {
      function n() {}function o(t) {
        i.call(this, t), this.query = this.query || {}, a || (e.___eio || (e.___eio = []), a = e.___eio), this.index = a.length;var r = this;a.push(function (t) {
          r.onData(t);
        }), this.query.j = this.index, e.document && e.addEventListener && e.addEventListener("beforeunload", function () {
          r.script && (r.script.onerror = n);
        }, !1);
      }var i = r(12),
          s = r(4);t.exports = o;var a;s(o, i), o.prototype.supportsBinary = !1, o.prototype.doClose = function () {
        this.script && (this.script.parentNode.removeChild(this.script), this.script = null), this.form && (this.form.parentNode.removeChild(this.form), this.form = null, this.iframe = null), i.prototype.doClose.call(this);
      }, o.prototype.doPoll = function () {
        var t = this,
            e = document.createElement("script");this.script && (this.script.parentNode.removeChild(this.script), this.script = null), e.async = !0, e.src = this.uri(), e.onerror = function (e) {
          t.onError("jsonp poll error", e);
        };var r = document.getElementsByTagName("script")[0];r ? r.parentNode.insertBefore(e, r) : (document.head || document.body).appendChild(e), this.script = e, "undefined" != typeof navigator && /gecko/i.test(navigator.userAgent) && setTimeout(function () {
          var t = document.createElement("iframe");document.body.appendChild(t), document.body.removeChild(t);
        }, 100);
      }, o.prototype.doWrite = function (t, e) {
        function r() {
          n(), e();
        }function n() {
          if (o.iframe) try {
            o.form.removeChild(o.iframe);
          } catch (t) {
            o.onError("jsonp polling iframe removal error", t);
          }try {
            var t = '<iframe src="javascript:0" name="' + o.iframeId + '">';i = document.createElement(t);
          } catch (t) {
            i = document.createElement("iframe"), i.name = o.iframeId, i.src = "javascript:0";
          }i.id = o.iframeId, o.form.appendChild(i), o.iframe = i;
        }var o = this;if (!this.form) {
          var i,
              s = document.createElement("form"),
              a = document.createElement("textarea"),
              c = this.iframeId = "eio_iframe_" + this.index;s.className = "socketio", s.style.position = "absolute", s.style.top = "-1000px", s.style.left = "-1000px", s.target = c, s.method = "POST", s.setAttribute("accept-charset", "utf-8"), a.name = "d", s.appendChild(a), document.body.appendChild(s), this.form = s, this.area = a;
        }this.form.action = this.uri(), n(), t = t.replace(/\\n/g, "\\\n"), this.area.value = t.replace(/\n/g, "\\n");try {
          this.form.submit();
        } catch (t) {}this.iframe.attachEvent ? this.iframe.onreadystatechange = function () {
          "complete" === o.iframe.readyState && r();
        } : this.iframe.onload = r;
      };
    }).call(e, r(0));
  }, function (t, e, r) {
    (function (e) {
      function n() {}function o(t) {
        if (c.call(this, t), this.requestTimeout = t.requestTimeout, e.location) {
          var r = "https:" === location.protocol,
              n = location.port;n || (n = r ? 443 : 80), this.xd = t.hostname !== e.location.hostname || n !== t.port, this.xs = t.secure !== r;
        } else this.extraHeaders = t.extraHeaders;
      }function i(t) {
        this.method = t.method || "GET", this.uri = t.uri, this.xd = !!t.xd, this.xs = !!t.xs, this.async = !1 !== t.async, this.data = void 0 !== t.data ? t.data : null, this.agent = t.agent, this.isBinary = t.isBinary, this.supportsBinary = t.supportsBinary, this.enablesXDR = t.enablesXDR, this.requestTimeout = t.requestTimeout, this.pfx = t.pfx, this.key = t.key, this.passphrase = t.passphrase, this.cert = t.cert, this.ca = t.ca, this.ciphers = t.ciphers, this.rejectUnauthorized = t.rejectUnauthorized, this.extraHeaders = t.extraHeaders, this.create();
      }function s() {
        for (var t in i.requests) {
          i.requests.hasOwnProperty(t) && i.requests[t].abort();
        }
      }var a = r(6),
          c = r(12),
          u = r(3),
          h = r(4),
          p = r(1)("engine.io-client:polling-xhr");t.exports = o, t.exports.Request = i, h(o, c), o.prototype.supportsBinary = !0, o.prototype.request = function (t) {
        return t = t || {}, t.uri = this.uri(), t.xd = this.xd, t.xs = this.xs, t.agent = this.agent || !1, t.supportsBinary = this.supportsBinary, t.enablesXDR = this.enablesXDR, t.pfx = this.pfx, t.key = this.key, t.passphrase = this.passphrase, t.cert = this.cert, t.ca = this.ca, t.ciphers = this.ciphers, t.rejectUnauthorized = this.rejectUnauthorized, t.requestTimeout = this.requestTimeout, t.extraHeaders = this.extraHeaders, new i(t);
      }, o.prototype.doWrite = function (t, e) {
        var r = "string" != typeof t && void 0 !== t,
            n = this.request({ method: "POST", data: t, isBinary: r }),
            o = this;n.on("success", e), n.on("error", function (t) {
          o.onError("xhr post error", t);
        }), this.sendXhr = n;
      }, o.prototype.doPoll = function () {
        p("xhr poll");var t = this.request(),
            e = this;t.on("data", function (t) {
          e.onData(t);
        }), t.on("error", function (t) {
          e.onError("xhr poll error", t);
        }), this.pollXhr = t;
      }, u(i.prototype), i.prototype.create = function () {
        var t = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };t.pfx = this.pfx, t.key = this.key, t.passphrase = this.passphrase, t.cert = this.cert, t.ca = this.ca, t.ciphers = this.ciphers, t.rejectUnauthorized = this.rejectUnauthorized;var r = this.xhr = new a(t),
            n = this;try {
          p("xhr open %s: %s", this.method, this.uri), r.open(this.method, this.uri, this.async);try {
            if (this.extraHeaders) {
              r.setDisableHeaderCheck(!0);for (var o in this.extraHeaders) {
                this.extraHeaders.hasOwnProperty(o) && r.setRequestHeader(o, this.extraHeaders[o]);
              }
            }
          } catch (t) {}if (this.supportsBinary && (r.responseType = "arraybuffer"), "POST" === this.method) try {
            this.isBinary ? r.setRequestHeader("Content-type", "application/octet-stream") : r.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
          } catch (t) {}try {
            r.setRequestHeader("Accept", "*/*");
          } catch (t) {}"withCredentials" in r && (r.withCredentials = !0), this.requestTimeout && (r.timeout = this.requestTimeout), this.hasXDR() ? (r.onload = function () {
            n.onLoad();
          }, r.onerror = function () {
            n.onError(r.responseText);
          }) : r.onreadystatechange = function () {
            4 === r.readyState && (200 === r.status || 1223 === r.status ? n.onLoad() : setTimeout(function () {
              n.onError(r.status);
            }, 0));
          }, p("xhr data %s", this.data), r.send(this.data);
        } catch (t) {
          return void setTimeout(function () {
            n.onError(t);
          }, 0);
        }e.document && (this.index = i.requestsCount++, i.requests[this.index] = this);
      }, i.prototype.onSuccess = function () {
        this.emit("success"), this.cleanup();
      }, i.prototype.onData = function (t) {
        this.emit("data", t), this.onSuccess();
      }, i.prototype.onError = function (t) {
        this.emit("error", t), this.cleanup(!0);
      }, i.prototype.cleanup = function (t) {
        if (void 0 !== this.xhr && null !== this.xhr) {
          if (this.hasXDR() ? this.xhr.onload = this.xhr.onerror = n : this.xhr.onreadystatechange = n, t) try {
            this.xhr.abort();
          } catch (t) {}e.document && delete i.requests[this.index], this.xhr = null;
        }
      }, i.prototype.onLoad = function () {
        var t;try {
          var e;try {
            e = this.xhr.getResponseHeader("Content-Type").split(";")[0];
          } catch (t) {}if ("application/octet-stream" === e) t = this.xhr.response || this.xhr.responseText;else if (this.supportsBinary) try {
            t = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
          } catch (e) {
            for (var r = new Uint8Array(this.xhr.response), n = [], o = 0, i = r.length; o < i; o++) {
              n.push(r[o]);
            }t = String.fromCharCode.apply(null, n);
          } else t = this.xhr.responseText;
        } catch (t) {
          this.onError(t);
        }null != t && this.onData(t);
      }, i.prototype.hasXDR = function () {
        return void 0 !== e.XDomainRequest && !this.xs && this.enablesXDR;
      }, i.prototype.abort = function () {
        this.cleanup();
      }, i.requestsCount = 0, i.requests = {}, e.document && (e.attachEvent ? e.attachEvent("onunload", s) : e.addEventListener && e.addEventListener("beforeunload", s, !1));
    }).call(e, r(0));
  }, function (t, e, r) {
    (function (e) {
      function n(t) {
        t && t.forceBase64 && (this.supportsBinary = !1), this.perMessageDeflate = t.perMessageDeflate, this.usingBrowserWebSocket = p && !t.forceNode, this.usingBrowserWebSocket || (f = o), i.call(this, t);
      }var o,
          i = r(5),
          s = r(2),
          a = r(7),
          c = r(4),
          u = r(22),
          h = r(1)("engine.io-client:websocket"),
          p = e.WebSocket || e.MozWebSocket;if ("undefined" == typeof window) try {
        o = r(53);
      } catch (t) {}var f = p;f || "undefined" != typeof window || (f = o), t.exports = n, c(n, i), n.prototype.name = "websocket", n.prototype.supportsBinary = !0, n.prototype.doOpen = function () {
        if (this.check()) {
          var t = this.uri(),
              e = { agent: this.agent, perMessageDeflate: this.perMessageDeflate };e.pfx = this.pfx, e.key = this.key, e.passphrase = this.passphrase, e.cert = this.cert, e.ca = this.ca, e.ciphers = this.ciphers, e.rejectUnauthorized = this.rejectUnauthorized, this.extraHeaders && (e.headers = this.extraHeaders), this.localAddress && (e.localAddress = this.localAddress);try {
            this.ws = this.usingBrowserWebSocket ? new f(t) : new f(t, void 0, e);
          } catch (t) {
            return this.emit("error", t);
          }void 0 === this.ws.binaryType && (this.supportsBinary = !1), this.ws.supports && this.ws.supports.binary ? (this.supportsBinary = !0, this.ws.binaryType = "nodebuffer") : this.ws.binaryType = "arraybuffer", this.addEventListeners();
        }
      }, n.prototype.addEventListeners = function () {
        var t = this;this.ws.onopen = function () {
          t.onOpen();
        }, this.ws.onclose = function () {
          t.onClose();
        }, this.ws.onmessage = function (e) {
          t.onData(e.data);
        }, this.ws.onerror = function (e) {
          t.onError("websocket error", e);
        };
      }, n.prototype.write = function (t) {
        function r() {
          n.emit("flush"), setTimeout(function () {
            n.writable = !0, n.emit("drain");
          }, 0);
        }var n = this;this.writable = !1;for (var o = t.length, i = 0, a = o; i < a; i++) {
          !function (t) {
            s.encodePacket(t, n.supportsBinary, function (i) {
              if (!n.usingBrowserWebSocket) {
                var s = {};if (t.options && (s.compress = t.options.compress), n.perMessageDeflate) {
                  ("string" == typeof i ? e.Buffer.byteLength(i) : i.length) < n.perMessageDeflate.threshold && (s.compress = !1);
                }
              }try {
                n.usingBrowserWebSocket ? n.ws.send(i) : n.ws.send(i, s);
              } catch (t) {
                h("websocket closed before onclose event");
              }--o || r();
            });
          }(t[i]);
        }
      }, n.prototype.onClose = function () {
        i.prototype.onClose.call(this);
      }, n.prototype.doClose = function () {
        void 0 !== this.ws && this.ws.close();
      }, n.prototype.uri = function () {
        var t = this.query || {},
            e = this.secure ? "wss" : "ws",
            r = "";return this.port && ("wss" === e && 443 !== Number(this.port) || "ws" === e && 80 !== Number(this.port)) && (r = ":" + this.port), this.timestampRequests && (t[this.timestampParam] = u()), this.supportsBinary || (t.b64 = 1), t = a.encode(t), t.length && (t = "?" + t), e + "://" + (this.hostname.indexOf(":") !== -1 ? "[" + this.hostname + "]" : this.hostname) + r + this.path + t;
      }, n.prototype.check = function () {
        return !(!f || "__initialize" in f && this.name === n.prototype.name);
      };
    }).call(e, r(0));
  }, function (t, e) {
    t.exports = Object.keys || function (t) {
      var e = [],
          r = Object.prototype.hasOwnProperty;for (var n in t) {
        r.call(t, n) && e.push(n);
      }return e;
    };
  }, function (t, e) {
    try {
      t.exports = "undefined" != typeof XMLHttpRequest && "withCredentials" in new XMLHttpRequest();
    } catch (e) {
      t.exports = !1;
    }
  }, function (t, e, r) {
    (function (t, n) {
      var o;(function () {
        function i(t, e) {
          function r(t) {
            if (r[t] !== g) return r[t];var i;if ("bug-string-char-index" == t) i = "a" != "a"[0];else if ("json" == t) i = r("json-stringify") && r("json-parse");else {
              var s,
                  a = "{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";if ("json-stringify" == t) {
                var u = e.stringify,
                    h = "function" == typeof u && b;if (h) {
                  (s = function s() {
                    return 1;
                  }).toJSON = s;try {
                    h = "0" === u(0) && "0" === u(new n()) && '""' == u(new o()) && u(v) === g && u(g) === g && u() === g && "1" === u(s) && "[1]" == u([s]) && "[null]" == u([g]) && "null" == u(null) && "[null,null,null]" == u([g, v, null]) && u({ a: [s, !0, !1, null, "\0\b\n\f\r\t"] }) == a && "1" === u(null, s) && "[\n 1,\n 2\n]" == u([1, 2], null, 1) && '"-271821-04-20T00:00:00.000Z"' == u(new c(-864e13)) && '"+275760-09-13T00:00:00.000Z"' == u(new c(864e13)) && '"-000001-01-01T00:00:00.000Z"' == u(new c(-621987552e5)) && '"1969-12-31T23:59:59.999Z"' == u(new c(-1));
                  } catch (t) {
                    h = !1;
                  }
                }i = h;
              }if ("json-parse" == t) {
                var p = e.parse;if ("function" == typeof p) try {
                  if (0 === p("0") && !p(!1)) {
                    s = p(a);var f = 5 == s.a.length && 1 === s.a[0];if (f) {
                      try {
                        f = !p('"\t"');
                      } catch (t) {}if (f) try {
                        f = 1 !== p("01");
                      } catch (t) {}if (f) try {
                        f = 1 !== p("1.");
                      } catch (t) {}
                    }
                  }
                } catch (t) {
                  f = !1;
                }i = f;
              }
            }return r[t] = !!i;
          }t || (t = u.Object()), e || (e = u.Object());var n = t.Number || u.Number,
              o = t.String || u.String,
              s = t.Object || u.Object,
              c = t.Date || u.Date,
              h = t.SyntaxError || u.SyntaxError,
              p = t.TypeError || u.TypeError,
              f = t.Math || u.Math,
              l = t.JSON || u.JSON;"object" == (typeof l === "undefined" ? "undefined" : _typeof(l)) && l && (e.stringify = l.stringify, e.parse = l.parse);var _d,
              _y,
              g,
              m = s.prototype,
              v = m.toString,
              b = new c(-0xc782b5b800cec);try {
            b = b.getUTCFullYear() == -109252 && 0 === b.getUTCMonth() && 1 === b.getUTCDate() && 10 == b.getUTCHours() && 37 == b.getUTCMinutes() && 6 == b.getUTCSeconds() && 708 == b.getUTCMilliseconds();
          } catch (t) {}if (!r("json")) {
            var k = r("bug-string-char-index");if (!b) var w = f.floor,
                x = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
                A = function A(t, e) {
              return x[e] + 365 * (t - 1970) + w((t - 1969 + (e = +(e > 1))) / 4) - w((t - 1901 + e) / 100) + w((t - 1601 + e) / 400);
            };if ((_d = m.hasOwnProperty) || (_d = function d(t) {
              var e,
                  r = {};return (r.__proto__ = null, r.__proto__ = { toString: 1 }, r).toString != v ? _d = function d(t) {
                var e = this.__proto__,
                    r = t in (this.__proto__ = null, this);return this.__proto__ = e, r;
              } : (e = r.constructor, _d = function d(t) {
                var r = (this.constructor || e).prototype;return t in this && !(t in r && this[t] === r[t]);
              }), r = null, _d.call(this, t);
            }), _y = function y(t, e) {
              var r,
                  n,
                  o,
                  i = 0;(r = function r() {
                this.valueOf = 0;
              }).prototype.valueOf = 0, n = new r();for (o in n) {
                _d.call(n, o) && i++;
              }return r = n = null, i ? _y = 2 == i ? function (t, e) {
                var r,
                    n = {},
                    o = "[object Function]" == v.call(t);for (r in t) {
                  o && "prototype" == r || _d.call(n, r) || !(n[r] = 1) || !_d.call(t, r) || e(r);
                }
              } : function (t, e) {
                var r,
                    n,
                    o = "[object Function]" == v.call(t);for (r in t) {
                  o && "prototype" == r || !_d.call(t, r) || (n = "constructor" === r) || e(r);
                }(n || _d.call(t, r = "constructor")) && e(r);
              } : (n = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"], _y = function y(t, e) {
                var r,
                    o,
                    i = "[object Function]" == v.call(t),
                    s = !i && "function" != typeof t.constructor && a[_typeof(t.hasOwnProperty)] && t.hasOwnProperty || _d;for (r in t) {
                  i && "prototype" == r || !s.call(t, r) || e(r);
                }for (o = n.length; r = n[--o]; s.call(t, r) && e(r)) {}
              }), _y(t, e);
            }, !r("json-stringify")) {
              var C = { 92: "\\\\", 34: '\\"', 8: "\\b", 12: "\\f", 10: "\\n", 13: "\\r", 9: "\\t" },
                  S = function S(t, e) {
                return ("000000" + (e || 0)).slice(-t);
              },
                  B = function B(t) {
                for (var e = '"', r = 0, n = t.length, o = !k || n > 10, i = o && (k ? t.split("") : t); r < n; r++) {
                  var s = t.charCodeAt(r);switch (s) {case 8:case 9:case 10:case 12:case 13:case 34:case 92:
                      e += C[s];break;default:
                      if (s < 32) {
                        e += "\\u00" + S(2, s.toString(16));break;
                      }e += o ? i[r] : t.charAt(r);}
                }return e + '"';
              },
                  T = function T(t, e, r, n, o, i, s) {
                var a, c, u, h, f, l, m, b, k, x, C, E, _, j, O, N;try {
                  a = e[t];
                } catch (t) {}if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && a) if ("[object Date]" != (c = v.call(a)) || _d.call(a, "toJSON")) "function" == typeof a.toJSON && ("[object Number]" != c && "[object String]" != c && "[object Array]" != c || _d.call(a, "toJSON")) && (a = a.toJSON(t));else if (a > -1 / 0 && a < 1 / 0) {
                  if (A) {
                    for (f = w(a / 864e5), u = w(f / 365.2425) + 1970 - 1; A(u + 1, 0) <= f; u++) {}for (h = w((f - A(u, 0)) / 30.42); A(u, h + 1) <= f; h++) {}f = 1 + f - A(u, h), l = (a % 864e5 + 864e5) % 864e5, m = w(l / 36e5) % 24, b = w(l / 6e4) % 60, k = w(l / 1e3) % 60, x = l % 1e3;
                  } else u = a.getUTCFullYear(), h = a.getUTCMonth(), f = a.getUTCDate(), m = a.getUTCHours(), b = a.getUTCMinutes(), k = a.getUTCSeconds(), x = a.getUTCMilliseconds();a = (u <= 0 || u >= 1e4 ? (u < 0 ? "-" : "+") + S(6, u < 0 ? -u : u) : S(4, u)) + "-" + S(2, h + 1) + "-" + S(2, f) + "T" + S(2, m) + ":" + S(2, b) + ":" + S(2, k) + "." + S(3, x) + "Z";
                } else a = null;if (r && (a = r.call(e, t, a)), null === a) return "null";if ("[object Boolean]" == (c = v.call(a))) return "" + a;if ("[object Number]" == c) return a > -1 / 0 && a < 1 / 0 ? "" + a : "null";if ("[object String]" == c) return B("" + a);if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {
                  for (j = s.length; j--;) {
                    if (s[j] === a) throw p();
                  }if (s.push(a), C = [], O = i, i += o, "[object Array]" == c) {
                    for (_ = 0, j = a.length; _ < j; _++) {
                      E = T(_, a, r, n, o, i, s), C.push(E === g ? "null" : E);
                    }N = C.length ? o ? "[\n" + i + C.join(",\n" + i) + "\n" + O + "]" : "[" + C.join(",") + "]" : "[]";
                  } else _y(n || a, function (t) {
                    var e = T(t, a, r, n, o, i, s);e !== g && C.push(B(t) + ":" + (o ? " " : "") + e);
                  }), N = C.length ? o ? "{\n" + i + C.join(",\n" + i) + "\n" + O + "}" : "{" + C.join(",") + "}" : "{}";return s.pop(), N;
                }
              };e.stringify = function (t, e, r) {
                var n, o, i, s;if (a[typeof e === "undefined" ? "undefined" : _typeof(e)] && e) if ("[object Function]" == (s = v.call(e))) o = e;else if ("[object Array]" == s) {
                  i = {};for (var c, u = 0, h = e.length; u < h; c = e[u++], ("[object String]" == (s = v.call(c)) || "[object Number]" == s) && (i[c] = 1)) {}
                }if (r) if ("[object Number]" == (s = v.call(r))) {
                  if ((r -= r % 1) > 0) for (n = "", r > 10 && (r = 10); n.length < r; n += " ") {}
                } else "[object String]" == s && (n = r.length <= 10 ? r : r.slice(0, 10));return T("", (c = {}, c[""] = t, c), o, i, n, "", []);
              };
            }if (!r("json-parse")) {
              var E,
                  _,
                  j = o.fromCharCode,
                  O = { 92: "\\", 34: '"', 47: "/", 98: "\b", 116: "\t", 110: "\n", 102: "\f", 114: "\r" },
                  N = function N() {
                throw E = _ = null, h();
              },
                  P = function P() {
                for (var t, e, r, n, o, i = _, s = i.length; E < s;) {
                  switch (o = i.charCodeAt(E)) {case 9:case 10:case 13:case 32:
                      E++;break;case 123:case 125:case 91:case 93:case 58:case 44:
                      return t = k ? i.charAt(E) : i[E], E++, t;case 34:
                      for (t = "@", E++; E < s;) {
                        if ((o = i.charCodeAt(E)) < 32) N();else if (92 == o) switch (o = i.charCodeAt(++E)) {case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:
                            t += O[o], E++;break;case 117:
                            for (e = ++E, r = E + 4; E < r; E++) {
                              (o = i.charCodeAt(E)) >= 48 && o <= 57 || o >= 97 && o <= 102 || o >= 65 && o <= 70 || N();
                            }t += j("0x" + i.slice(e, E));break;default:
                            N();} else {
                          if (34 == o) break;for (o = i.charCodeAt(E), e = E; o >= 32 && 92 != o && 34 != o;) {
                            o = i.charCodeAt(++E);
                          }t += i.slice(e, E);
                        }
                      }if (34 == i.charCodeAt(E)) return E++, t;N();default:
                      if (e = E, 45 == o && (n = !0, o = i.charCodeAt(++E)), o >= 48 && o <= 57) {
                        for (48 == o && (o = i.charCodeAt(E + 1)) >= 48 && o <= 57 && N(), n = !1; E < s && (o = i.charCodeAt(E)) >= 48 && o <= 57; E++) {}if (46 == i.charCodeAt(E)) {
                          for (r = ++E; r < s && (o = i.charCodeAt(r)) >= 48 && o <= 57; r++) {}r == E && N(), E = r;
                        }if (101 == (o = i.charCodeAt(E)) || 69 == o) {
                          for (o = i.charCodeAt(++E), 43 != o && 45 != o || E++, r = E; r < s && (o = i.charCodeAt(r)) >= 48 && o <= 57; r++) {}r == E && N(), E = r;
                        }return +i.slice(e, E);
                      }if (n && N(), "true" == i.slice(E, E + 4)) return E += 4, !0;if ("false" == i.slice(E, E + 5)) return E += 5, !1;if ("null" == i.slice(E, E + 4)) return E += 4, null;N();}
                }return "$";
              },
                  R = function R(t) {
                var e, r;if ("$" == t && N(), "string" == typeof t) {
                  if ("@" == (k ? t.charAt(0) : t[0])) return t.slice(1);if ("[" == t) {
                    for (e = []; "]" != (t = P()); r || (r = !0)) {
                      r && ("," == t ? "]" == (t = P()) && N() : N()), "," == t && N(), e.push(R(t));
                    }return e;
                  }if ("{" == t) {
                    for (e = {}; "}" != (t = P()); r || (r = !0)) {
                      r && ("," == t ? "}" == (t = P()) && N() : N()), "," != t && "string" == typeof t && "@" == (k ? t.charAt(0) : t[0]) && ":" == P() || N(), e[t.slice(1)] = R(P());
                    }return e;
                  }N();
                }return t;
              },
                  D = function D(t, e, r) {
                var n = U(t, e, r);n === g ? delete t[e] : t[e] = n;
              },
                  U = function U(t, e, r) {
                var n,
                    o = t[e];if ("object" == (typeof o === "undefined" ? "undefined" : _typeof(o)) && o) if ("[object Array]" == v.call(o)) for (n = o.length; n--;) {
                  D(o, n, r);
                } else _y(o, function (t) {
                  D(o, t, r);
                });return r.call(t, e, o);
              };e.parse = function (t, e) {
                var r, n;return E = 0, _ = "" + t, r = R(P()), "$" != P() && N(), E = _ = null, e && "[object Function]" == v.call(e) ? U((n = {}, n[""] = r, n), "", e) : r;
              };
            }
          }return e.runInContext = i, e;
        }var s = r(51),
            a = { function: !0, object: !0 },
            c = a[typeof e === "undefined" ? "undefined" : _typeof(e)] && e && !e.nodeType && e,
            u = a[typeof window === "undefined" ? "undefined" : _typeof(window)] && window || this,
            h = c && a[typeof t === "undefined" ? "undefined" : _typeof(t)] && t && !t.nodeType && "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && n;if (!h || h.global !== h && h.window !== h && h.self !== h || (u = h), c && !s) i(u, c);else {
          var p = u.JSON,
              f = u.JSON3,
              l = !1,
              d = i(u, u.JSON3 = { noConflict: function noConflict() {
              return l || (l = !0, u.JSON = p, u.JSON3 = f, p = f = null), d;
            } });u.JSON = { parse: d.parse, stringify: d.stringify };
        }s && void 0 !== (o = function () {
          return d;
        }.call(e, r, e, t)) && (t.exports = o);
      }).call(this);
    }).call(e, r(21)(t), r(0));
  }, function (t, e) {
    function r(t) {
      if (t = String(t), !(t.length > 1e4)) {
        var e = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if (e) {
          var r = parseFloat(e[1]);switch ((e[2] || "ms").toLowerCase()) {case "years":case "year":case "yrs":case "yr":case "y":
              return r * h;case "days":case "day":case "d":
              return r * u;case "hours":case "hour":case "hrs":case "hr":case "h":
              return r * c;case "minutes":case "minute":case "mins":case "min":case "m":
              return r * a;case "seconds":case "second":case "secs":case "sec":case "s":
              return r * s;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":
              return r;default:
              return;}
        }
      }
    }function n(t) {
      return t >= u ? Math.round(t / u) + "d" : t >= c ? Math.round(t / c) + "h" : t >= a ? Math.round(t / a) + "m" : t >= s ? Math.round(t / s) + "s" : t + "ms";
    }function o(t) {
      return i(t, u, "day") || i(t, c, "hour") || i(t, a, "minute") || i(t, s, "second") || t + " ms";
    }function i(t, e, r) {
      if (!(t < e)) return t < 1.5 * e ? Math.floor(t / e) + " " + r : Math.ceil(t / e) + " " + r + "s";
    }var s = 1e3,
        a = 60 * s,
        c = 60 * a,
        u = 24 * c,
        h = 365.25 * u;t.exports = function (t, e) {
      e = e || {};var i = typeof t === "undefined" ? "undefined" : _typeof(t);if ("string" === i && t.length > 0) return r(t);if ("number" === i && isNaN(t) === !1) return e.long ? o(t) : n(t);throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
    };
  }, function (t, e, r) {
    (function (e) {
      var r = /^[\],:{}\s]*$/;t.exports = function (t) {
        return "string" == typeof t && t ? (t = t.replace(/^\s+/, "").replace(/\s+$/, ""), e.JSON && JSON.parse ? JSON.parse(t) : r.test(t.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "")) ? new Function("return " + t)() : void 0) : null;
      };
    }).call(e, r(0));
  }, function (t, e) {
    function r() {
      throw new Error("setTimeout has not been defined");
    }function n() {
      throw new Error("clearTimeout has not been defined");
    }function o(t) {
      if (h === setTimeout) return setTimeout(t, 0);if ((h === r || !h) && setTimeout) return h = setTimeout, setTimeout(t, 0);try {
        return h(t, 0);
      } catch (e) {
        try {
          return h.call(null, t, 0);
        } catch (e) {
          return h.call(this, t, 0);
        }
      }
    }function i(t) {
      if (p === clearTimeout) return clearTimeout(t);if ((p === n || !p) && clearTimeout) return p = clearTimeout, clearTimeout(t);try {
        return p(t);
      } catch (e) {
        try {
          return p.call(null, t);
        } catch (e) {
          return p.call(this, t);
        }
      }
    }function s() {
      y && l && (y = !1, l.length ? d = l.concat(d) : g = -1, d.length && a());
    }function a() {
      if (!y) {
        var t = o(s);y = !0;for (var e = d.length; e;) {
          for (l = d, d = []; ++g < e;) {
            l && l[g].run();
          }g = -1, e = d.length;
        }l = null, y = !1, i(t);
      }
    }function c(t, e) {
      this.fun = t, this.array = e;
    }function u() {}var h,
        p,
        f = t.exports = {};!function () {
      try {
        h = "function" == typeof setTimeout ? setTimeout : r;
      } catch (t) {
        h = r;
      }try {
        p = "function" == typeof clearTimeout ? clearTimeout : n;
      } catch (t) {
        p = n;
      }
    }();var l,
        d = [],
        y = !1,
        g = -1;f.nextTick = function (t) {
      var e = new Array(arguments.length - 1);if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) {
        e[r - 1] = arguments[r];
      }d.push(new c(t, e)), 1 !== d.length || y || o(a);
    }, c.prototype.run = function () {
      this.fun.apply(null, this.array);
    }, f.title = "browser", f.browser = !0, f.env = {}, f.argv = [], f.version = "", f.versions = {}, f.on = u, f.addListener = u, f.once = u, f.off = u, f.removeListener = u, f.removeAllListeners = u, f.emit = u, f.binding = function (t) {
      throw new Error("process.binding is not supported");
    }, f.cwd = function () {
      return "/";
    }, f.chdir = function (t) {
      throw new Error("process.chdir is not supported");
    }, f.umask = function () {
      return 0;
    };
  }, function (t, e, r) {
    function n(t, e) {
      "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (e = t, t = void 0), e = e || {};var r,
          n = i(t),
          s = n.source,
          h = n.id,
          p = n.path,
          f = u[h] && p in u[h].nsps,
          l = e.forceNew || e["force new connection"] || !1 === e.multiplex || f;return l ? (c("ignoring socket cache for %s", s), r = a(s, e)) : (u[h] || (c("new io instance for %s", s), u[h] = a(s, e)), r = u[h]), n.query && !e.query ? e.query = n.query : e && "object" == _typeof(e.query) && (e.query = o(e.query)), r.socket(n.path, e);
    }function o(t) {
      var e = [];for (var r in t) {
        t.hasOwnProperty(r) && e.push(encodeURIComponent(r) + "=" + encodeURIComponent(t[r]));
      }return e.join("&");
    }var i = r(44),
        s = r(8),
        a = r(17),
        c = r(1)("socket.io-client");t.exports = e = n;var u = e.managers = {};e.protocol = s.protocol, e.connect = n, e.Manager = r(17), e.Socket = r(19);
  }, function (t, e, r) {
    (function (e) {
      function n(t, r) {
        var n = t;r = r || e.location, null == t && (t = r.protocol + "//" + r.host), "string" == typeof t && ("/" === t.charAt(0) && (t = "/" === t.charAt(1) ? r.protocol + t : r.host + t), /^(https?|wss?):\/\//.test(t) || (i("protocol-less url %s", t), t = void 0 !== r ? r.protocol + "//" + t : "https://" + t), i("parse %s", t), n = o(t)), n.port || (/^(http|ws)$/.test(n.protocol) ? n.port = "80" : /^(http|ws)s$/.test(n.protocol) && (n.port = "443")), n.path = n.path || "/";var s = n.host.indexOf(":") !== -1,
            a = s ? "[" + n.host + "]" : n.host;return n.id = n.protocol + "://" + a + ":" + n.port, n.href = n.protocol + "://" + a + (r && r.port === n.port ? "" : ":" + n.port), n;
      }var o = r(16),
          i = r(1)("socket.io-client:url");t.exports = n;
    }).call(e, r(0));
  }, function (t, e, r) {
    (function (t) {
      var n = r(15),
          o = r(20);e.deconstructPacket = function (t) {
        function e(t) {
          if (!t) return t;if (o(t)) {
            var i = { _placeholder: !0, num: r.length };return r.push(t), i;
          }if (n(t)) {
            for (var s = new Array(t.length), a = 0; a < t.length; a++) {
              s[a] = e(t[a]);
            }return s;
          }if ("object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && !(t instanceof Date)) {
            var s = {};for (var c in t) {
              s[c] = e(t[c]);
            }return s;
          }return t;
        }var r = [],
            i = t.data,
            s = t;return s.data = e(i), s.attachments = r.length, { packet: s, buffers: r };
      }, e.reconstructPacket = function (t, e) {
        function r(t) {
          if (t && t._placeholder) {
            return e[t.num];
          }if (n(t)) {
            for (var o = 0; o < t.length; o++) {
              t[o] = r(t[o]);
            }return t;
          }if (t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t))) {
            for (var i in t) {
              t[i] = r(t[i]);
            }return t;
          }return t;
        }return t.data = r(t.data), t.attachments = void 0, t;
      }, e.removeBlobs = function (e, r) {
        function i(e, c, u) {
          if (!e) return e;if (t.Blob && e instanceof Blob || t.File && e instanceof File) {
            s++;var h = new FileReader();h.onload = function () {
              u ? u[c] = this.result : a = this.result, --s || r(a);
            }, h.readAsArrayBuffer(e);
          } else if (n(e)) for (var p = 0; p < e.length; p++) {
            i(e[p], p, e);
          } else if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && !o(e)) for (var f in e) {
            i(e[f], f, e);
          }
        }var s = 0,
            a = e;i(a), s || r(a);
      };
    }).call(e, r(0));
  }, function (t, e) {
    function r(t) {
      if (t) return n(t);
    }function n(t) {
      for (var e in r.prototype) {
        t[e] = r.prototype[e];
      }return t;
    }t.exports = r, r.prototype.on = r.prototype.addEventListener = function (t, e) {
      return this._callbacks = this._callbacks || {}, (this._callbacks[t] = this._callbacks[t] || []).push(e), this;
    }, r.prototype.once = function (t, e) {
      function r() {
        n.off(t, r), e.apply(this, arguments);
      }var n = this;return this._callbacks = this._callbacks || {}, r.fn = e, this.on(t, r), this;
    }, r.prototype.off = r.prototype.removeListener = r.prototype.removeAllListeners = r.prototype.removeEventListener = function (t, e) {
      if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;var r = this._callbacks[t];if (!r) return this;if (1 == arguments.length) return delete this._callbacks[t], this;for (var n, o = 0; o < r.length; o++) {
        if ((n = r[o]) === e || n.fn === e) {
          r.splice(o, 1);break;
        }
      }return this;
    }, r.prototype.emit = function (t) {
      this._callbacks = this._callbacks || {};var e = [].slice.call(arguments, 1),
          r = this._callbacks[t];if (r) {
        r = r.slice(0);for (var n = 0, o = r.length; n < o; ++n) {
          r[n].apply(this, e);
        }
      }return this;
    }, r.prototype.listeners = function (t) {
      return this._callbacks = this._callbacks || {}, this._callbacks[t] || [];
    }, r.prototype.hasListeners = function (t) {
      return !!this.listeners(t).length;
    };
  }, function (t, e, r) {
    function n() {
      return "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
    }function o() {
      var t = arguments,
          r = this.useColors;if (t[0] = (r ? "%c" : "") + this.namespace + (r ? " %c" : " ") + t[0] + (r ? "%c " : " ") + "+" + e.humanize(this.diff), !r) return t;var n = "color: " + this.color;t = [t[0], n, "color: inherit"].concat(Array.prototype.slice.call(t, 1));var o = 0,
          i = 0;return t[0].replace(/%[a-z%]/g, function (t) {
        "%%" !== t && (o++, "%c" === t && (i = o));
      }), t.splice(i, 0, n), t;
    }function i() {
      return "object" == (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }function s(t) {
      try {
        null == t ? e.storage.removeItem("debug") : e.storage.debug = t;
      } catch (t) {}
    }function a() {
      var t;try {
        t = e.storage.debug;
      } catch (t) {}return t;
    }e = t.exports = r(48), e.log = i, e.formatArgs = o, e.save = s, e.load = a, e.useColors = n, e.storage = "undefined" != typeof chrome && void 0 !== chrome.storage ? chrome.storage.local : function () {
      try {
        return window.localStorage;
      } catch (t) {}
    }(), e.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"], e.formatters.j = function (t) {
      return JSON.stringify(t);
    }, e.enable(a());
  }, function (t, e, r) {
    function n() {
      return e.colors[h++ % e.colors.length];
    }function o(t) {
      function r() {}function o() {
        var t = o,
            r = +new Date(),
            i = r - (u || r);t.diff = i, t.prev = u, t.curr = r, u = r, null == t.useColors && (t.useColors = e.useColors()), null == t.color && t.useColors && (t.color = n());var s = Array.prototype.slice.call(arguments);s[0] = e.coerce(s[0]), "string" != typeof s[0] && (s = ["%o"].concat(s));var a = 0;s[0] = s[0].replace(/%([a-z%])/g, function (r, n) {
          if ("%%" === r) return r;a++;var o = e.formatters[n];if ("function" == typeof o) {
            var i = s[a];r = o.call(t, i), s.splice(a, 1), a--;
          }return r;
        }), "function" == typeof e.formatArgs && (s = e.formatArgs.apply(t, s)), (o.log || e.log || console.log.bind(console)).apply(t, s);
      }r.enabled = !1, o.enabled = !0;var i = e.enabled(t) ? o : r;return i.namespace = t, i;
    }function i(t) {
      e.save(t);for (var r = (t || "").split(/[\s,]+/), n = r.length, o = 0; o < n; o++) {
        r[o] && (t = r[o].replace(/\*/g, ".*?"), "-" === t[0] ? e.skips.push(new RegExp("^" + t.substr(1) + "$")) : e.names.push(new RegExp("^" + t + "$")));
      }
    }function s() {
      e.enable("");
    }function a(t) {
      var r, n;for (r = 0, n = e.skips.length; r < n; r++) {
        if (e.skips[r].test(t)) return !1;
      }for (r = 0, n = e.names.length; r < n; r++) {
        if (e.names[r].test(t)) return !0;
      }return !1;
    }function c(t) {
      return t instanceof Error ? t.stack || t.message : t;
    }e = t.exports = o, e.coerce = c, e.disable = s, e.enable = i, e.enabled = a, e.humanize = r(49), e.names = [], e.skips = [], e.formatters = {};var u,
        h = 0;
  }, function (t, e) {
    function r(t) {
      if (t = "" + t, !(t.length > 1e4)) {
        var e = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if (e) {
          var r = parseFloat(e[1]);switch ((e[2] || "ms").toLowerCase()) {case "years":case "year":case "yrs":case "yr":case "y":
              return r * h;case "days":case "day":case "d":
              return r * u;case "hours":case "hour":case "hrs":case "hr":case "h":
              return r * c;case "minutes":case "minute":case "mins":case "min":case "m":
              return r * a;case "seconds":case "second":case "secs":case "sec":case "s":
              return r * s;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":
              return r;}
        }
      }
    }function n(t) {
      return t >= u ? Math.round(t / u) + "d" : t >= c ? Math.round(t / c) + "h" : t >= a ? Math.round(t / a) + "m" : t >= s ? Math.round(t / s) + "s" : t + "ms";
    }function o(t) {
      return i(t, u, "day") || i(t, c, "hour") || i(t, a, "minute") || i(t, s, "second") || t + " ms";
    }function i(t, e, r) {
      if (!(t < e)) return t < 1.5 * e ? Math.floor(t / e) + " " + r : Math.ceil(t / e) + " " + r + "s";
    }var s = 1e3,
        a = 60 * s,
        c = 60 * a,
        u = 24 * c,
        h = 365.25 * u;t.exports = function (t, e) {
      return e = e || {}, "string" == typeof t ? r(t) : e.long ? o(t) : n(t);
    };
  }, function (t, e) {
    function r(t, e) {
      var r = [];e = e || 0;for (var n = e || 0; n < t.length; n++) {
        r[n - e] = t[n];
      }return r;
    }t.exports = r;
  }, function (t, e) {
    (function (e) {
      t.exports = e;
    }).call(e, {});
  }, function (t, e, r) {
    (function (t, n) {
      var o;!function (i) {
        function s(t) {
          for (var e, r, n = [], o = 0, i = t.length; o < i;) {
            e = t.charCodeAt(o++), e >= 55296 && e <= 56319 && o < i ? (r = t.charCodeAt(o++), 56320 == (64512 & r) ? n.push(((1023 & e) << 10) + (1023 & r) + 65536) : (n.push(e), o--)) : n.push(e);
          }return n;
        }function a(t) {
          for (var e, r = t.length, n = -1, o = ""; ++n < r;) {
            e = t[n], e > 65535 && (e -= 65536, o += b(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), o += b(e);
          }return o;
        }function c(t, e) {
          return b(t >> e & 63 | 128);
        }function u(t) {
          if (0 == (4294967168 & t)) return b(t);var e = "";return 0 == (4294965248 & t) ? e = b(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (e = b(t >> 12 & 15 | 224), e += c(t, 6)) : 0 == (4292870144 & t) && (e = b(t >> 18 & 7 | 240), e += c(t, 12), e += c(t, 6)), e += b(63 & t | 128);
        }function h(t) {
          for (var e, r = s(t), n = r.length, o = -1, i = ""; ++o < n;) {
            e = r[o], i += u(e);
          }return i;
        }function p() {
          if (v >= m) throw Error("Invalid byte index");var t = 255 & g[v];if (v++, 128 == (192 & t)) return 63 & t;throw Error("Invalid continuation byte");
        }function f() {
          var t, e, r, n, o;if (v > m) throw Error("Invalid byte index");if (v == m) return !1;if (t = 255 & g[v], v++, 0 == (128 & t)) return t;if (192 == (224 & t)) {
            var e = p();if ((o = (31 & t) << 6 | e) >= 128) return o;throw Error("Invalid continuation byte");
          }if (224 == (240 & t)) {
            if (e = p(), r = p(), (o = (15 & t) << 12 | e << 6 | r) >= 2048) return o;throw Error("Invalid continuation byte");
          }if (240 == (248 & t) && (e = p(), r = p(), n = p(), (o = (15 & t) << 18 | e << 12 | r << 6 | n) >= 65536 && o <= 1114111)) return o;throw Error("Invalid WTF-8 detected");
        }function l(t) {
          g = s(t), m = g.length, v = 0;for (var e, r = []; (e = f()) !== !1;) {
            r.push(e);
          }return a(r);
        }var d = "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && e,
            y = ("object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t && t.exports, "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && n);y.global !== y && y.window;var g,
            m,
            v,
            b = String.fromCharCode,
            k = { version: "1.0.0", encode: h, decode: l };void 0 !== (o = function () {
          return k;
        }.call(e, r, e, t)) && (t.exports = o);
      }();
    }).call(e, r(21)(t), r(0));
  }, function (t, e) {}, function (t, e, r) {
    t.exports = r(23);
  }]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],8:[function(require,module,exports){
(function (process,global){
/*!
 * Vue.js v2.4.2
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}

/**
 * Check if value is primitive
 */
function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject(obj) {
  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
}

var _toString = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex(val) {
  var n = parseFloat(val);
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString(val) {
  return val == null ? '' : (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' ? JSON.stringify(val, null, 2) : String(val);
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,is');

/**
 * Remove an item from an array
 */
function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

/**
 * Create a cached version of a pure function.
 */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /([^-])([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
});

/**
 * Simple bind, faster than native
 */
function bind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn;
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}

/**
 * Mix properties into target object.
 */
function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop(a, b, c) {}

/**
 * Always return false.
 */
var no = function no(a, b, c) {
  return false;
};

/**
 * Return same value
 */
var identity = function identity(_) {
  return _;
};

/**
 * Generate a static keys string from compiler modules.
 */
function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual(a, b) {
  if (a === b) {
    return true;
  }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}

function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }
  return -1;
}

/**
 * Ensure a function is called only once.
 */
function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = ['component', 'directive', 'filter'];

var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'];

/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};

/*  */

var emptyObject = Object.freeze({});

/**
 * Check if a string starts with $ or _
 */
function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}

/**
 * Define a property.
 */
function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }
      obj = obj[segments[i]];
    }
    return obj;
  };
}

/*  */

var warn = noop;
var tip = noop;
var formatComponentName = null; // work around flow check

if (process.env.NODE_ENV !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }
    var name = typeof vm === 'string' ? vm : typeof vm === 'function' && vm.options ? vm.options.name : vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;

    var file = vm._isVue && vm.$options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) {
        res += str;
      }
      if (n > 1) {
        str += str;
      }
      n >>= 1;
    }
    return res;
  };

  var generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}

/*  */

function handleError(err, vm, info) {
  if (config.errorHandler) {
    config.errorHandler.call(null, err, vm, info);
  } else {
    if (process.env.NODE_ENV !== 'production') {
      warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
    }
    /* istanbul ignore else */
    if (inBrowser && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err;
    }
  }
}

/*  */
/* globals MutationObserver */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefix has a "watch" function on Object.prototype...
var nativeWatch = {}.watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer;
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

/**
 * Defer a task to execute it asynchronously.
 */
var nextTick = function () {
  var callbacks = [];
  var pending = false;
  var timerFunc;

  function nextTickHandler() {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // the nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore if */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    var logError = function logError(err) {
      console.error(err);
    };
    timerFunc = function timerFunc() {
      p.then(nextTickHandler).catch(logError);
      // in problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) {
        setTimeout(noop);
      }
    };
  } else if (typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]')) {
    // use MutationObserver where native Promise is not available,
    // e.g. PhantomJS IE11, iOS7, Android 4.4
    var counter = 1;
    var observer = new MutationObserver(nextTickHandler);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function timerFunc() {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
  } else {
    // fallback to setTimeout
    /* istanbul ignore next */
    timerFunc = function timerFunc() {
      setTimeout(nextTickHandler, 0);
    };
  }

  return function queueNextTick(cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve, reject) {
        _resolve = resolve;
      });
    }
  };
}();

var _Set;
/* istanbul ignore if */
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = function () {
    function Set() {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };
    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget(_target) {
  if (Dep.target) {
    targetStack.push(Dep.target);
  }
  Dep.target = _target;
}

function popTarget() {
  Dep.target = targetStack.pop();
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;
    while (len--) {
      args[len] = arguments[len];
    }var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;
      case 'splice':
        inserted = args.slice(2);
        break;
    }
    if (inserted) {
      ob.observeArray(inserted);
    }
    // notify change
    ob.dep.notify();
    return result;
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto ? protoAugment : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment(target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe(value, asRootData) {
  if (!isObject(value)) {
    return;
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob;
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
        }
        if (Array.isArray(value)) {
          dependArray(value);
        }
      }
      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set(target, key, val) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  if (hasOwn(target, key)) {
    target[key] = val;
    return val;
  }
  var ob = target.__ob__;
  if (target._isVue || ob && ob.vmCount) {
    process.env.NODE_ENV !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }
  if (!ob) {
    target[key] = val;
    return val;
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}

/**
 * Delete a property and trigger change if necessary.
 */
function del(target, key) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }
  var ob = target.__ob__;
  if (target._isVue || ob && ob.vmCount) {
    process.env.NODE_ENV !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }
  if (!hasOwn(target, key)) {
    return;
  }
  delete target[key];
  if (!ob) {
    return;
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }
    return defaultStrat(parent, child);
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData(to, from) {
  if (!from) {
    return to;
  }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}

/**
 * Data
 */
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this) : childVal, typeof parentVal === 'function' ? parentVal.call(this) : parentVal);
    };
  } else if (parentVal || childVal) {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);

      return parentVal;
    }
    return mergeDataOrFn.call(this, parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook(parentVal, childVal) {
  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets(parentVal, childVal) {
  var res = Object.create(parentVal || null);
  return childVal ? extend(res, childVal) : res;
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }
  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */
  if (!childVal) {
    return Object.create(parentVal || null);
  }
  if (!parentVal) {
    return childVal;
  }
  var ret = {};
  extend(ret, parentVal);
  for (var key in childVal) {
    var parent = ret[key];
    var child = childVal[key];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }
  return ret;
};

/**
 * Other object hashes.
 */
strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal) {
  if (!parentVal) {
    return childVal;
  }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) {
    extend(ret, childVal);
  }
  return ret;
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};

/**
 * Validate component names
 */
function checkComponents(options) {
  for (var key in options.components) {
    var lower = key.toLowerCase();
    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
      warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
    }
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps(options) {
  var props = options.props;
  if (!props) {
    return;
  }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : { type: val };
    }
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject(options) {
  var inject = options.inject;
  if (Array.isArray(inject)) {
    var normalized = options.inject = {};
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = inject[i];
    }
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives(options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions(parent, child, vm) {
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child);
  normalizeInject(child);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options;
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) {
    return assets[id];
  }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }
  return res;
}

/*  */

function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  if (process.env.NODE_ENV !== 'production') {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}

/**
 * Assert whether a prop is valid.
 */
function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn('Invalid prop: type check failed for prop "' + name + '".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);
    return;
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === expectedType.toLowerCase();
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  };
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isType(type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type);
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true;
    }
  }
  /* istanbul ignore next */
  return false;
}

/*  */

var mark;
var measure;

if (process.env.NODE_ENV !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };
    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (process.env.NODE_ENV !== 'production') {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + "referenced during render. Make sure to declare reactive data " + "properties in the data option.", target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed;
    }
  };

  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.functionalContext = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: {} };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.isCloned = true;
  return cloned;
}

function cloneVNodes(vnodes) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i]);
  }
  return res;
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }
  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, vm) {
  var name, cur, old, event;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook(def, hookKey, hook) {
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }
      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }
  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true;
    }
  }
  return false;
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }
    last = res[res.length - 1];
    //  nested
    if (Array.isArray(c)) {
      res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + "_" + i));
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        last.text += String(c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[res.length - 1] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res;
}

/*  */

function ensureCtor(comp, base) {
  if (comp.__esModule && comp.default) {
    comp = comp.default;
  }
  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node;
}

function resolveAsyncComponent(factory, baseCtor, context) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function forceRender() {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      process.env.NODE_ENV !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(process.env.NODE_ENV !== 'production' ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}

/*  */

function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && isDef(c.componentOptions)) {
        return c;
      }
    }
  }
}

/*  */

/*  */

function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn, once$$1) {
  if (once$$1) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        this$1.$off(event[i$1], fn);
      }
      return vm;
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm;
    }
    if (arguments.length === 1) {
      vm._events[event] = null;
      return vm;
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }
    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (process.env.NODE_ENV !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, "event handler for \"" + event + "\"");
        }
      }
    }
    return vm;
  };
}

/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots(children, context) {
  var slots = {};
  if (!children) {
    return slots;
  }
  var defaultSlot = [];
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.functionalContext === context) && child.data && child.data.slot != null) {
      var name = child.data.slot;
      var slot = slots[name] || (slots[name] = []);
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children);
      } else {
        slot.push(child);
      }
    } else {
      defaultSlot.push(child);
    }
  }
  // ignore whitespace
  if (!defaultSlot.every(isWhitespace)) {
    slots.default = defaultSlot;
  }
  return slots;
}

function isWhitespace(node) {
  return node.isComment || node.text === ' ';
}

function resolveScopedSlots(fns, // see flow/vnode
res) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res;
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle(vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */
      , vm.$options._parentElm, vm.$options._refElm);
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(name + " render", startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  }

  vm._watcher = new Watcher(vm, updateComponent, noop);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  parentVnode.data.scopedSlots || // has new scoped slots
  vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listensers hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data && parentVnode.data.attrs;
  vm.$listeners = listeners;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }
  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, hook + " hook");
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (process.env.NODE_ENV !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue() {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) {
    return a.id - b.id;
  });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher(watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher(vm, expOrFn, cb, options) {
  this.vm = vm;
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = process.env.NODE_ENV !== 'production' ? expOrFn.toString() : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      process.env.NODE_ENV !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }
  this.value = this.lazy ? undefined : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value;
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();
    if (value !== this.value ||
    // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend() {
  var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown() {
  var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
var seenObjects = new _Set();
function traverse(val) {
  seenObjects.clear();
  _traverse(val, seenObjects);
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if (!isA && !isObject(val) || !Object.isExtensible(val)) {
    return;
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) {
    initProps(vm, opts.props);
  }
  if (opts.methods) {
    initMethods(vm, opts.methods);
  }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) {
    initComputed(vm, opts.computed);
  }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function checkOptionType(vm, name) {
  var option = vm.$options[name];
  if (!isPlainObject(option)) {
    warn("component option \"" + name + "\" should be an object.", vm);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      if (isReservedAttribute(key) || config.isReservedAttr(key)) {
        warn("\"" + key + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }
      defineReactive$$1(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }observerState.shouldConvert = true;
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn("method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData(data, vm) {
  try {
    return data.call(vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed(vm, computed) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'computed');
  var watchers = vm._computedWatchers = Object.create(null);

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }
    // create internal watcher for the computed property.
    watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = createComputedGetter(key);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
    sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
  }
  if (process.env.NODE_ENV !== 'production' && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    }
  };
}

function initMethods(vm, methods) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'methods');
  var props = vm.$options.props;
  for (var key in methods) {
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
    if (process.env.NODE_ENV !== 'production') {
      if (methods[key] == null) {
        warn("method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
      }
      if (props && hasOwn(props, key)) {
        warn("method \"" + key + "\" has already been defined as a prop.", vm);
      }
    }
  }
}

function initWatch(vm, watch) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'watch');
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, keyOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(keyOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () {
    return this._data;
  };
  var propsDef = {};
  propsDef.get = function () {
    return this._props;
  };
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function (newData) {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}

/*  */

function initProvide(vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    observerState.shouldConvert = false;
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    observerState.shouldConvert = true;
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key];
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break;
        }
        source = source.$parent;
      }
      if (process.env.NODE_ENV !== 'production' && !source) {
        warn("Injection \"" + key + "\" not found", vm);
      }
    }
    return result;
  }
}

/*  */

function createFunctionalComponent(Ctor, propsData, data, context, children) {
  var props = {};
  var propOptions = Ctor.options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || {});
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }
    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var _context = Object.create(context);
  var h = function h(a, b, c, d) {
    return createElement(_context, a, b, c, d, true);
  };
  var vnode = Ctor.options.render.call(null, h, {
    data: data,
    props: props,
    children: children,
    parent: context,
    listeners: data.on || {},
    injections: resolveInject(Ctor.options.inject, context),
    slots: function slots() {
      return resolveSlots(children, context);
    }
  });
  if (vnode instanceof VNode) {
    vnode.functionalContext = context;
    vnode.functionalOptions = Ctor.options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }
  return vnode;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init(vnode, hydrating, parentElm, refElm) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },

  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent, // activeInstance in lifecycle state
parentElm, refElm) {
  var vnodeComponentOptions = vnode.componentOptions;
  var options = {
    _isComponent: true,
    parent: parent,
    propsData: vnodeComponentOptions.propsData,
    _componentTag: vnodeComponentOptions.tag,
    _parentVnode: vnode,
    _parentListeners: vnodeComponentOptions.listeners,
    _renderChildren: vnodeComponentOptions.children,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnodeComponentOptions.Ctor(options);
}

function mergeHooks(data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1(one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  };
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    process.env.NODE_ENV !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) {
      applyNS(vnode, ns);
    }
    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    return;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && isUndef(child.ns)) {
        applyNS(child, ns);
      }
    }
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList(val, render) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    ret._isVList = true;
  }
  return ret;
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      props = extend(extend({}, bindObject), props);
    }
    return scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes && process.env.NODE_ENV !== 'production') {
      slotNodes._rendered && warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
      slotNodes._rendered = true;
    }
    return slotNodes || fallback;
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 */
function checkKeyCodes(eventKeyCode, key, builtInAlias) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (Array.isArray(keyCodes)) {
    return keyCodes.indexOf(eventKeyCode) === -1;
  } else {
    return keyCodes !== eventKeyCode;
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      process.env.NODE_ENV !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }
  return data;
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic(index, isInFor) {
  var tree = this._staticTrees[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);
  }
  // otherwise, render a fresh tree.
  tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);
  markStatic(tree, "__static__" + index, false);
  return tree;
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== 'production' && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(ours, existing) : ours;
      }
    }
  }
  return data;
}

/*  */

function initRender(vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null;
  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, null, true);
    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, null, true);
  }
}

function renderMixin(Vue) {
  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var staticRenderFns = ref.staticRenderFns;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // clone slot nodes on re-renders
      for (var key in vm.$slots) {
        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
      }
    }

    vm.$scopedSlots = _parentVnode && _parentVnode.data.scopedSlots || emptyObject;

    if (staticRenderFns && !vm._staticTrees) {
      vm._staticTrees = [];
    }
    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render function");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        vnode = vm.$options.renderError ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) : vm._vnode;
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode;
  };

  // internal render helpers.
  // these are exposed on the instance prototype to reduce generated render
  // code size.
  Vue.prototype._o = markOnce;
  Vue.prototype._n = toNumber;
  Vue.prototype._s = toString;
  Vue.prototype._l = renderList;
  Vue.prototype._t = renderSlot;
  Vue.prototype._q = looseEqual;
  Vue.prototype._i = looseIndexOf;
  Vue.prototype._m = renderStatic;
  Vue.prototype._f = resolveFilter;
  Vue.prototype._k = checkKeyCodes;
  Vue.prototype._b = bindObjectProps;
  Vue.prototype._v = createTextVNode;
  Vue.prototype._e = createEmptyVNode;
  Vue.prototype._u = resolveScopedSlots;
  Vue.prototype._g = bindObjectListeners;
}

/*  */

var uid$1 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$1++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      startTag = "vue-perf-init:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  opts.parent = options.parent;
  opts.propsData = options.propsData;
  opts._parentVnode = options._parentVnode;
  opts._parentListeners = options._parentListeners;
  opts._renderChildren = options._renderChildren;
  opts._componentTag = options._componentTag;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified;
}

function dedupe(latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res;
  } else {
    return latest;
  }
}

function Vue$3(options) {
  if (process.env.NODE_ENV !== 'production' && !(this instanceof Vue$3)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3);
stateMixin(Vue$3);
eventsMixin(Vue$3);
lifecycleMixin(Vue$3);
renderMixin(Vue$3);

/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this;
  };
}

/*  */

function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}

/*  */

function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production') {
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
      }
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production') {
          if (type === 'component' && config.isReservedTag(id)) {
            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
          }
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}

/*  */

var patternTypes = [String, RegExp, Array];

function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */
  return false;
}

function pruneCache(cache, current, filter) {
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        if (cachedNode !== current) {
          pruneCacheEntry(cachedNode);
        }
        cache[key] = null;
      }
    }
  }
}

function pruneCacheEntry(vnode) {
  if (vnode) {
    vnode.componentInstance.$destroy();
  }
}

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes
  },

  created: function created() {
    this.cache = Object.create(null);
  },

  destroyed: function destroyed() {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache[key]);
    }
  },

  watch: {
    include: function include(val) {
      pruneCache(this.cache, this._vnode, function (name) {
        return matches(val, name);
      });
    },
    exclude: function exclude(val) {
      pruneCache(this.cache, this._vnode, function (name) {
        return !matches(val, name);
      });
    }
  },

  render: function render() {
    var vnode = getFirstComponentChild(this.$slots.default);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {
        return vnode;
      }
      var key = vnode.key == null
      // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;
      if (this.cache[key]) {
        vnode.componentInstance = this.cache[key].componentInstance;
      } else {
        this.cache[key] = vnode;
      }
      vnode.data.keepAlive = true;
    }
    return vnode;
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};
  configDef.get = function () {
    return config;
  };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3);

Object.defineProperty(Vue$3.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
});

Vue$3.version = '2.4.2';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select');
var mustUseProp = function mustUseProp(tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function isXlink(name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function getXlinkProp(name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function isFalsyAttrValue(val) {
  return val == null || val === false;
};

/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */
  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }
  if (isObject(value)) {
    return stringifyObject(value);
  }
  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */
  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }
      res += stringified;
    }
  }
  return res;
}

function stringifyObject(value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }
      res += key;
    }
  }
  return res;
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot');

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isPreTag = function isPreTag(tag) {
  return tag === 'pre';
};

var isReservedTag = function isReservedTag(tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag)) {
    return false;
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }
    return selected;
  } else {
    return el;
  }
}

/*  */

function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm;
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setAttribute(node, key, val) {
  node.setAttribute(key, val);
}

var nodeOps = Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *

/*
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

// Some browsers do not support dynamically changing type for <input>
// so they need to be treated as different nodes
function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB;
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) {
      map[key] = i;
    }
  }
  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  var inPre = 0;
  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (process.env.NODE_ENV !== 'production') {
        if (data && data.pre) {
          inPre++;
        }
        if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
        inPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }
      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope(vnode) {
    var i;
    var ancestor = vnode;
    while (ancestor) {
      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
      ancestor = ancestor.parent;
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }
      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, elmToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        } else {
          elmToMove = oldCh[idxInOld];
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && !elmToMove) {
            warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');
          }
          if (sameVnode(elmToMove, newStartVnode)) {
            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          }
        }
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }
      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var bailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate(elm, vnode, insertedVnodeQueue) {
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.elm = elm;
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (!assertNodeMatch(elm, vnode)) {
        return false;
      }
    }
    vnode.elm = elm;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true /* hydrating */);
      }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          var childrenMatch = true;
          var childNode = elm.firstChild;
          for (var i$1 = 0; i$1 < children.length; i$1++) {
            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
              childrenMatch = false;
              break;
            }
            childNode = childNode.nextSibling;
          }
          // if childNode is not null, it means the actual childNodes list is
          // longer than the virtual children list.
          if (!childrenMatch || childNode) {
            if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined' && !bailed) {
              bailed = true;
              console.warn('Parent: ', elm);
              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
            }
            return false;
          }
        }
      }
      if (isDef(data)) {
        for (var key in data) {
          if (!isRenderedModule(key)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }

  function assertNodeMatch(node, vnode) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }
      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (process.env.NODE_ENV !== 'production') {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }
        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);
        createElm(vnode, insertedVnodeQueue,
        // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));

        if (isDef(vnode.parent)) {
          // component root element replaced.
          // update parent placeholder node element, recursively
          var ancestor = vnode.parent;
          while (ancestor) {
            ancestor.elm = vnode.elm;
            ancestor = ancestor.parent;
          }
          if (isPatchable(vnode)) {
            for (var i = 0; i < cbs.create.length; ++i) {
              cbs.create[i](emptyNode, vnode.parent);
            }
          }
        }

        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);
  if (!dirs) {
    return res;
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  /* istanbul ignore if */
  if (isIE9 && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, key);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;break; // "
        case 0x27:
          inSingle = true;break; // '
        case 0x60:
          inTemplateString = true;break; // `
        case 0x28:
          paren++;break; // (
        case 0x29:
          paren--;break; // )
        case 0x5B:
          square++;break; // [
        case 0x5D:
          square--;break; // ]
        case 0x7B:
          curly++;break; // {
        case 0x7D:
          curly--;break; // }
      }
      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0;
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') {
            break;
          }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + "," + args;
  }
}

/*  */

function baseWarn(msg) {
  console.error("[Vue compiler]: " + msg);
}

function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value) {
  (el.props || (el.props = [])).push({ name: name, value: value });
}

function addAttr(el, name, value) {
  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
}

function addDirective(el, name, rawName, value, arg, modifiers) {
  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
}

function addHandler(el, name, value, modifiers, important, warn) {
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && warn && modifiers && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.');
  }
  // check capture modifier
  if (modifiers && modifiers.capture) {
    delete modifiers.capture;
    name = '!' + name; // mark the event as captured
  }
  if (modifiers && modifiers.once) {
    delete modifiers.once;
    name = '~' + name; // mark the event as once
  }
  /* istanbul ignore if */
  if (modifiers && modifiers.passive) {
    delete modifiers.passive;
    name = '&' + name; // mark the event as passive
  }
  var events;
  if (modifiers && modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }
  var newHandler = { value: value, modifiers: modifiers };
  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
}

function getAndRemoveAttr(el, name) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }
  return val;
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: "(" + value + ")",
    expression: "\"" + value + "\"",
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode(value, assignment) {
  var modelRs = parseModel(value);
  if (modelRs.idx === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + modelRs.exp + ", " + modelRs.idx + ", " + assignment + ")";
  }
}

/**
 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
 *
 * for loop possible cases:
 *
 * - test
 * - test[idx]
 * - test[test1[idx]]
 * - test["a"][idx]
 * - xxx.test[a[a].test1[idx]]
 * - test.xxx.a["asa"][test1[idx]]
 *
 */

var len;
var str;
var chr;
var index$1;
var expressionPos;
var expressionEndPos;

function parseModel(val) {
  str = val;
  len = str.length;
  index$1 = expressionPos = expressionEndPos = 0;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    return {
      exp: val,
      idx: null
    };
  }

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.substring(0, expressionPos),
    idx: val.substring(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }
    if (chr === 0x5B) {
      inBracket++;
    }
    if (chr === 0x5D) {
      inBracket--;
    }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break;
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model(el, dir, _warn) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (process.env.NODE_ENV !== 'production') {
    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (tag === 'input' && dynamicType) {
      warn$1("<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" + "v-model does not support dynamic input types. Use v-if branches instead.");
    }
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.");
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false;
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false;
  } else if (process.env.NODE_ENV !== 'production') {
    warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.');
  }

  // ensure runtime directive metadata
  return true;
}

function genCheckboxModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
  addHandler(el, CHECKBOX_RADIO_TOKEN, "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$el.checked){$$i<0&&(" + value + "=$$a.concat($$v))}" + "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
}

function genRadioModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
  addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
}

function genSelect(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + genAssignmentCode(value, assignment);
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel(el, value, modifiers) {
  var type = el.attrsMap.type;
  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', "(" + value + ")");
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents(on) {
  var event;
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    // Chrome fires microtasks in between click/change, leads to #4521
    event = isChrome ? 'click' : 'change';
    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function add$1(event, _handler, once$$1, capture, passive) {
  if (once$$1) {
    var oldHandler = _handler;
    var _target = target$1; // save current target element in closure
    _handler = function handler(ev) {
      var res = arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, _handler, capture, _target);
      }
    };
  }
  target$1.addEventListener(event, _handler, supportsPassive ? { capture: capture, passive: passive } : capture);
}

function remove$2(event, handler, capture, _target) {
  (_target || target$1).removeEventListener(event, handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }
      if (cur === oldProps[key]) {
        continue;
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, vnode, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, vnode, checkVal) {
  return !elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(elm, checkVal));
}

function isDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}
  return notInFocus && elm.value !== checkVal;
}

function isInputChanged(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers) && modifiers.number) {
    return toNumber(value) !== toNumber(newVal);
  }
  if (isDef(modifiers) && modifiers.trim) {
    return value.trim() !== newVal.trim();
  }
  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle ? extend(data.staticStyle, style) : style;
}

// normalize possible array / string values into Object
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res;
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function setProp(el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likley wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */
  if ((typeof def$$1 === 'undefined' ? 'undefined' : _typeof(def$$1)) === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) {
    return cb();
  }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function end() {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function onEnd(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}

function toMs(s) {
  return Number(s.slice(0, -1)) * 1000;
}

/*  */

function enter(vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return;
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;

  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;

  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return rm();
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [attrs, klass, events, domProps, style, transition];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var model$1 = {
  inserted: function inserted(el, binding, vnode) {
    if (vnode.tag === 'select') {
      var cb = function cb() {
        setSelected(el, binding, vnode.context);
      };
      cb();
      /* istanbul ignore if */
      if (isIE || isEdge) {
        setTimeout(cb, 0);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        trigger(el, 'change');
      }
    }
  }
};

function setSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) {
      return;
    }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: model$1,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render(h) {
    var this$1 = this;

    var children = this.$options._renderChildren;
    if (!children) {
      return;
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) {
      return c.tag || isAsyncPlaceholder(c);
    });
    /* istanbul ignore if */
    if (!children.length) {
      return;
    }

    // warn multiple elements
    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode;

    // warn invalid mode
    if (process.env.NODE_ENV !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) {
      return d.name === 'show';
    })) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }
        var delayedLeave;
        var performLeave = function performLeave() {
          delayedLeave();
        };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },

  beforeUpdate: function beforeUpdate() {
    // force removing pass
    this.__patch__(this._vnode, this.kept, false, // hydrating
    true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    var body = document.body;
    var f = body.offsetHeight; // eslint-disable-line

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove;
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3.config.mustUseProp = mustUseProp;
Vue$3.config.isReservedTag = isReservedTag;
Vue$3.config.isReservedAttr = isReservedAttr;
Vue$3.config.getTagNamespace = getTagNamespace;
Vue$3.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3.options.directives, platformDirectives);
extend(Vue$3.options.components, platformComponents);

// install platform patch function
Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
};

// devtools global hook
/* istanbul ignore next */
setTimeout(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3);
    } else if (process.env.NODE_ENV !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
    }
  }
  if (process.env.NODE_ENV !== 'production' && config.productionTip !== false && inBrowser && typeof console !== 'undefined') {
    console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
  }
}, 0);

/*  */

// check whether current browser encodes a char inside attribute values
function shouldDecode(content, encoded) {
  var div = document.createElement('div');
  div.innerHTML = "<div a=\"" + content + "\"/>";
  return div.innerHTML.indexOf(encoded) > 0;
}

// #3663
// IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

/*  */

var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return;
  }
  var tokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index;
  while (match = tagRE.exec(text)) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      tokens.push(JSON.stringify(text.slice(lastIndex, index)));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    tokens.push(JSON.stringify(text.slice(lastIndex)));
  }
  return tokens.join('+');
}

/*  */

function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (process.env.NODE_ENV !== 'production' && staticClass) {
    var expression = parseText(staticClass, options.delimiters);
    if (expression) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData(el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }
  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }
  return data;
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      var expression = parseText(staticStyle, options.delimiters);
      if (expression) {
        warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.');
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1(el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + el.styleBinding + "),";
  }
  return data;
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

var modules$1 = [klass$1, style$1];

/*  */

function text(el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', "_s(" + dir.value + ")");
  }
}

/*  */

function html(el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', "_s(" + dir.value + ")");
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr');

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var decoder;

var he = {
  decode: function decode(html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent;
  }
};

/**
 * Not type-checking this file because it's mostly vendor code.
 */

/*!
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 */

// Regular Expressions for parsing tags and attributes
var singleAttrIdentifier = /([^\s"'<>/=]+)/;
var singleAttrAssign = /(?:=)/;
var singleAttrValues = [
// attr value double quotes
/"([^"]*)"+/.source,
// attr value, single quotes
/'([^']*)'+/.source,
// attr value, no quotes
/([^\s"'=<>`]+)/.source];
var attribute = new RegExp('^\\s*' + singleAttrIdentifier.source + '(?:\\s*(' + singleAttrAssign.source + ')' + '\\s*(?:' + singleAttrValues.join('|') + '))?');

// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
// but for Vue templates we can enforce a simple charset
var ncname = '[a-zA-Z_][\\w\\-\\.]*';
var qnameCapture = '((?:' + ncname + '\\:)?' + ncname + ')';
var startTagOpen = new RegExp('^<' + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp('^<\\/' + qnameCapture + '[^>]*>');
var doctype = /^<!DOCTYPE [^>]+>/i;
var comment = /^<!--/;
var conditionalComment = /^<!\[/;

var IS_REGEX_CAPTURING_BROKEN = false;
'x'.replace(/x(.)?/g, function (m, g) {
  IS_REGEX_CAPTURING_BROKEN = g === '';
});

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n'
};
var encodedAttr = /&(?:lt|gt|quot|amp);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd));
            }
            advance(commentEnd + 3);
            continue;
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(lastTag, html)) {
            advance(1);
          }
          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) {
            break;
          }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
        advance(textEnd);
      }

      if (textEnd < 0) {
        text = html;
        html = '';
      }

      if (options.chars && text) {
        options.chars(text);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!--([\s\S]*?)-->/g, '$1').replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"");
      }
      break;
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
        advance(attr[0].length);
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
        if (args[3] === '') {
          delete args[3];
        }
        if (args[4] === '') {
          delete args[4];
        }
        if (args[5] === '') {
          delete args[5];
        }
      }
      var value = args[3] || args[4] || args[5] || '';
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, options.shouldDecodeNewlines)
      };
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) {
      start = index;
    }
    if (end == null) {
      end = index;
    }

    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
    }

    // Find the closest opened tag of the same type
    if (tagName) {
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (process.env.NODE_ENV !== 'production' && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.");
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

var argRE = /:(.*)$/;
var bindRE = /^:|^v-bind:/;
var modifierRE = /\.[^.]+/g;

var decodeHTMLCached = cached(he.decode);

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;

/**
 * Convert HTML string to AST.
 */
function parse(template, options) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg) {
    if (!warned) {
      warned = true;
      warn$2(msg);
    }
  }

  function endPre(element) {
    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldKeepComment: options.comments,
    start: function start(tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = {
        type: 1,
        tag: tag,
        attrsList: attrs,
        attrsMap: makeAttrsMap(attrs),
        parent: currentParent,
        children: []
      };
      if (ns) {
        element.ns = ns;
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        process.env.NODE_ENV !== 'production' && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.');
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        preTransforms[i](element, options);
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else {
        processFor(element);
        processIf(element);
        processOnce(element);
        processKey(element);

        // determine whether this is a plain element after
        // removing structural attributes
        element.plain = !element.key && !attrs.length;

        processRef(element);
        processSlot(element);
        processComponent(element);
        for (var i$1 = 0; i$1 < transforms.length; i$1++) {
          transforms[i$1](element, options);
        }
        processAttrs(element);
      }

      function checkRootConstraints(el) {
        if (process.env.NODE_ENV !== 'production') {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.');
          }
          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');
          }
        }
      }

      // tree management
      if (!root) {
        root = element;
        checkRootConstraints(root);
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element);
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else if (process.env.NODE_ENV !== 'production') {
          warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.");
        }
      }
      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else if (element.slotScope) {
          // scoped slot
          currentParent.plain = false;
          var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        } else {
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }
      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        endPre(element);
      }
      // apply post-transforms
      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
        postTransforms[i$2](element, options);
      }
    },

    end: function end() {
      // remove trailing whitespace
      var element = stack[stack.length - 1];
      var lastNode = element.children[element.children.length - 1];
      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop();
      }
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      endPre(element);
    },

    chars: function chars(text) {
      if (!currentParent) {
        if (process.env.NODE_ENV !== 'production') {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.');
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.");
          }
        }
        return;
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }
      var children = currentParent.children;
      text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
      // only preserve whitespace if its not right after a starting tag
      : preserveWhitespace && children.length ? ' ' : '';
      if (text) {
        var expression;
        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: expression,
            text: text
          });
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text: text
          });
        }
      }
    },
    comment: function comment(text) {
      currentParent.children.push({
        type: 3,
        text: text,
        isComment: true
      });
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var l = el.attrsList.length;
  if (l) {
    var attrs = el.attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      };
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {
      warn$2("<template> cannot be keyed. Place the key on real elements instead.");
    }
    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;
  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var inMatch = exp.match(forAliasRE);
    if (!inMatch) {
      process.env.NODE_ENV !== 'production' && warn$2("Invalid v-for expression: " + exp);
      return;
    }
    el.for = inMatch[2].trim();
    var alias = inMatch[1].trim();
    var iteratorMatch = alias.match(forIteratorRE);
    if (iteratorMatch) {
      el.alias = iteratorMatch[1].trim();
      el.iterator1 = iteratorMatch[2].trim();
      if (iteratorMatch[3]) {
        el.iterator2 = iteratorMatch[3].trim();
      }
    } else {
      el.alias = alias;
    }
  }
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (process.env.NODE_ENV !== 'production') {
    warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.");
  }
}

function findPrevElement(children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {
        warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.");
      }
      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

function processSlot(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (process.env.NODE_ENV !== 'production' && el.key) {
      warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.");
    }
  } else {
    var slotTarget = getBindingAttr(el, 'slot');
    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    }
    if (el.tag === 'template') {
      el.slotScope = getAndRemoveAttr(el, 'scope');
    }
  }
}

function processComponent(el) {
  var binding;
  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, isProp;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name);
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isProp = false;
        if (modifiers) {
          if (modifiers.prop) {
            isProp = true;
            name = camelize(name);
            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }
          if (modifiers.camel) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            addHandler(el, "update:" + camelize(name), genAssignmentCode(value, "$event"));
          }
        }
        if (isProp || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value);
        } else {
          addAttr(el, name, value);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        addHandler(el, name, value, modifiers, false, warn$2);
      } else {
        // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
        }
        addDirective(el, name, rawName, value, arg, modifiers);
        if (process.env.NODE_ENV !== 'production' && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (process.env.NODE_ENV !== 'production') {
        var expression = parseText(value, delimiters);
        if (expression) {
          warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.');
        }
      }
      addAttr(el, name, JSON.stringify(value));
    }
  }
}

function checkInFor(el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }
    parent = parent.parent;
  }
  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (process.env.NODE_ENV !== 'production' && map[attrs[i].name] && !isIE && !isEdge) {
      warn$2('duplicate attribute: ' + attrs[i].name);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map;
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug(attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.");
    }
    _el = _el.parent;
  }
}

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize(root, options) {
  if (!root) {
    return;
  }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }
  if (node.type === 3) {
    // text
    return true;
  }
  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false;
    }
    if (node.for) {
      return true;
    }
  }
  return false;
}

/*  */

var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

// keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function genGuard(condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative, warn) {
  var res = isNative ? 'nativeOn:{' : 'on:{';
  for (var name in events) {
    var handler = events[name];
    // #5330: warn click.right, since right clicks do not actually fire click events.
    if (process.env.NODE_ENV !== 'production' && name === 'click' && handler && handler.modifiers && handler.modifiers.right) {
      warn("Use \"contextmenu\" instead of \"click.right\" since right clicks " + "do not actually fire \"click\" events.");
    }
    res += "\"" + name + "\":" + genHandler(name, handler) + ",";
  }
  return res.slice(0, -1) + '}';
}

function genHandler(name, handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(name, handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);

  if (!handler.modifiers) {
    return isMethodPath || isFunctionExpression ? handler.value : "function($event){" + handler.value + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath ? handler.value + '($event)' : isFunctionExpression ? "(" + handler.value + ")($event)" : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return "if(!('button' in $event)&&" + keys.map(genFilterCode).join('&&') + ")return null;";
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }
  var alias = keyCodes[key];
  return "_k($event.keyCode," + JSON.stringify(key) + (alias ? ',' + JSON.stringify(alias) : '') + ")";
}

/*  */

function on(el, dir) {
  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}

/*  */

function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) {
    return !isReservedTag(el.tag);
  };
  this.onceId = 0;
  this.staticRenderFns = [];
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data = el.plain ? undefined : genData$2(el, state);

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code;
  }
}

// hoist static sub-trees out
function genStatic(el, state) {
  el.staticProcessed = true;
  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
}

// v-once
function genOnce(el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }
      parent = parent.parent;
    }
    if (!key) {
      process.env.NODE_ENV !== 'production' && state.warn("v-once can only be used inside v-for that is keyed. ");
      return genElement(el, state);
    }
    return "_o(" + genElement(el, state) + "," + state.onceId++ + (key ? "," + key : "") + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if (process.env.NODE_ENV !== 'production' && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData$2(el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) {
    data += dirs + ',';
  }

  // key
  if (el.key) {
    data += "key:" + el.key + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:{" + genProps(el.attrs) + "},";
  }
  // DOM props
  if (el.props) {
    data += "domProps:{" + genProps(el.props) + "},";
  }
  // event handlers
  if (el.events) {
    data += genHandlers(el.events, false, state.warn) + ",";
  }
  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true, state.warn) + ",";
  }
  // slot target
  if (el.slotTarget) {
    data += "slot:" + el.slotTarget + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += genScopedSlots(el.scopedSlots, state) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;
  if (!dirs) {
    return;
  }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:\"" + dir.arg + "\"" : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];
  if (process.env.NODE_ENV !== 'production' && (el.children.length > 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.');
  }
  if (ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(slots, state) {
  return "scopedSlots:_u([" + Object.keys(slots).map(function (key) {
    return genScopedSlot(key, slots[key], state);
  }).join(',') + "])";
}

function genScopedSlot(key, el, state) {
  if (el.for && !el.forProcessed) {
    return genForScopedSlot(key, el, state);
  }
  return "{key:" + key + ",fn:function(" + String(el.attrsMap.scope) + "){" + "return " + (el.tag === 'template' ? genChildren(el, state) || 'void 0' : genElement(el, state)) + "}}";
}

function genForScopedSlot(key, el, state) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';
  el.forProcessed = true; // avoid recursion
  return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genScopedSlot(key, el, state) + '})';
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      return (altGenElement || genElement)(el$1, state);
    }
    var normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType ? "," + normalizationType : '');
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType(children, maybeComponent) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue;
    }
    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }
    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }
  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  }if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs && "{" + el.attrs.map(function (a) {
    return camelize(a.name) + ":" + a.value;
  }).join(',') + "}";
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')';
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData$2(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var res = '';
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    res += "\"" + prop.name + "\":" + transformSpecialNewlines(prop.value) + ",";
  }
  return res.slice(0, -1);
}

// #3895, #4268
function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}

/*  */

// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// check valid identifier for v-for
var identRE = /[A-Za-z_$][\w$]*/;

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors(ast) {
  var errors = [];
  if (ast) {
    checkNode(ast, errors);
  }
  return errors;
}

function checkNode(node, errors) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", errors);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", errors);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", errors);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], errors);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, errors);
  }
}

function checkEvent(exp, text, errors) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    errors.push("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
  }
  checkExpression(exp, text, errors);
}

function checkFor(node, text, errors) {
  checkExpression(node.for || '', text, errors);
  checkIdentifier(node.alias, 'v-for alias', text, errors);
  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
}

function checkIdentifier(ident, type, text, errors) {
  if (typeof ident === 'string' && !identRE.test(ident)) {
    errors.push("invalid " + type + " \"" + ident + "\" in expression: " + text.trim());
  }
}

function checkExpression(exp, text, errors) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      errors.push("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
    } else {
      errors.push("invalid expression: " + text.trim());
    }
  }
}

/*  */

function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);

  return function compileToFunctions(template, options, vm) {
    options = options || {};

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    }

    // check cache
    var key = options.delimiters ? String(options.delimiters) + template : template;
    if (cache[key]) {
      return cache[key];
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    if (process.env.NODE_ENV !== 'production') {
      if (compiled.errors && compiled.errors.length) {
        warn("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
          return "- " + e;
        }).join('\n') + '\n', vm);
      }
      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(function (msg) {
          return tip(msg, vm);
        });
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;

          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}

/*  */

function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];
      finalOptions.warn = function (msg, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        // merge custom modules
        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives), options.directives);
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      var compiled = baseCompile(template, finalOptions);
      if (process.env.NODE_ENV !== 'production') {
        errors.push.apply(errors, detectErrors(compiled.ast));
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);
  optimize(ast, options);
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML;
});

var mount = Vue$3.prototype.$mount;
Vue$3.prototype.$mount = function (el, hydrating) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    process.env.NODE_ENV !== 'production' && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
    return this;
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && !template) {
            warn("Template element not found or is empty: " + options.template, this);
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (process.env.NODE_ENV !== 'production') {
          warn('invalid template option:' + template, this);
        }
        return this;
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        shouldDecodeNewlines: shouldDecodeNewlines,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        mark('compile end');
        measure(this._name + " compile", 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating);
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML(el) {
  if (el.outerHTML) {
    return el.outerHTML;
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
  }
}

Vue$3.compile = compileToFunctions;

module.exports = Vue$3;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("XJF/FV"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"XJF/FV":4}],9:[function(require,module,exports){
'use strict';

var Vue; // late bind
var version;
var map = window.__VUE_HOT_MAP__ = Object.create(null);
var installed = false;
var isBrowserify = false;
var initHookName = 'beforeCreate';

exports.install = function (vue, browserify) {
  if (installed) return;
  installed = true;

  Vue = vue.__esModule ? vue.default : vue;
  version = Vue.version.split('.').map(Number);
  isBrowserify = browserify;

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init';
  }

  exports.compatible = version[0] >= 2;
  if (!exports.compatible) {
    console.warn('[HMR] You are using a version of vue-hot-reload-api that is ' + 'only compatible with Vue.js core ^2.0.0.');
    return;
  }
};

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  var Ctor = null;
  if (typeof options === 'function') {
    Ctor = options;
    options = Ctor.options;
  }
  makeOptionsHot(id, options);
  map[id] = {
    Ctor: Vue.extend(options),
    instances: []
  };
};

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  injectHook(options, initHookName, function () {
    map[id].instances.push(this);
  });
  injectHook(options, 'beforeDestroy', function () {
    var instances = map[id].instances;
    instances.splice(instances.indexOf(this), 1);
  });
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name];
  options[name] = existing ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook] : [hook];
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.');
    }
  };
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id];
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate();
    });
    return;
  }
  if (typeof options === 'function') {
    options = options.options;
  }
  record.Ctor.options.render = options.render;
  record.Ctor.options.staticRenderFns = options.staticRenderFns;
  record.instances.slice().forEach(function (instance) {
    instance.$options.render = options.render;
    instance.$options.staticRenderFns = options.staticRenderFns;
    instance._staticTrees = []; // reset static trees
    instance.$forceUpdate();
  });
});

exports.reload = tryWrap(function (id, options) {
  var record = map[id];
  if (options) {
    if (typeof options === 'function') {
      options = options.options;
    }
    makeOptionsHot(id, options);
    if (version[1] < 2) {
      // preserve pre 2.2 behavior for global mixin handling
      record.Ctor.extendOptions = options;
    }
    var newCtor = record.Ctor.super.extend(options);
    record.Ctor.options = newCtor.options;
    record.Ctor.cid = newCtor.cid;
    record.Ctor.prototype = newCtor.prototype;
    if (newCtor.release) {
      // temporary global mixin strategy used in < 2.0.0-alpha.6
      newCtor.release();
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate();
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.');
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[2])